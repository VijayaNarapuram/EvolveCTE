//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EvolveCTE.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class NGSISEntities : DbContext
    {
        public NGSISEntities()
            : base("name=NGSISEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AbsenceNotice> AbsenceNotices { get; set; }
        public DbSet<Accommodation> Accommodations { get; set; }
        public DbSet<Address> Addresses { get; set; }
        public DbSet<AlertLookup> AlertLookups { get; set; }
        public DbSet<AssessmentAreaAccommodation> AssessmentAreaAccommodations { get; set; }
        public DbSet<AssessmentAssessmentArea> AssessmentAssessmentAreas { get; set; }
        public DbSet<AssessmentAssessmentArea_old> AssessmentAssessmentArea_old { get; set; }
        public DbSet<Assignment> Assignments { get; set; }
        public DbSet<AssignmentStudent> AssignmentStudents { get; set; }
        public DbSet<Attendance> Attendances { get; set; }
        public DbSet<AttendancePatternExceptionManage> AttendancePatternExceptionManages { get; set; }
        public DbSet<AttendanceSetting> AttendanceSettings { get; set; }
        public DbSet<AttendanceSetup> AttendanceSetups { get; set; }
        public DbSet<BellSchedule> BellSchedules { get; set; }
        public DbSet<BellScheduleDay> BellScheduleDays { get; set; }
        public DbSet<BellScheduleGrade> BellScheduleGrades { get; set; }
        public DbSet<BellSchedulePeriod> BellSchedulePeriods { get; set; }
        public DbSet<BuildingAllotment> BuildingAllotments { get; set; }
        public DbSet<BuildingAssignment> BuildingAssignments { get; set; }
        public DbSet<Bulletin> Bulletins { get; set; }
        public DbSet<BulletinRead> BulletinReads { get; set; }
        public DbSet<BulletinType> BulletinTypes { get; set; }
        public DbSet<Calendar> Calendars { get; set; }
        public DbSet<CalendarEvent> CalendarEvents { get; set; }
        public DbSet<ClassAssignment> ClassAssignments { get; set; }
        public DbSet<ClassAssignmentDocument> ClassAssignmentDocuments { get; set; }
        public DbSet<ClassAssignmentStudent> ClassAssignmentStudents { get; set; }
        public DbSet<ClassAssignmentTopic> ClassAssignmentTopics { get; set; }
        public DbSet<ClassCategory> ClassCategories { get; set; }
        public DbSet<ClassGrade> ClassGrades { get; set; }
        public DbSet<ClassGradePeriod> ClassGradePeriods { get; set; }
        public DbSet<ClassStudent> ClassStudents { get; set; }
        public DbSet<ConfigVariable> ConfigVariables { get; set; }
        public DbSet<CourseGradeLevel> CourseGradeLevels { get; set; }
        public DbSet<CourseGradReq> CourseGradReqs { get; set; }
        public DbSet<CourseSection> CourseSections { get; set; }
        public DbSet<CTESetup> CTESetups { get; set; }
        public DbSet<DataHistory> DataHistories { get; set; }
        public DbSet<District> Districts { get; set; }
        public DbSet<DistrictAddress> DistrictAddresses { get; set; }
        public DbSet<DistrictApplicationSetup> DistrictApplicationSetups { get; set; }
        public DbSet<DistrictArea> DistrictAreas { get; set; }
        public DbSet<DistrictAssessment> DistrictAssessments { get; set; }
        public DbSet<DistrictAttendancePattern> DistrictAttendancePatterns { get; set; }
        public DbSet<DistrictAttendancePatternEvent> DistrictAttendancePatternEvents { get; set; }
        public DbSet<DistrictCalendarEndSetup> DistrictCalendarEndSetups { get; set; }
        public DbSet<DistrictComment> DistrictComments { get; set; }
        public DbSet<DistrictContact> DistrictContacts { get; set; }
        public DbSet<DistrictCourse> DistrictCourses { get; set; }
        public DbSet<DistrictCourseHistory> DistrictCourseHistories { get; set; }
        public DbSet<DistrictCourseTerm> DistrictCourseTerms { get; set; }
        public DbSet<DistrictGPASetup> DistrictGPASetups { get; set; }
        public DbSet<DistrictGradeBookPreference> DistrictGradeBookPreferences { get; set; }
        public DbSet<DistrictGradeScale> DistrictGradeScales { get; set; }
        public DbSet<DistrictGradeScaleDetail> DistrictGradeScaleDetails { get; set; }
        public DbSet<DistrictOrganizational> DistrictOrganizationals { get; set; }
        public DbSet<DistrictPhone> DistrictPhones { get; set; }
        public DbSet<DistrictPortal> DistrictPortals { get; set; }
        public DbSet<DistrictRegion> DistrictRegions { get; set; }
        public DbSet<DistrictReportingPeriod> DistrictReportingPeriods { get; set; }
        public DbSet<DistrictSchoolYear> DistrictSchoolYears { get; set; }
        public DbSet<DistrictSchoolYearTermType> DistrictSchoolYearTermTypes { get; set; }
        public DbSet<DistrictSocial> DistrictSocials { get; set; }
        public DbSet<DistrictStudentBanner> DistrictStudentBanners { get; set; }
        public DbSet<DistrictTerm> DistrictTerms { get; set; }
        public DbSet<DocumentURL> DocumentURLs { get; set; }
        public DbSet<EMISMasterLookup> EMISMasterLookups { get; set; }
        public DbSet<EMISReportingFormat> EMISReportingFormats { get; set; }
        public DbSet<EMISReportPeriod> EMISReportPeriods { get; set; }
        public DbSet<EMISReportPeriodDistrict> EMISReportPeriodDistricts { get; set; }
        public DbSet<EMISReportPeriodLookup> EMISReportPeriodLookups { get; set; }
        public DbSet<EMISReport> EMISReports { get; set; }
        public DbSet<Enrollment> Enrollments { get; set; }
        public DbSet<EnrollmentByYear> EnrollmentByYears { get; set; }
        public DbSet<EntityContact> EntityContacts { get; set; }
        public DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public DbSet<ForgotPasswordKey> ForgotPasswordKeys { get; set; }
        public DbSet<GeoCode_Student> GeoCode_Student { get; set; }
        public DbSet<GiftedStudentsInfo> GiftedStudentsInfoes { get; set; }
        public DbSet<GPACalculationType> GPACalculationTypes { get; set; }
        public DbSet<GPADefinition> GPADefinitions { get; set; }
        public DbSet<GradeBook> GradeBooks { get; set; }
        public DbSet<GradeLevelSubject> GradeLevelSubjects { get; set; }
        public DbSet<GradeMethod> GradeMethods { get; set; }
        public DbSet<GradePeriod> GradePeriods { get; set; }
        public DbSet<GradeTopicDetail> GradeTopicDetails { get; set; }
        public DbSet<GradReq> GradReqs { get; set; }
        public DbSet<GradReqAssessment> GradReqAssessments { get; set; }
        public DbSet<GradReqAssessmentArea> GradReqAssessmentAreas { get; set; }
        public DbSet<GradReqDetail> GradReqDetails { get; set; }
        public DbSet<GradReqSubject> GradReqSubjects { get; set; }
        public DbSet<History> Histories { get; set; }
        public DbSet<HomeRoom_06132016> HomeRoom_06132016 { get; set; }
        public DbSet<HomeroomHistory> HomeroomHistories { get; set; }
        public DbSet<HomeroomStaff_06132016> HomeroomStaff_06132016 { get; set; }
        public DbSet<Incident> Incidents { get; set; }
        public DbSet<LoginDetail> LoginDetails { get; set; }
        public DbSet<MenuItem> MenuItems { get; set; }
        public DbSet<MenuItems_NEW> MenuItems_NEW { get; set; }
        public DbSet<MenuItemsChild> MenuItemsChilds { get; set; }
        public DbSet<MenuType> MenuTypes { get; set; }
        public DbSet<OAD_Fall2017> OAD_Fall2017 { get; set; }
        public DbSet<OdysseywareCourseMapping> OdysseywareCourseMappings { get; set; }
        public DbSet<Organization> Organizations { get; set; }
        public DbSet<OrganizationContact> OrganizationContacts { get; set; }
        public DbSet<Orientation> Orientations { get; set; }
        public DbSet<OrientationSchedule> OrientationSchedules { get; set; }
        public DbSet<Person> People { get; set; }
        public DbSet<PersonAddress> PersonAddresses { get; set; }
        public DbSet<PersonContact> PersonContacts { get; set; }
        public DbSet<PersonContactPhone> PersonContactPhones { get; set; }
        public DbSet<PersonDisability> PersonDisabilities { get; set; }
        public DbSet<PersonDynamicContactPhone> PersonDynamicContactPhones { get; set; }
        public DbSet<PersonPhone> PersonPhones { get; set; }
        public DbSet<PersonPhoto> PersonPhotos { get; set; }
        public DbSet<PersonRace> PersonRaces { get; set; }
        public DbSet<PersonSocial> PersonSocials { get; set; }
        public DbSet<PickListCategory_Bak> PickListCategory_Bak { get; set; }
        public DbSet<PickListDetails_Bak> PickListDetails_Bak { get; set; }
        public DbSet<PortalContactAddress> PortalContactAddresses { get; set; }
        public DbSet<PortalStudentAddress> PortalStudentAddresses { get; set; }
        public DbSet<PortalStudentPhone> PortalStudentPhones { get; set; }
        public DbSet<PortalVersion> PortalVersions { get; set; }
        public DbSet<ProgramCode> ProgramCodes { get; set; }
        public DbSet<RequiredDocument> RequiredDocuments { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<RoleMenuAccess> RoleMenuAccesses { get; set; }
        public DbSet<Room> Rooms { get; set; }
        public DbSet<RouteDetail> RouteDetails { get; set; }
        public DbSet<Route> Routes { get; set; }
        public DbSet<RouteStudent> RouteStudents { get; set; }
        public DbSet<RouteVehicle> RouteVehicles { get; set; }
        public DbSet<School> Schools { get; set; }
        public DbSet<SchoolAlert> SchoolAlerts { get; set; }
        public DbSet<SchoolAttendancePattern> SchoolAttendancePatterns { get; set; }
        public DbSet<SchoolAttendancePatternEvent> SchoolAttendancePatternEvents { get; set; }
        public DbSet<SchoolBulletin> SchoolBulletins { get; set; }
        public DbSet<SchoolComment> SchoolComments { get; set; }
        public DbSet<SchoolContact> SchoolContacts { get; set; }
        public DbSet<SchoolCourse> SchoolCourses { get; set; }
        public DbSet<SchoolCourseSection> SchoolCourseSections { get; set; }
        public DbSet<SchoolCourseSectionStaffHistory> SchoolCourseSectionStaffHistories { get; set; }
        public DbSet<SchoolCourseTerm> SchoolCourseTerms { get; set; }
        public DbSet<SchoolDay> SchoolDays { get; set; }
        public DbSet<SchoolEvent> SchoolEvents { get; set; }
        public DbSet<SchoolGPASetup> SchoolGPASetups { get; set; }
        public DbSet<SchoolGradeBookPreference> SchoolGradeBookPreferences { get; set; }
        public DbSet<SchoolGradeLevel> SchoolGradeLevels { get; set; }
        public DbSet<SchoolGradeScale> SchoolGradeScales { get; set; }
        public DbSet<SchoolGradeScaleDetail> SchoolGradeScaleDetails { get; set; }
        public DbSet<SchoolLunchMenu> SchoolLunchMenus { get; set; }
        public DbSet<SchoolPeriod> SchoolPeriods { get; set; }
        public DbSet<SchoolPortal> SchoolPortals { get; set; }
        public DbSet<SchoolReportingPeriod> SchoolReportingPeriods { get; set; }
        public DbSet<SchoolSocial> SchoolSocials { get; set; }
        public DbSet<SchoolStaffType> SchoolStaffTypes { get; set; }
        public DbSet<SchoolStandard> SchoolStandards { get; set; }
        public DbSet<SchoolStandardSet> SchoolStandardSets { get; set; }
        public DbSet<SchoolStudentBanner> SchoolStudentBanners { get; set; }
        public DbSet<SchoolTerm> SchoolTerms { get; set; }
        public DbSet<SchoolYear> SchoolYears { get; set; }
        public DbSet<SchoolYearTermType> SchoolYearTermTypes { get; set; }
        public DbSet<SectionPeriodMapping> SectionPeriodMappings { get; set; }
        public DbSet<SectionStaffMapping> SectionStaffMappings { get; set; }
        public DbSet<Staff> Staffs { get; set; }
        public DbSet<StaffCertification> StaffCertifications { get; set; }
        public DbSet<StaffDistrictMapping> StaffDistrictMappings { get; set; }
        public DbSet<StaffMapping> StaffMappings { get; set; }
        public DbSet<StaffSchoolDepartment> StaffSchoolDepartments { get; set; }
        public DbSet<StaffSchoolMapping> StaffSchoolMappings { get; set; }
        public DbSet<Standard> Standards { get; set; }
        public DbSet<Student> Students { get; set; }
        public DbSet<StudentAccommodation> StudentAccommodations { get; set; }
        public DbSet<StudentAlert> StudentAlerts { get; set; }
        public DbSet<StudentAlternate> StudentAlternates { get; set; }
        public DbSet<StudentApplication> StudentApplications { get; set; }
        public DbSet<StudentApplicationContact> StudentApplicationContacts { get; set; }
        public DbSet<StudentApplicationPhone> StudentApplicationPhones { get; set; }
        public DbSet<StudentAssessment> StudentAssessments { get; set; }
        public DbSet<StudentAssessmentAccommodation> StudentAssessmentAccommodations { get; set; }
        public DbSet<StudentAssignmentHistory> StudentAssignmentHistories { get; set; }
        public DbSet<StudentAttendance> StudentAttendances { get; set; }
        public DbSet<StudentBannerLookup> StudentBannerLookups { get; set; }
        public DbSet<StudentContact> StudentContacts { get; set; }
        public DbSet<StudentCourseRequest> StudentCourseRequests { get; set; }
        public DbSet<StudentCTE> StudentCTEs { get; set; }
        public DbSet<StudentDayAttendance> StudentDayAttendances { get; set; }
        public DbSet<StudentDayAttendance_03022016> StudentDayAttendance_03022016 { get; set; }
        public DbSet<StudentDiscipline> StudentDisciplines { get; set; }
        public DbSet<StudentETR> StudentETRs { get; set; }
        public DbSet<StudentExcessiveHabitualAb> StudentExcessiveHabitualAbs { get; set; }
        public DbSet<StudentGPA> StudentGPAs { get; set; }
        public DbSet<StudentGrad> StudentGrads { get; set; }
        public DbSet<StudentGradRequirement> StudentGradRequirements { get; set; }
        public DbSet<StudentGraduation> StudentGraduations { get; set; }
        public DbSet<StudentHealthInfo> StudentHealthInfoes { get; set; }
        public DbSet<StudentHomeroom_06132016> StudentHomeroom_06132016 { get; set; }
        public DbSet<StudentIEP> StudentIEPs { get; set; }
        public DbSet<StudentInterventionStaff> StudentInterventionStaffs { get; set; }
        public DbSet<StudentNextYear> StudentNextYears { get; set; }
        public DbSet<StudentNote> StudentNotes { get; set; }
        public DbSet<StudentOrientation> StudentOrientations { get; set; }
        public DbSet<StudentOrientationSchedule> StudentOrientationSchedules { get; set; }
        public DbSet<StudentPhone> StudentPhones { get; set; }
        public DbSet<StudentProgram> StudentPrograms { get; set; }
        public DbSet<StudentProgramHistory> StudentProgramHistories { get; set; }
        public DbSet<StudentRequiredDocument> StudentRequiredDocuments { get; set; }
        public DbSet<StudentSchedule> StudentSchedules { get; set; }
        public DbSet<StudentSectionSchedule> StudentSectionSchedules { get; set; }
        public DbSet<StudentSPEDGoal> StudentSPEDGoals { get; set; }
        public DbSet<StudentStandingRecord> StudentStandingRecords { get; set; }
        public DbSet<StudentTime> StudentTimes { get; set; }
        public DbSet<StudentTransferOfRight> StudentTransferOfRights { get; set; }
        public DbSet<TDA_BrightspaceProgress> TDA_BrightspaceProgress { get; set; }
        public DbSet<TechnologySurvey> TechnologySurveys { get; set; }
        public DbSet<TestingRoom> TestingRooms { get; set; }
        public DbSet<TestingRoster> TestingRosters { get; set; }
        public DbSet<TestLocation> TestLocations { get; set; }
        public DbSet<Topic> Topics { get; set; }
        public DbSet<Vehicle> Vehicles { get; set; }
        public DbSet<Version> Versions { get; set; }
        public DbSet<Withdrawal> Withdrawals { get; set; }
        public DbSet<Address01192017> Address01192017 { get; set; }
        public DbSet<AssessmentDiagnostic> AssessmentDiagnostics { get; set; }
        public DbSet<AssessmentGradPerformance> AssessmentGradPerformances { get; set; }
        public DbSet<AssessmentScoreNotReported> AssessmentScoreNotReporteds { get; set; }
        public DbSet<AssessmentSetup> AssessmentSetups { get; set; }
        public DbSet<AssessmentTestAccommodationsType> AssessmentTestAccommodationsTypes { get; set; }
        public DbSet<AssessmentTestGradeLevel> AssessmentTestGradeLevels { get; set; }
        public DbSet<AssessmentTestType> AssessmentTestTypes { get; set; }
        public DbSet<AssessmentValidScore> AssessmentValidScores { get; set; }
        public DbSet<BrightspaceSessions_Test> BrightspaceSessions_Test { get; set; }
        public DbSet<BrightspaceStaffSession> BrightspaceStaffSessions { get; set; }
        public DbSet<datahistory_08162016> datahistory_08162016 { get; set; }
        public DbSet<DistrictAddress01192017> DistrictAddress01192017 { get; set; }
        public DbSet<DistrictAttendancePatternException> DistrictAttendancePatternExceptions { get; set; }
        public DbSet<DistrictRegionBackup> DistrictRegionBackups { get; set; }
        public DbSet<EMISReportField> EMISReportFields { get; set; }
        public DbSet<EnrollmentByYear_08162016> EnrollmentByYear_08162016 { get; set; }
        public DbSet<Homeroom> Homerooms { get; set; }
        public DbSet<Homeroom_BKP06062016> Homeroom_BKP06062016 { get; set; }
        public DbSet<HomeroomBAK_06102016> HomeroomBAK_06102016 { get; set; }
        public DbSet<HomeroomOld> HomeroomOlds { get; set; }
        public DbSet<HomeroomStaff> HomeroomStaffs { get; set; }
        public DbSet<HomeroomStaffBAK_06102016> HomeroomStaffBAK_06102016 { get; set; }
        public DbSet<Person07082016> Person07082016 { get; set; }
        public DbSet<PickListCategory> PickListCategories { get; set; }
        public DbSet<PickListDetail> PickListDetails { get; set; }
        public DbSet<PortalAccount> PortalAccounts { get; set; }
        public DbSet<PortalAccountDashboard> PortalAccountDashboards { get; set; }
        public DbSet<PortalLinkedStudent> PortalLinkedStudents { get; set; }
        public DbSet<PortalLoginParent> PortalLoginParents { get; set; }
        public DbSet<PortalLoginStudent> PortalLoginStudents { get; set; }
        public DbSet<PortalStudentContactPhone> PortalStudentContactPhones { get; set; }
        public DbSet<RoleMenuPrivilage> RoleMenuPrivilages { get; set; }
        public DbSet<SchoolAttendancePattern_02092016> SchoolAttendancePattern_02092016 { get; set; }
        public DbSet<SchoolAttendancePatternBak_02182016> SchoolAttendancePatternBak_02182016 { get; set; }
        public DbSet<SchoolAttendancePatternException> SchoolAttendancePatternExceptions { get; set; }
        public DbSet<SchoolCourseSection_Bak_04042016> SchoolCourseSection_Bak_04042016 { get; set; }
        public DbSet<SCS_Bak1> SCS_Bak1 { get; set; }
        public DbSet<SCS_Bak2> SCS_Bak2 { get; set; }
        public DbSet<SCS_Bak3> SCS_Bak3 { get; set; }
        public DbSet<SectionStaff> SectionStaffs { get; set; }
        public DbSet<StudentAssignmentGrade> StudentAssignmentGrades { get; set; }
        public DbSet<StudentContact368> StudentContact368 { get; set; }
        public DbSet<StudentDayAttendance_02042016> StudentDayAttendance_02042016 { get; set; }
        public DbSet<StudentDayAttendance_TEMP> StudentDayAttendance_TEMP { get; set; }
        public DbSet<studentgrade> studentgrades { get; set; }
        public DbSet<studentgrade0406> studentgrade0406 { get; set; }
        public DbSet<StudentHomeroom> StudentHomerooms { get; set; }
        public DbSet<StudentHomeroomBAK_06102016> StudentHomeroomBAK_06102016 { get; set; }
        public DbSet<StudentNextYear_0603> StudentNextYear_0603 { get; set; }
        public DbSet<StudentNextYear_0603_9rows> StudentNextYear_0603_9rows { get; set; }
        public DbSet<StudentNextYear_06152016> StudentNextYear_06152016 { get; set; }
        public DbSet<StudentScheduleBack> StudentScheduleBacks { get; set; }
        public DbSet<StudentTime1> StudentTime1 { get; set; }
        public DbSet<TDAStudentActivity> TDAStudentActivities { get; set; }
        public DbSet<TDAStudentActivityTime> TDAStudentActivityTimes { get; set; }
        public DbSet<TMP_SCA> TMP_SCA { get; set; }
        public DbSet<UserMenuPrivilage> UserMenuPrivilages { get; set; }
        public DbSet<Versions_QA> Versions_QA { get; set; }
    
        public virtual int DayAttendance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DayAttendance");
        }
    
        public virtual ObjectResult<EmisExtract_AFA_Result> EmisExtract_AFA(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_AFA_Result>("EmisExtract_AFA", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_AFA_15_16_Result> EmisExtract_AFA_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_AFA_15_16_Result>("EmisExtract_AFA_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_AFA_nEW_Result> EmisExtract_AFA_nEW(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_AFA_nEW_Result>("EmisExtract_AFA_nEW", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_AFA_test_Result> EmisExtract_AFA_test(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_AFA_test_Result>("EmisExtract_AFA_test", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_CDL_Result> EmisExtract_CDL(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_CDL_Result>("EmisExtract_CDL", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_CDL_15_16_Result> EmisExtract_CDL_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_CDL_15_16_Result>("EmisExtract_CDL_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_CDN_Result> EmisExtract_CDN(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_CDN_Result>("EmisExtract_CDN", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_CDN_15_16_Result> EmisExtract_CDN_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_CDN_15_16_Result>("EmisExtract_CDN_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FA_Result> EmisExtract_G_FA(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FA_Result>("EmisExtract_G_FA", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FA_15_16_Result> EmisExtract_G_FA_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FA_15_16_Result>("EmisExtract_G_FA_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FA123_Result> EmisExtract_G_FA123(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FA123_Result>("EmisExtract_G_FA123", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FE_Result> EmisExtract_G_FE(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FE_Result>("EmisExtract_G_FE", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FE_15_16_Result> EmisExtract_G_FE_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FE_15_16_Result>("EmisExtract_G_FE_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FN_Result> EmisExtract_G_FN(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FN_Result>("EmisExtract_G_FN", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_FN_15_16_Result> EmisExtract_G_FN_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_FN_15_16_Result>("EmisExtract_G_FN_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_GC_Result> EmisExtract_G_GC(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_GC_Result>("EmisExtract_G_GC", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_GC_15_16_Result> EmisExtract_G_GC_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_GC_15_16_Result>("EmisExtract_G_GC_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_GI_Result> EmisExtract_G_GI(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_GI_Result>("EmisExtract_G_GI", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_G_GI_15_16_Result> EmisExtract_G_GI_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_G_GI_15_16_Result>("EmisExtract_G_GI_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CN_Result> EmisExtract_L_CN(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CN_Result>("EmisExtract_L_CN", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CN_15_16_Result> EmisExtract_L_CN_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CN_15_16_Result>("EmisExtract_L_CN_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CN_test_Result> EmisExtract_L_CN_test(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CN_test_Result>("EmisExtract_L_CN_test", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CU_Result> EmisExtract_L_CU(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CU_Result>("EmisExtract_L_CU", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CU_15_16_Result> EmisExtract_L_CU_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CU_15_16_Result>("EmisExtract_L_CU_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_CU_test_Result> EmisExtract_L_CU_test(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_CU_test_Result>("EmisExtract_L_CU_test", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_Result> EmisExtract_L_GN(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_Result>("EmisExtract_L_GN", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_15_16_Result> EmisExtract_L_GN_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_15_16_Result>("EmisExtract_L_GN_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_FY1516_Result> EmisExtract_L_GN_FY1516(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_FY1516_Result>("EmisExtract_L_GN_FY1516", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_FY1617_Result> EmisExtract_L_GN_FY1617(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_FY1617_Result>("EmisExtract_L_GN_FY1617", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_NEW_Result> EmisExtract_L_GN_NEW(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_NEW_Result>("EmisExtract_L_GN_NEW", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_L_GN_old_Result> EmisExtract_L_GN_old(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_L_GN_old_Result>("EmisExtract_L_GN_old", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_DN_Result> EmisExtract_S_OP_DN(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_DN_Result>("EmisExtract_S_OP_DN", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_DN_15_16_Result> EmisExtract_S_OP_DN_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_DN_15_16_Result>("EmisExtract_S_OP_DN_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_DT_Result> EmisExtract_S_OP_DT(Nullable<int> districtID, string schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_DT_Result>("EmisExtract_S_OP_DT", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_DT_15_16_Result> EmisExtract_S_OP_DT_15_16(Nullable<int> districtID, string schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_DT_15_16_Result>("EmisExtract_S_OP_DT_15_16", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FD_Result> EmisExtract_S_OP_FD(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FD_Result>("EmisExtract_S_OP_FD", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FD_15_16_Result> EmisExtract_S_OP_FD_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FD_15_16_Result>("EmisExtract_S_OP_FD_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FD_16_17_Result> EmisExtract_S_OP_FD_16_17(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPLs)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLsParameter = schoolYearPLs.HasValue ?
                new ObjectParameter("SchoolYearPLs", schoolYearPLs) :
                new ObjectParameter("SchoolYearPLs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FD_16_17_Result>("EmisExtract_S_OP_FD_16_17", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLsParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FD_old_Result> EmisExtract_S_OP_FD_old(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FD_old_Result>("EmisExtract_S_OP_FD_old", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FD_test_Result> EmisExtract_S_OP_FD_test(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FD_test_Result>("EmisExtract_S_OP_FD_test", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FE_Result> EmisExtract_S_OP_FE(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FE_Result>("EmisExtract_S_OP_FE", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FE_15_16_Result> EmisExtract_S_OP_FE_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FE_15_16_Result>("EmisExtract_S_OP_FE_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FF_Result> EmisExtract_S_OP_FF(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FF_Result>("EmisExtract_S_OP_FF", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FF_15_16_Result> EmisExtract_S_OP_FF_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FF_15_16_Result>("EmisExtract_S_OP_FF_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FG_Result> EmisExtract_S_OP_FG(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FG_Result>("EmisExtract_S_OP_FG", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FG_15_16_Result> EmisExtract_S_OP_FG_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FG_15_16_Result>("EmisExtract_S_OP_FG_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FG_NEW_Result> EmisExtract_S_OP_FG_NEW(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FG_NEW_Result>("EmisExtract_S_OP_FG_NEW", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FG_NEW2_Result> EmisExtract_S_OP_FG_NEW2(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FG_NEW2_Result>("EmisExtract_S_OP_FG_NEW2", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FG_Old_Result> EmisExtract_S_OP_FG_Old(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FG_Old_Result>("EmisExtract_S_OP_FG_Old", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FN_Result> EmisExtract_S_OP_FN(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FN_Result>("EmisExtract_S_OP_FN", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FN_15_16_Result> EmisExtract_S_OP_FN_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FN_15_16_Result>("EmisExtract_S_OP_FN_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FN_16_17_Result> EmisExtract_S_OP_FN_16_17(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPLs)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLsParameter = schoolYearPLs.HasValue ?
                new ObjectParameter("SchoolYearPLs", schoolYearPLs) :
                new ObjectParameter("SchoolYearPLs", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FN_16_17_Result>("EmisExtract_S_OP_FN_16_17", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLsParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FN_FN220_Result> EmisExtract_S_OP_FN_FN220(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FN_FN220_Result>("EmisExtract_S_OP_FN_FN220", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FN_New_Result> EmisExtract_S_OP_FN_New(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FN_New_Result>("EmisExtract_S_OP_FN_New", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FS_Result> EmisExtract_S_OP_FS(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FS_Result>("EmisExtract_S_OP_FS", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual int EmisExtract_S_OP_FS_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmisExtract_S_OP_FS_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FS_NEW_Result> EmisExtract_S_OP_FS_NEW(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FS_NEW_Result>("EmisExtract_S_OP_FS_NEW", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual int EmisExtract_S_OP_FS_PER(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmisExtract_S_OP_FS_PER", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual int EmisExtract_S_OP_FS_PER2(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmisExtract_S_OP_FS_PER2", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual int EmisExtract_S_OP_FS_PrePerm(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmisExtract_S_OP_FS_PrePerm", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FS_test_Result> EmisExtract_S_OP_FS_test(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FS_test_Result>("EmisExtract_S_OP_FS_test", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_FT_Result> EmisExtract_S_OP_FT(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_FT_Result>("EmisExtract_S_OP_FT", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual int EmisExtract_S_OP_GD(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmisExtract_S_OP_GD", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GE_Result> EmisExtract_S_OP_GE(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GE_Result>("EmisExtract_S_OP_GE", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GE_15_16_Result> EmisExtract_S_OP_GE_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GE_15_16_Result>("EmisExtract_S_OP_GE_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GI_Result> EmisExtract_S_OP_GI(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GI_Result>("EmisExtract_S_OP_GI", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GI_15_16_Result> EmisExtract_S_OP_GI_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GI_15_16_Result>("EmisExtract_S_OP_GI_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GJ_Result> EmisExtract_S_OP_GJ(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GJ_Result>("EmisExtract_S_OP_GJ", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GJ_15_16_Result> EmisExtract_S_OP_GJ_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GJ_15_16_Result>("EmisExtract_S_OP_GJ_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GQ_Result> EmisExtract_S_OP_GQ(Nullable<int> districtID, string schoolID, Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GQ_Result>("EmisExtract_S_OP_GQ", districtIDParameter, schoolIDParameter, studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<EmisExtract_S_OP_GQ_15_16_Result> EmisExtract_S_OP_GQ_15_16(Nullable<int> districtID, string schoolID, Nullable<int> studentID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmisExtract_S_OP_GQ_15_16_Result>("EmisExtract_S_OP_GQ_15_16", districtIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<HomeroomSplit_Result> HomeroomSplit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HomeroomSplit_Result>("HomeroomSplit");
        }
    
        public virtual int InsertStudentAssessment(Nullable<int> assessmentPL, string test, string sTU, Nullable<int> districtId, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<System.DateTime> assessmentDate, string arrayProgramCodes, Nullable<int> studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var testParameter = test != null ?
                new ObjectParameter("Test", test) :
                new ObjectParameter("Test", typeof(string));
    
            var sTUParameter = sTU != null ?
                new ObjectParameter("STU", sTU) :
                new ObjectParameter("STU", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var arrayProgramCodesParameter = arrayProgramCodes != null ?
                new ObjectParameter("ArrayProgramCodes", arrayProgramCodes) :
                new ObjectParameter("ArrayProgramCodes", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStudentAssessment", assessmentPLParameter, testParameter, sTUParameter, districtIdParameter, schoolIdParameter, schoolYearIdParameter, assessmentDateParameter, arrayProgramCodesParameter, studentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int MULTI_VALUED_USER_INPUT_PARAMETER(string studentID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MULTI_VALUED_USER_INPUT_PARAMETER", studentIDParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<SearchAllTables_Result> SearchAllTables(string searchStr)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAllTables_Result>("SearchAllTables", searchStrParameter);
        }
    
        public virtual ObjectResult<SearchAllTables1_Result> SearchAllTables1(string searchStr)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchAllTables1_Result>("SearchAllTables1", searchStrParameter);
        }
    
        public virtual ObjectResult<TDA_CourseSection_Result> TDA_CourseSection(string schoolCourseNumber, string sectionNumber, Nullable<int> rosterByValue, Nullable<int> schoolCourseID, Nullable<int> schoolCourseSectionId, Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var rosterByValueParameter = rosterByValue.HasValue ?
                new ObjectParameter("RosterByValue", rosterByValue) :
                new ObjectParameter("RosterByValue", typeof(int));
    
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var schoolCourseSectionIdParameter = schoolCourseSectionId.HasValue ?
                new ObjectParameter("SchoolCourseSectionId", schoolCourseSectionId) :
                new ObjectParameter("SchoolCourseSectionId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TDA_CourseSection_Result>("TDA_CourseSection", schoolCourseNumberParameter, sectionNumberParameter, rosterByValueParameter, schoolCourseIDParameter, schoolCourseSectionIdParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual int TDA_ExcessiveAbsenceOver18(string studentID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TDA_ExcessiveAbsenceOver18", studentIDParameter, fromParameter, toParameter);
        }
    
        public virtual int TDA_ExcessiveAbsenceUnder18(string studentID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TDA_ExcessiveAbsenceUnder18", studentIDParameter, fromParameter, toParameter);
        }
    
        public virtual int TDA_HabitualTruancy(string studentID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TDA_HabitualTruancy", studentIDParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<TDA_UnExcusedCount_Result> TDA_UnExcusedCount(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TDA_UnExcusedCount_Result>("TDA_UnExcusedCount", fromParameter, toParameter);
        }
    
        public virtual int TRNG_264(string courseNumber, Nullable<int> studentID)
        {
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TRNG_264", courseNumberParameter, studentIDParameter);
        }
    
        public virtual int upsInsertNewDistrict(Nullable<int> districttypeid, string districtirn, string districtname, Nullable<bool> excludefromstatereporting, string districtpicture, string districtlogo, string districtaddresstypes, string districtstreetnumbers, string districtstreetnames, string districtcities, string districtstates, string districtcountries, string districtzipcodes, string districtcounties, string districtneighbourhoods, string districtphones, string districtphonetypes, string createdby, Nullable<System.DateTime> createddate)
        {
            var districttypeidParameter = districttypeid.HasValue ?
                new ObjectParameter("districttypeid", districttypeid) :
                new ObjectParameter("districttypeid", typeof(int));
    
            var districtirnParameter = districtirn != null ?
                new ObjectParameter("districtirn", districtirn) :
                new ObjectParameter("districtirn", typeof(string));
    
            var districtnameParameter = districtname != null ?
                new ObjectParameter("districtname", districtname) :
                new ObjectParameter("districtname", typeof(string));
    
            var excludefromstatereportingParameter = excludefromstatereporting.HasValue ?
                new ObjectParameter("excludefromstatereporting", excludefromstatereporting) :
                new ObjectParameter("excludefromstatereporting", typeof(bool));
    
            var districtpictureParameter = districtpicture != null ?
                new ObjectParameter("districtpicture", districtpicture) :
                new ObjectParameter("districtpicture", typeof(string));
    
            var districtlogoParameter = districtlogo != null ?
                new ObjectParameter("districtlogo", districtlogo) :
                new ObjectParameter("districtlogo", typeof(string));
    
            var districtaddresstypesParameter = districtaddresstypes != null ?
                new ObjectParameter("districtaddresstypes", districtaddresstypes) :
                new ObjectParameter("districtaddresstypes", typeof(string));
    
            var districtstreetnumbersParameter = districtstreetnumbers != null ?
                new ObjectParameter("districtstreetnumbers", districtstreetnumbers) :
                new ObjectParameter("districtstreetnumbers", typeof(string));
    
            var districtstreetnamesParameter = districtstreetnames != null ?
                new ObjectParameter("districtstreetnames", districtstreetnames) :
                new ObjectParameter("districtstreetnames", typeof(string));
    
            var districtcitiesParameter = districtcities != null ?
                new ObjectParameter("districtcities", districtcities) :
                new ObjectParameter("districtcities", typeof(string));
    
            var districtstatesParameter = districtstates != null ?
                new ObjectParameter("districtstates", districtstates) :
                new ObjectParameter("districtstates", typeof(string));
    
            var districtcountriesParameter = districtcountries != null ?
                new ObjectParameter("districtcountries", districtcountries) :
                new ObjectParameter("districtcountries", typeof(string));
    
            var districtzipcodesParameter = districtzipcodes != null ?
                new ObjectParameter("districtzipcodes", districtzipcodes) :
                new ObjectParameter("districtzipcodes", typeof(string));
    
            var districtcountiesParameter = districtcounties != null ?
                new ObjectParameter("districtcounties", districtcounties) :
                new ObjectParameter("districtcounties", typeof(string));
    
            var districtneighbourhoodsParameter = districtneighbourhoods != null ?
                new ObjectParameter("districtneighbourhoods", districtneighbourhoods) :
                new ObjectParameter("districtneighbourhoods", typeof(string));
    
            var districtphonesParameter = districtphones != null ?
                new ObjectParameter("districtphones", districtphones) :
                new ObjectParameter("districtphones", typeof(string));
    
            var districtphonetypesParameter = districtphonetypes != null ?
                new ObjectParameter("districtphonetypes", districtphonetypes) :
                new ObjectParameter("districtphonetypes", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upsInsertNewDistrict", districttypeidParameter, districtirnParameter, districtnameParameter, excludefromstatereportingParameter, districtpictureParameter, districtlogoParameter, districtaddresstypesParameter, districtstreetnumbersParameter, districtstreetnamesParameter, districtcitiesParameter, districtstatesParameter, districtcountriesParameter, districtzipcodesParameter, districtcountiesParameter, districtneighbourhoodsParameter, districtphonesParameter, districtphonetypesParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<upsSelectGraduationCreditsRequired_Result> upsSelectGraduationCreditsRequired(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<upsSelectGraduationCreditsRequired_Result>("upsSelectGraduationCreditsRequired", studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> upsUpdateDataHistoryFRomArchivePorcess(string studentIDS, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("upsUpdateDataHistoryFRomArchivePorcess", studentIDSParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int usp_Delete_Class(Nullable<int> classId, ObjectParameter errorLogId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Delete_Class", classIdParameter, errorLogId);
        }
    
        public virtual int usp_LoadEvolveStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadEvolveStaff");
        }
    
        public virtual int usp_LoadPersonStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_LoadPersonStaff");
        }
    
        public virtual int usp_Save_ClassCategory(Nullable<int> id, Nullable<int> classId, Nullable<int> gradePeriodId, string name, Nullable<decimal> weight, Nullable<byte> drops)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var dropsParameter = drops.HasValue ?
                new ObjectParameter("Drops", drops) :
                new ObjectParameter("Drops", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Save_ClassCategory", idParameter, classIdParameter, gradePeriodIdParameter, nameParameter, weightParameter, dropsParameter);
        }
    
        public virtual ObjectResult<usp_SchoolTeachersGetBySchoolId_Result> usp_SchoolTeachersGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SchoolTeachersGetBySchoolId_Result>("usp_SchoolTeachersGetBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<usp_search_name_Result> usp_search_name(Nullable<int> loginID, string strSearch, Nullable<int> matchType)
        {
            var loginIDParameter = loginID.HasValue ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(int));
    
            var strSearchParameter = strSearch != null ?
                new ObjectParameter("strSearch", strSearch) :
                new ObjectParameter("strSearch", typeof(string));
    
            var matchTypeParameter = matchType.HasValue ?
                new ObjectParameter("MatchType", matchType) :
                new ObjectParameter("MatchType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_search_name_Result>("usp_search_name", loginIDParameter, strSearchParameter, matchTypeParameter);
        }
    
        public virtual int usp_Select_ClassAssignmentsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_ClassAssignmentsList");
        }
    
        public virtual int usp_Select_Classes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_Classes");
        }
    
        public virtual int usp_Select_ClassGradePeriodIdsTermExam(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_ClassGradePeriodIdsTermExam", classIdParameter);
        }
    
        public virtual int usp_Select_ClassStudentsList(Nullable<int> classid)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("Classid", classid) :
                new ObjectParameter("Classid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_ClassStudentsList", classidParameter);
        }
    
        public virtual int usp_Select_GradeLevels()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_GradeLevels");
        }
    
        public virtual int usp_Select_GradePeriodsTermExamBySchool(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_GradePeriodsTermExamBySchool", schoolIdParameter);
        }
    
        public virtual int usp_Select_GradeScales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_GradeScales");
        }
    
        public virtual int usp_Select_GradingPeriods(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_GradingPeriods", schoolIdParameter);
        }
    
        public virtual int usp_Select_Teachers(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_Teachers", schoolIdParameter);
        }
    
        public virtual int usp_Select_TermPeriodWeights(Nullable<int> schoolId, Nullable<int> classId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Select_TermPeriodWeights", schoolIdParameter, classIdParameter);
        }
    
        public virtual ObjectResult<USP_StudentBannerLine2_Result> USP_StudentBannerLine2(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_StudentBannerLine2_Result>("USP_StudentBannerLine2", studentIDParameter);
        }
    
        public virtual int usp_UpdateDefaultStaff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDefaultStaff");
        }
    
        public virtual int usp_UpdateDefaultStaffSkl()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDefaultStaffSkl");
        }
    
        public virtual int uspABC(Nullable<int> pickListCodeID, string pickListName, string pickListCodeValuesArray, Nullable<int> sortType)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            var pickListNameParameter = pickListName != null ?
                new ObjectParameter("PickListName", pickListName) :
                new ObjectParameter("PickListName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType.HasValue ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspABC", pickListCodeIDParameter, pickListNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter);
        }
    
        public virtual int uspAddDistrictCoursesToSchool(string districtCourseIds, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseIdsParameter = districtCourseIds != null ?
                new ObjectParameter("DistrictCourseIds", districtCourseIds) :
                new ObjectParameter("DistrictCourseIds", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAddDistrictCoursesToSchool", districtCourseIdsParameter, schoolIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<uspAdvancedSearch_Result> uspAdvancedSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<bool> isAdds, Nullable<bool> isPhone, Nullable<bool> isSSID, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var isAddsParameter = isAdds.HasValue ?
                new ObjectParameter("IsAdds", isAdds) :
                new ObjectParameter("IsAdds", typeof(bool));
    
            var isPhoneParameter = isPhone.HasValue ?
                new ObjectParameter("IsPhone", isPhone) :
                new ObjectParameter("IsPhone", typeof(bool));
    
            var isSSIDParameter = isSSID.HasValue ?
                new ObjectParameter("IsSSID", isSSID) :
                new ObjectParameter("IsSSID", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAdvancedSearch_Result>("uspAdvancedSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, isAddsParameter, isPhoneParameter, isSSIDParameter, personIDParameter);
        }
    
        public virtual int uspAllCategoriesGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAllCategoriesGetByClassId", classIdParameter);
        }
    
        public virtual int uspAllClassesOfSchoolGet(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAllClassesOfSchoolGet", teacherIdParameter);
        }
    
        public virtual ObjectResult<uspAllPickListCategoriesGet_Result> uspAllPickListCategoriesGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAllPickListCategoriesGet_Result>("uspAllPickListCategoriesGet");
        }
    
        public virtual ObjectResult<Nullable<int>> uspApproveStudentEnrollment(Nullable<int> applicationid, Nullable<int> approvestatus)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var approvestatusParameter = approvestatus.HasValue ?
                new ObjectParameter("approvestatus", approvestatus) :
                new ObjectParameter("approvestatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspApproveStudentEnrollment", applicationidParameter, approvestatusParameter);
        }
    
        public virtual int uspApproveStudentEnrollment_TMP(Nullable<int> applicationid, Nullable<int> approvestatus)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var approvestatusParameter = approvestatus.HasValue ?
                new ObjectParameter("approvestatus", approvestatus) :
                new ObjectParameter("approvestatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspApproveStudentEnrollment_TMP", applicationidParameter, approvestatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignAssignmentsToStudent(string assignmentIDs, Nullable<int> studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var assignmentIDsParameter = assignmentIDs != null ?
                new ObjectParameter("AssignmentIDs", assignmentIDs) :
                new ObjectParameter("AssignmentIDs", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignAssignmentsToStudent", assignmentIDsParameter, studentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignAssignmentsToStudents(string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignAssignmentsToStudents", valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignCounselorToStudents(string valuesArray, Nullable<int> counselorID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignCounselorToStudents", valuesArrayParameter, counselorIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspAssignCourseSectionsToStudent(string valuesArray, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAssignCourseSectionsToStudent", valuesArrayParameter, schoolIdParameter, schoolYearIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignHomeroomORCounselorToStudents(string valuesArray, Nullable<int> homeroomID, Nullable<int> counselorID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var homeroomIDParameter = homeroomID.HasValue ?
                new ObjectParameter("HomeroomID", homeroomID) :
                new ObjectParameter("HomeroomID", typeof(int));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignHomeroomORCounselorToStudents", valuesArrayParameter, homeroomIDParameter, counselorIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspAssignmentDetailsGetByClassAssignmentId(Nullable<int> classAssignmentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAssignmentDetailsGetByClassAssignmentId", classAssignmentIdParameter);
        }
    
        public virtual int uspAssignmentsGetByStudentIdForGradeBook(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAssignmentsGetByStudentIdForGradeBook", studentIdParameter);
        }
    
        public virtual int uspAssignmentTopicsGetByStandardId(Nullable<int> standardId)
        {
            var standardIdParameter = standardId.HasValue ?
                new ObjectParameter("StandardId", standardId) :
                new ObjectParameter("StandardId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAssignmentTopicsGetByStandardId", standardIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignStaffFromSchoolDetails(Nullable<int> schoolid, Nullable<int> districtid, string staffids, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var staffidsParameter = staffids != null ?
                new ObjectParameter("staffids", staffids) :
                new ObjectParameter("staffids", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignStaffFromSchoolDetails", schoolidParameter, districtidParameter, staffidsParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspAssignStudentsToAssigment(string studentIDs, Nullable<int> assignmentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDsParameter = studentIDs != null ?
                new ObjectParameter("StudentIDs", studentIDs) :
                new ObjectParameter("StudentIDs", typeof(string));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAssignStudentsToAssigment", studentIDsParameter, assignmentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspAttendanceReasonValuesGetFromPicklist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAttendanceReasonValuesGetFromPicklist");
        }
    
        public virtual int uspAttendanceSettingsSetup(string pickListCodeName, string name, Nullable<int> sortOrder, string defaultValue)
        {
            var pickListCodeNameParameter = pickListCodeName != null ?
                new ObjectParameter("PickListCodeName", pickListCodeName) :
                new ObjectParameter("PickListCodeName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAttendanceSettingsSetup", pickListCodeNameParameter, nameParameter, sortOrderParameter, defaultValueParameter);
        }
    
        public virtual ObjectResult<uspAttendanceTypeValuesGetFromAttendanceSettings_Result> uspAttendanceTypeValuesGetFromAttendanceSettings(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAttendanceTypeValuesGetFromAttendanceSettings_Result>("uspAttendanceTypeValuesGetFromAttendanceSettings", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspAttendanceValuesGetFromAttendanceSettings_Result> uspAttendanceValuesGetFromAttendanceSettings(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAttendanceValuesGetFromAttendanceSettings_Result>("uspAttendanceValuesGetFromAttendanceSettings", schoolIdParameter);
        }
    
        public virtual int uspAvailableStandardsGetForNewAssignment(Nullable<int> standardId, Nullable<int> classAssignmentId, Nullable<int> schoolId)
        {
            var standardIdParameter = standardId.HasValue ?
                new ObjectParameter("StandardId", standardId) :
                new ObjectParameter("StandardId", typeof(int));
    
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAvailableStandardsGetForNewAssignment", standardIdParameter, classAssignmentIdParameter, schoolIdParameter);
        }
    
        public virtual int uspCalculateEnrolledStudentsCountOfASection(string schoolCourseSectionIds)
        {
            var schoolCourseSectionIdsParameter = schoolCourseSectionIds != null ?
                new ObjectParameter("SchoolCourseSectionIds", schoolCourseSectionIds) :
                new ObjectParameter("SchoolCourseSectionIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCalculateEnrolledStudentsCountOfASection", schoolCourseSectionIdsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCalculateSchoolAttendancePatternTotalDaysHours(Nullable<int> schoolAttendancePatternID, Nullable<int> schoolID, Nullable<decimal> hoursPerDay)
        {
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var hoursPerDayParameter = hoursPerDay.HasValue ?
                new ObjectParameter("HoursPerDay", hoursPerDay) :
                new ObjectParameter("HoursPerDay", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCalculateSchoolAttendancePatternTotalDaysHours", schoolAttendancePatternIDParameter, schoolIDParameter, hoursPerDayParameter);
        }
    
        public virtual int uspCalculateStudentsCountOfASection(Nullable<int> schoolID, string schoolCourseNumber, string schoolCourseSectionNumber, Nullable<int> schoolYearPL, ObjectParameter finalResult)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var schoolCourseSectionNumberParameter = schoolCourseSectionNumber != null ?
                new ObjectParameter("SchoolCourseSectionNumber", schoolCourseSectionNumber) :
                new ObjectParameter("SchoolCourseSectionNumber", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCalculateStudentsCountOfASection", schoolIDParameter, schoolCourseNumberParameter, schoolCourseSectionNumberParameter, schoolYearPLParameter, finalResult);
        }
    
        public virtual ObjectResult<Nullable<int>> uspChangePassword(string email, string oldpassword, string newpassword)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var oldpasswordParameter = oldpassword != null ?
                new ObjectParameter("oldpassword", oldpassword) :
                new ObjectParameter("oldpassword", typeof(string));
    
            var newpasswordParameter = newpassword != null ?
                new ObjectParameter("newpassword", newpassword) :
                new ObjectParameter("newpassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspChangePassword", emailParameter, oldpasswordParameter, newpasswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspChangePortalUserPassword(string userName, string email, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspChangePortalUserPassword", userNameParameter, emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckApprovalStatus(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckApprovalStatus", applicationidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckAttendanceCount(Nullable<int> studentID, Nullable<System.DateTime> withdrawalDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var withdrawalDateParameter = withdrawalDate.HasValue ?
                new ObjectParameter("WithdrawalDate", withdrawalDate) :
                new ObjectParameter("WithdrawalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckAttendanceCount", studentIDParameter, withdrawalDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckContactPriority(Nullable<int> studentApplicationID)
        {
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckContactPriority", studentApplicationIDParameter);
        }
    
        public virtual int uspCheckDistrictByPersonStudentID(string typePS, string personStudentID, Nullable<int> personID)
        {
            var typePSParameter = typePS != null ?
                new ObjectParameter("TypePS", typePS) :
                new ObjectParameter("TypePS", typeof(string));
    
            var personStudentIDParameter = personStudentID != null ?
                new ObjectParameter("PersonStudentID", personStudentID) :
                new ObjectParameter("PersonStudentID", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckDistrictByPersonStudentID", typePSParameter, personStudentIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<uspCheckDuplicates_Result> uspCheckDuplicates(Nullable<int> studentapplicationid)
        {
            var studentapplicationidParameter = studentapplicationid.HasValue ?
                new ObjectParameter("studentapplicationid", studentapplicationid) :
                new ObjectParameter("studentapplicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckDuplicates_Result>("uspCheckDuplicates", studentapplicationidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckDuplucatesCount(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckDuplucatesCount", applicationidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckForStudentPreviousSchool(Nullable<int> studentApplicationID, Nullable<int> studentID)
        {
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckForStudentPreviousSchool", studentApplicationIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspCheckOrientation(Nullable<int> schoolid, Nullable<int> applicationid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspCheckOrientation", schoolidParameter, applicationidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> uspCheckOrientation_TMP(Nullable<int> schoolid, Nullable<int> applicationid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("uspCheckOrientation_TMP", schoolidParameter, applicationidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckOrientationStatusForSchool(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckOrientationStatusForSchool", schoolidParameter);
        }
    
        public virtual ObjectResult<uspCheckPortalAccountLogin_Result> uspCheckPortalAccountLogin(string userName, string password, Nullable<System.DateTime> currentDate)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckPortalAccountLogin_Result>("uspCheckPortalAccountLogin", userNameParameter, passwordParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckPortalUserEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckPortalUserEmail", emailParameter);
        }
    
        public virtual ObjectResult<uspCheckPortalUserName_Result> uspCheckPortalUserName(string userName, string email)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckPortalUserName_Result>("uspCheckPortalUserName", userNameParameter, emailParameter);
        }
    
        public virtual int uspCheckPriorStudentByPersonStudentID(string typePS, string personStudentID, Nullable<int> personID)
        {
            var typePSParameter = typePS != null ?
                new ObjectParameter("TypePS", typePS) :
                new ObjectParameter("TypePS", typeof(string));
    
            var personStudentIDParameter = personStudentID != null ?
                new ObjectParameter("PersonStudentID", personStudentID) :
                new ObjectParameter("PersonStudentID", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCheckPriorStudentByPersonStudentID", typePSParameter, personStudentIDParameter, personIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckRegistrationNumberValid(string registrationnumber, Nullable<System.DateTime> dob)
        {
            var registrationnumberParameter = registrationnumber != null ?
                new ObjectParameter("registrationnumber", registrationnumber) :
                new ObjectParameter("registrationnumber", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckRegistrationNumberValid", registrationnumberParameter, dobParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckSchoolYearIsDefault(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckSchoolYearIsDefault", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspCheckStudentLogin_Result> uspCheckStudentLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCheckStudentLogin_Result>("uspCheckStudentLogin", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> uspCheckStudentNextYearFileData(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCheckStudentNextYearFileData", schoolIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckStudentOrientation(Nullable<int> studentid, Nullable<int> applicationid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckStudentOrientation", studentidParameter, applicationidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<string> uspCheckTransferCount(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspCheckTransferCount", studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCheckUserName(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCheckUserName", usernameParameter);
        }
    
        public virtual int uspClassAssignmentGetByTeacherId(Nullable<int> classid)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("Classid", classid) :
                new ObjectParameter("Classid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassAssignmentGetByTeacherId", classidParameter);
        }
    
        public virtual int uspClassCategoriesGetForAssignmentByClassId(Nullable<int> classId, Nullable<int> gradePeriodId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("gradePeriodId", gradePeriodId) :
                new ObjectParameter("gradePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassCategoriesGetForAssignmentByClassId", classIdParameter, gradePeriodIdParameter);
        }
    
        public virtual int uspClassCategoriesNamesByClassID(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassCategoriesNamesByClassID", classIdParameter);
        }
    
        public virtual int uspClassCategoryDetailsGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassCategoryDetailsGetByClassId", classIdParameter);
        }
    
        public virtual int uspClassCategoryGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassCategoryGetByClassId", classIdParameter);
        }
    
        public virtual int uspClassCategoryGradePeriodByClassIDCatgName(Nullable<int> classId, string catgname, string gradePeriodIds)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("classId", classId) :
                new ObjectParameter("classId", typeof(int));
    
            var catgnameParameter = catgname != null ?
                new ObjectParameter("catgname", catgname) :
                new ObjectParameter("catgname", typeof(string));
    
            var gradePeriodIdsParameter = gradePeriodIds != null ?
                new ObjectParameter("GradePeriodIds", gradePeriodIds) :
                new ObjectParameter("GradePeriodIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassCategoryGradePeriodByClassIDCatgName", classIdParameter, catgnameParameter, gradePeriodIdsParameter);
        }
    
        public virtual int uspClassDetailsGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassDetailsGetByClassId", classIdParameter);
        }
    
        public virtual int uspClassGradePeriodsGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassGradePeriodsGetByClassId", classIdParameter);
        }
    
        public virtual int uspClassGradePeriodsWeightSumGetByClassId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassGradePeriodsWeightSumGetByClassId", classIdParameter);
        }
    
        public virtual int uspClassOfSchoolGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassOfSchoolGet");
        }
    
        public virtual int uspClassStudentsAttendanceGet(string classIds, string attendanceDates, Nullable<int> attendanceTakenBy, string calendarYear)
        {
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var attendanceDatesParameter = attendanceDates != null ?
                new ObjectParameter("AttendanceDates", attendanceDates) :
                new ObjectParameter("AttendanceDates", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassStudentsAttendanceGet", classIdsParameter, attendanceDatesParameter, attendanceTakenByParameter, calendarYearParameter);
        }
    
        public virtual int uspClassStudentsGetByAssignmentId(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassStudentsGetByAssignmentId", classIdParameter);
        }
    
        public virtual ObjectResult<uspClassStudentsGetForAttendance_Result> uspClassStudentsGetForAttendance(Nullable<int> schoolCourseSectionID, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, string calendarYear, string attendanceType)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var attendanceTypeParameter = attendanceType != null ?
                new ObjectParameter("AttendanceType", attendanceType) :
                new ObjectParameter("AttendanceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClassStudentsGetForAttendance_Result>("uspClassStudentsGetForAttendance", schoolCourseSectionIDParameter, attendanceDateParameter, attendanceTakenByParameter, calendarYearParameter, attendanceTypeParameter);
        }
    
        public virtual int uspClassStudentsGetForDayAttendance(string classIds, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, string calendarYear)
        {
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassStudentsGetForDayAttendance", classIdsParameter, attendanceDateParameter, attendanceTakenByParameter, calendarYearParameter);
        }
    
        public virtual int uspClassStudentsGetForPeriodAttendance(Nullable<int> classId, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, string calendarYear)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassStudentsGetForPeriodAttendance", classIdParameter, attendanceDateParameter, attendanceTakenByParameter, calendarYearParameter);
        }
    
        public virtual int uspClassStudentsGetForWeekAttendance(string classIds, string attendanceDates, Nullable<int> attendanceTakenBy, string calendarYear, Nullable<System.DateTime> attendanceDate)
        {
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var attendanceDatesParameter = attendanceDates != null ?
                new ObjectParameter("AttendanceDates", attendanceDates) :
                new ObjectParameter("AttendanceDates", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClassStudentsGetForWeekAttendance", classIdsParameter, attendanceDatesParameter, attendanceTakenByParameter, calendarYearParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<string> uspConfigVariableValueByConfigDescp(string configDescp)
        {
            var configDescpParameter = configDescp != null ?
                new ObjectParameter("ConfigDescp", configDescp) :
                new ObjectParameter("ConfigDescp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspConfigVariableValueByConfigDescp", configDescpParameter);
        }
    
        public virtual int uspControlsListOptionsGet(string controlName, string controlTypeID)
        {
            var controlNameParameter = controlName != null ?
                new ObjectParameter("controlName", controlName) :
                new ObjectParameter("controlName", typeof(string));
    
            var controlTypeIDParameter = controlTypeID != null ?
                new ObjectParameter("controlTypeID", controlTypeID) :
                new ObjectParameter("controlTypeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspControlsListOptionsGet", controlNameParameter, controlTypeIDParameter);
        }
    
        public virtual int uspCopyDistrictCoursesToBuildings(string districtCourseSequenceIds, string buildingIds, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseSequenceIdsParameter = districtCourseSequenceIds != null ?
                new ObjectParameter("DistrictCourseSequenceIds", districtCourseSequenceIds) :
                new ObjectParameter("DistrictCourseSequenceIds", typeof(string));
    
            var buildingIdsParameter = buildingIds != null ?
                new ObjectParameter("BuildingIds", buildingIds) :
                new ObjectParameter("BuildingIds", typeof(string));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCopyDistrictCoursesToBuildings", districtCourseSequenceIdsParameter, buildingIdsParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCopyDistrictCourseToBuilding(Nullable<int> districtCourseSequenceId, Nullable<int> buildingId)
        {
            var districtCourseSequenceIdParameter = districtCourseSequenceId.HasValue ?
                new ObjectParameter("DistrictCourseSequenceId", districtCourseSequenceId) :
                new ObjectParameter("DistrictCourseSequenceId", typeof(int));
    
            var buildingIdParameter = buildingId.HasValue ?
                new ObjectParameter("BuildingId", buildingId) :
                new ObjectParameter("BuildingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCopyDistrictCourseToBuilding", districtCourseSequenceIdParameter, buildingIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspCopyDistrictPortalItemstoschools(Nullable<int> districtId, string schoolIds, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdsParameter = schoolIds != null ?
                new ObjectParameter("SchoolIds", schoolIds) :
                new ObjectParameter("SchoolIds", typeof(string));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspCopyDistrictPortalItemstoschools", districtIdParameter, schoolIdsParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspCoursesGetBySubjectId(Nullable<int> subjectId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCoursesGetBySubjectId", subjectIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteAssignment(Nullable<int> assignmentID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteAssignment", assignmentIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteAttendance(Nullable<int> studentID, Nullable<System.DateTime> withdrawalDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var withdrawalDateParameter = withdrawalDate.HasValue ?
                new ObjectParameter("WithdrawalDate", withdrawalDate) :
                new ObjectParameter("WithdrawalDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteAttendance", studentIDParameter, withdrawalDateParameter);
        }
    
        public virtual int uspDeleteAttendancePattern(Nullable<int> patternId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("PatternId", patternId) :
                new ObjectParameter("PatternId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteAttendancePattern", patternIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteBellSchedule(Nullable<int> bellScheduleID, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var bellScheduleIDParameter = bellScheduleID.HasValue ?
                new ObjectParameter("BellScheduleID", bellScheduleID) :
                new ObjectParameter("BellScheduleID", typeof(int));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteBellSchedule", bellScheduleIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteBuilingDetails(Nullable<int> buildingid)
        {
            var buildingidParameter = buildingid.HasValue ?
                new ObjectParameter("buildingid", buildingid) :
                new ObjectParameter("buildingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteBuilingDetails", buildingidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteBulletin(Nullable<int> bulletinID, Nullable<int> modifiedby)
        {
            var bulletinIDParameter = bulletinID.HasValue ?
                new ObjectParameter("BulletinID", bulletinID) :
                new ObjectParameter("BulletinID", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteBulletin", bulletinIDParameter, modifiedbyParameter);
        }
    
        public virtual int uspDeleteClass(Nullable<int> classId)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteClass", classIdParameter);
        }
    
        public virtual int uspDeleteClassAssignment(Nullable<int> classAssignmentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteClassAssignment", classAssignmentIdParameter);
        }
    
        public virtual int uspDeleteClassAssignmentTopic(Nullable<int> classAssignmentId, Nullable<int> topicId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteClassAssignmentTopic", classAssignmentIdParameter, topicIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDataHistoryElement(Nullable<int> datahistoryid)
        {
            var datahistoryidParameter = datahistoryid.HasValue ?
                new ObjectParameter("datahistoryid", datahistoryid) :
                new ObjectParameter("datahistoryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDataHistoryElement", datahistoryidParameter);
        }
    
        public virtual int uspDeleteDemographics(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDemographics", idParameter);
        }
    
        public virtual int uspDeleteDepartment(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDepartment", departmentIdParameter);
        }
    
        public virtual int uspDeleteDisciplineIncident(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDisciplineIncident", disciplineincidentidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrict(Nullable<int> districtid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrict", districtidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspDeleteDistrictArea(Nullable<int> districtAreaId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAreaIdParameter = districtAreaId.HasValue ?
                new ObjectParameter("DistrictAreaId", districtAreaId) :
                new ObjectParameter("DistrictAreaId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDistrictArea", districtAreaIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictAttendancePattern(Nullable<int> patternId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("PatternId", patternId) :
                new ObjectParameter("PatternId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictAttendancePattern", patternIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteDistrictAttendancePatternEvent(Nullable<int> districtAttendancePatternEventID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAttendancePatternEventIDParameter = districtAttendancePatternEventID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternEventID", districtAttendancePatternEventID) :
                new ObjectParameter("DistrictAttendancePatternEventID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDistrictAttendancePatternEvent", districtAttendancePatternEventIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictCourse(Nullable<int> districtCourseID, Nullable<int> modfiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtCourseIDParameter = districtCourseID.HasValue ?
                new ObjectParameter("DistrictCourseID", districtCourseID) :
                new ObjectParameter("DistrictCourseID", typeof(int));
    
            var modfiedByParameter = modfiedBy.HasValue ?
                new ObjectParameter("modfiedBy", modfiedBy) :
                new ObjectParameter("modfiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictCourse", districtCourseIDParameter, modfiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictGPA(string districtGPASetupIDs, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGPASetupIDsParameter = districtGPASetupIDs != null ?
                new ObjectParameter("DistrictGPASetupIDs", districtGPASetupIDs) :
                new ObjectParameter("DistrictGPASetupIDs", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictGPA", districtGPASetupIDsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictGradeScale(Nullable<int> districtGradeScaleID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGradeScaleIDParameter = districtGradeScaleID.HasValue ?
                new ObjectParameter("DistrictGradeScaleID", districtGradeScaleID) :
                new ObjectParameter("DistrictGradeScaleID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictGradeScale", districtGradeScaleIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteDistrictRegion(Nullable<int> districtRegionId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtRegionIdParameter = districtRegionId.HasValue ?
                new ObjectParameter("DistrictRegionId", districtRegionId) :
                new ObjectParameter("DistrictRegionId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteDistrictRegion", districtRegionIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictReportingPeriod(Nullable<int> districtReportingPeriodID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtReportingPeriodIDParameter = districtReportingPeriodID.HasValue ?
                new ObjectParameter("DistrictReportingPeriodID", districtReportingPeriodID) :
                new ObjectParameter("DistrictReportingPeriodID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictReportingPeriod", districtReportingPeriodIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDistrictSchoolYearByDistrictSchoolYearID(Nullable<int> districtSchoolYearID, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var districtSchoolYearIDParameter = districtSchoolYearID.HasValue ?
                new ObjectParameter("DistrictSchoolYearID", districtSchoolYearID) :
                new ObjectParameter("DistrictSchoolYearID", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDistrictSchoolYearByDistrictSchoolYearID", districtSchoolYearIDParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteDynamicDistrictAddress(Nullable<int> districtID, Nullable<int> addressID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteDynamicDistrictAddress", districtIDParameter, addressIDParameter);
        }
    
        public virtual int uspDeleteGPADefinition(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteGPADefinition", idParameter);
        }
    
        public virtual int uspDeleteGradeMethods(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteGradeMethods", idParameter);
        }
    
        public virtual int uspDeleteGradeScaleDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteGradeScaleDetails", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteGradReqSubject(Nullable<int> gradReqDetailID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var gradReqDetailIDParameter = gradReqDetailID.HasValue ?
                new ObjectParameter("GradReqDetailID", gradReqDetailID) :
                new ObjectParameter("GradReqDetailID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteGradReqSubject", gradReqDetailIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteGradRequirement(Nullable<int> gradReqID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteGradRequirement", gradReqIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteOffender(Nullable<int> offenderid)
        {
            var offenderidParameter = offenderid.HasValue ?
                new ObjectParameter("offenderid", offenderid) :
                new ObjectParameter("offenderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteOffender", offenderidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeletePeriodDetails(Nullable<int> periodID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeletePeriodDetails", periodIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeletePublicSchoolDistricts(Nullable<int> districtId, Nullable<int> schoolID)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeletePublicSchoolDistricts", districtIdParameter, schoolIDParameter);
        }
    
        public virtual int uspDeleteReporter(Nullable<int> reporterid)
        {
            var reporteridParameter = reporterid.HasValue ?
                new ObjectParameter("reporterid", reporterid) :
                new ObjectParameter("reporterid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteReporter", reporteridParameter);
        }
    
        public virtual int uspDeleteReportPeriodByReportID(Nullable<int> reportID, Nullable<long> schoolIRN)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("SchoolIRN", schoolIRN) :
                new ObjectParameter("SchoolIRN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteReportPeriodByReportID", reportIDParameter, schoolIRNParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteReportPeriodDetailsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteReportPeriodDetailsByID", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteReportPeriodDetailsByIdDistrict(Nullable<int> id, Nullable<int> districtid)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteReportPeriodDetailsByIdDistrict", idParameter, districtidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteRoom(Nullable<int> roomid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteRoom", roomidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchool(Nullable<int> schoolid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchool", schoolidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolAttendancePattern(Nullable<int> patternId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("PatternId", patternId) :
                new ObjectParameter("PatternId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolAttendancePattern", patternIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteSchoolAttendancePatternEvent(Nullable<int> schoolAttendancePatternEventID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolAttendancePatternEventIDParameter = schoolAttendancePatternEventID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternEventID", schoolAttendancePatternEventID) :
                new ObjectParameter("SchoolAttendancePatternEventID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSchoolAttendancePatternEvent", schoolAttendancePatternEventIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolCourse(Nullable<int> schoolCourseID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolCourse", schoolCourseIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolCourseSection(Nullable<int> sectionId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolCourseSection", sectionIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolDay(string schoolDayIDs, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolDayIDsParameter = schoolDayIDs != null ?
                new ObjectParameter("SchoolDayIDs", schoolDayIDs) :
                new ObjectParameter("SchoolDayIDs", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolDay", schoolDayIDsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteSchoolDepartment(Nullable<int> departmentid, Nullable<int> schoolid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSchoolDepartment", departmentidParameter, schoolidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolEvents(Nullable<int> eventId, Nullable<int> modifiedby)
        {
            var eventIdParameter = eventId.HasValue ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolEvents", eventIdParameter, modifiedbyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolGPA(string schoolGPASetupIDs, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolGPASetupIDsParameter = schoolGPASetupIDs != null ?
                new ObjectParameter("SchoolGPASetupIDs", schoolGPASetupIDs) :
                new ObjectParameter("SchoolGPASetupIDs", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolGPA", schoolGPASetupIDsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolGradeLevel(string schoolDayGradeLevelIDs, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolDayGradeLevelIDsParameter = schoolDayGradeLevelIDs != null ?
                new ObjectParameter("SchoolDayGradeLevelIDs", schoolDayGradeLevelIDs) :
                new ObjectParameter("SchoolDayGradeLevelIDs", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolGradeLevel", schoolDayGradeLevelIDsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolGradeScale(Nullable<int> schoolGradeScaleID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolGradeScaleIDParameter = schoolGradeScaleID.HasValue ?
                new ObjectParameter("SchoolGradeScaleID", schoolGradeScaleID) :
                new ObjectParameter("SchoolGradeScaleID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolGradeScale", schoolGradeScaleIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteSchoolInfo(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSchoolInfo", schoolIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolReportingPeriod(Nullable<int> schoolReportingPeriodID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolReportingPeriodIDParameter = schoolReportingPeriodID.HasValue ?
                new ObjectParameter("SchoolReportingPeriodID", schoolReportingPeriodID) :
                new ObjectParameter("SchoolReportingPeriodID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolReportingPeriod", schoolReportingPeriodIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteSchoolYear(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteSchoolYear", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteSchoolYearBySchoolYearID(Nullable<int> schoolyearid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteSchoolYearBySchoolYearID", schoolyearidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStaffDetails(Nullable<int> staffid, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStaffDetails", staffidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudent", studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentAddressHistory(Nullable<int> studentid, Nullable<int> addressid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var addressidParameter = addressid.HasValue ?
                new ObjectParameter("addressid", addressid) :
                new ObjectParameter("addressid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentAddressHistory", studentidParameter, addressidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentAlternateInfo(Nullable<int> studentID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentAlternateInfo", studentIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDeleteStudentApplicationsService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteStudentApplicationsService");
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentAssessment(Nullable<int> assessmentPL, Nullable<int> districtId, Nullable<int> schoolId, Nullable<int> studentID, Nullable<System.DateTime> assessmentDate, Nullable<int> deletedBy, Nullable<System.DateTime> deletedDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var deletedByParameter = deletedBy.HasValue ?
                new ObjectParameter("DeletedBy", deletedBy) :
                new ObjectParameter("DeletedBy", typeof(int));
    
            var deletedDateParameter = deletedDate.HasValue ?
                new ObjectParameter("DeletedDate", deletedDate) :
                new ObjectParameter("DeletedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentAssessment", assessmentPLParameter, districtIdParameter, schoolIdParameter, studentIDParameter, assessmentDateParameter, deletedByParameter, deletedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentAssessmentAccommodations(Nullable<int> assessmentPL, Nullable<int> studentID, Nullable<System.DateTime> iEPDate, Nullable<int> accomPL, Nullable<System.DateTime> deletedDae, Nullable<int> deletedby)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var accomPLParameter = accomPL.HasValue ?
                new ObjectParameter("AccomPL", accomPL) :
                new ObjectParameter("AccomPL", typeof(int));
    
            var deletedDaeParameter = deletedDae.HasValue ?
                new ObjectParameter("DeletedDae", deletedDae) :
                new ObjectParameter("DeletedDae", typeof(System.DateTime));
    
            var deletedbyParameter = deletedby.HasValue ?
                new ObjectParameter("Deletedby", deletedby) :
                new ObjectParameter("Deletedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentAssessmentAccommodations", assessmentPLParameter, studentIDParameter, iEPDateParameter, accomPLParameter, deletedDaeParameter, deletedbyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentContact(Nullable<int> studentID, Nullable<int> studentContactID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentContact", studentIDParameter, studentContactIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentContactHistory(Nullable<int> studentContactID, Nullable<int> addressID)
        {
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentContactHistory", studentContactIDParameter, addressIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentDiscipline(Nullable<int> studentDisciplineID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentDisciplineIDParameter = studentDisciplineID.HasValue ?
                new ObjectParameter("StudentDisciplineID", studentDisciplineID) :
                new ObjectParameter("StudentDisciplineID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentDiscipline", studentDisciplineIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentDynamicContact(Nullable<int> studentContactID)
        {
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentDynamicContact", studentContactIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentEnrollments(Nullable<int> enrollmentID, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentEnrollments", enrollmentIDParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentETRInformation(Nullable<int> studentETRId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentETRIdParameter = studentETRId.HasValue ?
                new ObjectParameter("StudentETRId", studentETRId) :
                new ObjectParameter("StudentETRId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentETRInformation", studentETRIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentExcessiveHabitualAbsDetails(Nullable<int> sEHAID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var sEHAIDParameter = sEHAID.HasValue ?
                new ObjectParameter("SEHAID", sEHAID) :
                new ObjectParameter("SEHAID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentExcessiveHabitualAbsDetails", sEHAIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentGrade(Nullable<int> studentID, string courseNumber, string sectionNumber, Nullable<int> studentGradeID, string schoolName, string schoolYear, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var studentGradeIDParameter = studentGradeID.HasValue ?
                new ObjectParameter("StudentGradeID", studentGradeID) :
                new ObjectParameter("StudentGradeID", typeof(int));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentGrade", studentIDParameter, courseNumberParameter, sectionNumberParameter, studentGradeIDParameter, schoolNameParameter, schoolYearParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentHistoricalGrade(Nullable<int> studentGradeID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentGradeIDParameter = studentGradeID.HasValue ?
                new ObjectParameter("StudentGradeID", studentGradeID) :
                new ObjectParameter("StudentGradeID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentHistoricalGrade", studentGradeIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentHomeroomAttendanceForMultipleDays(Nullable<int> studentID, Nullable<int> schoolYearID, string attendanceDates, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var attendanceDatesParameter = attendanceDates != null ?
                new ObjectParameter("AttendanceDates", attendanceDates) :
                new ObjectParameter("AttendanceDates", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentHomeroomAttendanceForMultipleDays", studentIDParameter, schoolYearIDParameter, attendanceDatesParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentIEPInformation(Nullable<int> studentIEPID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIEPIDParameter = studentIEPID.HasValue ?
                new ObjectParameter("StudentIEPID", studentIEPID) :
                new ObjectParameter("StudentIEPID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentIEPInformation", studentIEPIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentNextYearFileDataWithdrawaledStudents(Nullable<int> schoolID, Nullable<System.DateTime> mostRescentDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var mostRescentDateParameter = mostRescentDate.HasValue ?
                new ObjectParameter("MostRescentDate", mostRescentDate) :
                new ObjectParameter("MostRescentDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentNextYearFileDataWithdrawaledStudents", schoolIDParameter, mostRescentDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspDeleteStudentNote(Nullable<int> studentNoteId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentNoteIdParameter = studentNoteId.HasValue ?
                new ObjectParameter("StudentNoteId", studentNoteId) :
                new ObjectParameter("StudentNoteId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteStudentNote", studentNoteIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentsAccommodationInformation(Nullable<int> studentId, Nullable<int> accommodationType)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var accommodationTypeParameter = accommodationType.HasValue ?
                new ObjectParameter("AccommodationType", accommodationType) :
                new ObjectParameter("AccommodationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentsAccommodationInformation", studentIdParameter, accommodationTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentsProgramInformation(Nullable<int> studentProgramID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentProgramIDParameter = studentProgramID.HasValue ?
                new ObjectParameter("studentProgramID", studentProgramID) :
                new ObjectParameter("studentProgramID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentsProgramInformation", studentProgramIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentTimeRecords(string studentTimeIds)
        {
            var studentTimeIdsParameter = studentTimeIds != null ?
                new ObjectParameter("StudentTimeIds", studentTimeIds) :
                new ObjectParameter("StudentTimeIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentTimeRecords", studentTimeIdsParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteStudentWithdrawls(Nullable<int> withdrawlID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var withdrawlIDParameter = withdrawlID.HasValue ?
                new ObjectParameter("WithdrawlID", withdrawlID) :
                new ObjectParameter("WithdrawlID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteStudentWithdrawls", withdrawlIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspDeleteUserFromStaff(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteUserFromStaff", userIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDeleteUserRole(Nullable<short> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDeleteUserRole", roleIDParameter);
        }
    
        public virtual int uspDeleteVictim(Nullable<int> victimid)
        {
            var victimidParameter = victimid.HasValue ?
                new ObjectParameter("victimid", victimid) :
                new ObjectParameter("victimid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteVictim", victimidParameter);
        }
    
        public virtual int uspDepartmentsGet(string districtID, string schoolID)
        {
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDepartmentsGet", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictAssessmentDelete(Nullable<int> assessmentID, Nullable<int> modifiedBy)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictAssessmentDelete", assessmentIDParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<uspDistrictAssessmentGet_Result> uspDistrictAssessmentGet(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictAssessmentGet_Result>("uspDistrictAssessmentGet", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictAssessmentInsert(string assessmentName, Nullable<int> gradeLevelAssessed, Nullable<int> localAssessmentNumber, Nullable<int> numberTested, Nullable<int> numberWithDisability, Nullable<bool> wereAdministered, Nullable<int> numberofTestsAdministered, Nullable<bool> wereAlternateAssessmmentsOffered, Nullable<int> numberOfAlternativeAssessmentsOffered, Nullable<int> createdBy, Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var assessmentNameParameter = assessmentName != null ?
                new ObjectParameter("AssessmentName", assessmentName) :
                new ObjectParameter("AssessmentName", typeof(string));
    
            var gradeLevelAssessedParameter = gradeLevelAssessed.HasValue ?
                new ObjectParameter("GradeLevelAssessed", gradeLevelAssessed) :
                new ObjectParameter("GradeLevelAssessed", typeof(int));
    
            var localAssessmentNumberParameter = localAssessmentNumber.HasValue ?
                new ObjectParameter("LocalAssessmentNumber", localAssessmentNumber) :
                new ObjectParameter("LocalAssessmentNumber", typeof(int));
    
            var numberTestedParameter = numberTested.HasValue ?
                new ObjectParameter("NumberTested", numberTested) :
                new ObjectParameter("NumberTested", typeof(int));
    
            var numberWithDisabilityParameter = numberWithDisability.HasValue ?
                new ObjectParameter("NumberWithDisability", numberWithDisability) :
                new ObjectParameter("NumberWithDisability", typeof(int));
    
            var wereAdministeredParameter = wereAdministered.HasValue ?
                new ObjectParameter("WereAdministered", wereAdministered) :
                new ObjectParameter("WereAdministered", typeof(bool));
    
            var numberofTestsAdministeredParameter = numberofTestsAdministered.HasValue ?
                new ObjectParameter("NumberofTestsAdministered", numberofTestsAdministered) :
                new ObjectParameter("NumberofTestsAdministered", typeof(int));
    
            var wereAlternateAssessmmentsOfferedParameter = wereAlternateAssessmmentsOffered.HasValue ?
                new ObjectParameter("WereAlternateAssessmmentsOffered", wereAlternateAssessmmentsOffered) :
                new ObjectParameter("WereAlternateAssessmmentsOffered", typeof(bool));
    
            var numberOfAlternativeAssessmentsOfferedParameter = numberOfAlternativeAssessmentsOffered.HasValue ?
                new ObjectParameter("NumberOfAlternativeAssessmentsOffered", numberOfAlternativeAssessmentsOffered) :
                new ObjectParameter("NumberOfAlternativeAssessmentsOffered", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictAssessmentInsert", assessmentNameParameter, gradeLevelAssessedParameter, localAssessmentNumberParameter, numberTestedParameter, numberWithDisabilityParameter, wereAdministeredParameter, numberofTestsAdministeredParameter, wereAlternateAssessmmentsOfferedParameter, numberOfAlternativeAssessmentsOfferedParameter, createdByParameter, districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictAssessmentUpdate(Nullable<int> assessmentID, string assessmentName, Nullable<int> gradeLevelAssessed, Nullable<int> localAssessmentNumber, Nullable<int> numberTested, Nullable<int> numberWithDisability, Nullable<bool> wereAdministered, Nullable<int> numberofTestsAdministered, Nullable<bool> wereAlternateAssessmentsOffered, Nullable<int> numberOfAlternativeAssessmentsOffered, Nullable<int> modifiedBy, Nullable<int> schoolYearPL)
        {
            var assessmentIDParameter = assessmentID.HasValue ?
                new ObjectParameter("AssessmentID", assessmentID) :
                new ObjectParameter("AssessmentID", typeof(int));
    
            var assessmentNameParameter = assessmentName != null ?
                new ObjectParameter("AssessmentName", assessmentName) :
                new ObjectParameter("AssessmentName", typeof(string));
    
            var gradeLevelAssessedParameter = gradeLevelAssessed.HasValue ?
                new ObjectParameter("GradeLevelAssessed", gradeLevelAssessed) :
                new ObjectParameter("GradeLevelAssessed", typeof(int));
    
            var localAssessmentNumberParameter = localAssessmentNumber.HasValue ?
                new ObjectParameter("LocalAssessmentNumber", localAssessmentNumber) :
                new ObjectParameter("LocalAssessmentNumber", typeof(int));
    
            var numberTestedParameter = numberTested.HasValue ?
                new ObjectParameter("NumberTested", numberTested) :
                new ObjectParameter("NumberTested", typeof(int));
    
            var numberWithDisabilityParameter = numberWithDisability.HasValue ?
                new ObjectParameter("NumberWithDisability", numberWithDisability) :
                new ObjectParameter("NumberWithDisability", typeof(int));
    
            var wereAdministeredParameter = wereAdministered.HasValue ?
                new ObjectParameter("WereAdministered", wereAdministered) :
                new ObjectParameter("WereAdministered", typeof(bool));
    
            var numberofTestsAdministeredParameter = numberofTestsAdministered.HasValue ?
                new ObjectParameter("NumberofTestsAdministered", numberofTestsAdministered) :
                new ObjectParameter("NumberofTestsAdministered", typeof(int));
    
            var wereAlternateAssessmentsOfferedParameter = wereAlternateAssessmentsOffered.HasValue ?
                new ObjectParameter("WereAlternateAssessmentsOffered", wereAlternateAssessmentsOffered) :
                new ObjectParameter("WereAlternateAssessmentsOffered", typeof(bool));
    
            var numberOfAlternativeAssessmentsOfferedParameter = numberOfAlternativeAssessmentsOffered.HasValue ?
                new ObjectParameter("NumberOfAlternativeAssessmentsOffered", numberOfAlternativeAssessmentsOffered) :
                new ObjectParameter("NumberOfAlternativeAssessmentsOffered", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictAssessmentUpdate", assessmentIDParameter, assessmentNameParameter, gradeLevelAssessedParameter, localAssessmentNumberParameter, numberTestedParameter, numberWithDisabilityParameter, wereAdministeredParameter, numberofTestsAdministeredParameter, wereAlternateAssessmentsOfferedParameter, numberOfAlternativeAssessmentsOfferedParameter, modifiedByParameter, schoolYearPLParameter);
        }
    
        public virtual int uspDistrictAttendancePatternEvent(Nullable<int> districtAttendancePatternEventID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAttendancePatternEventIDParameter = districtAttendancePatternEventID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternEventID", districtAttendancePatternEventID) :
                new ObjectParameter("DistrictAttendancePatternEventID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictAttendancePatternEvent", districtAttendancePatternEventIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspDistrictDefaultsGet(string districtID)
        {
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictDefaultsGet", districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictOrganizationalDelete(Nullable<int> districtOrganizationalID, Nullable<int> modifiedBy)
        {
            var districtOrganizationalIDParameter = districtOrganizationalID.HasValue ?
                new ObjectParameter("DistrictOrganizationalID", districtOrganizationalID) :
                new ObjectParameter("DistrictOrganizationalID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictOrganizationalDelete", districtOrganizationalIDParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<uspDistrictOrganizationalGet_Result> uspDistrictOrganizationalGet(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictOrganizationalGet_Result>("uspDistrictOrganizationalGet", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictOrganizationalInsert(Nullable<int> attributeNamePL, Nullable<System.DateTime> attributeDate, string attributeText, string attributeNumber, Nullable<int> createdBy, Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<int> attributeTypePL)
        {
            var attributeNamePLParameter = attributeNamePL.HasValue ?
                new ObjectParameter("AttributeNamePL", attributeNamePL) :
                new ObjectParameter("AttributeNamePL", typeof(int));
    
            var attributeDateParameter = attributeDate.HasValue ?
                new ObjectParameter("AttributeDate", attributeDate) :
                new ObjectParameter("AttributeDate", typeof(System.DateTime));
    
            var attributeTextParameter = attributeText != null ?
                new ObjectParameter("AttributeText", attributeText) :
                new ObjectParameter("AttributeText", typeof(string));
    
            var attributeNumberParameter = attributeNumber != null ?
                new ObjectParameter("AttributeNumber", attributeNumber) :
                new ObjectParameter("AttributeNumber", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var attributeTypePLParameter = attributeTypePL.HasValue ?
                new ObjectParameter("AttributeTypePL", attributeTypePL) :
                new ObjectParameter("AttributeTypePL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictOrganizationalInsert", attributeNamePLParameter, attributeDateParameter, attributeTextParameter, attributeNumberParameter, createdByParameter, districtIDParameter, schoolYearPLParameter, attributeTypePLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspDistrictOrganizationalUpdate(Nullable<int> districtOrganizationalID, Nullable<int> attributeNamePL, Nullable<System.DateTime> attributeDate, string attributeText, string attributeNumber, Nullable<int> modifiedBy, Nullable<int> schoolYearPL, Nullable<int> attributeTypePL)
        {
            var districtOrganizationalIDParameter = districtOrganizationalID.HasValue ?
                new ObjectParameter("DistrictOrganizationalID", districtOrganizationalID) :
                new ObjectParameter("DistrictOrganizationalID", typeof(int));
    
            var attributeNamePLParameter = attributeNamePL.HasValue ?
                new ObjectParameter("AttributeNamePL", attributeNamePL) :
                new ObjectParameter("AttributeNamePL", typeof(int));
    
            var attributeDateParameter = attributeDate.HasValue ?
                new ObjectParameter("AttributeDate", attributeDate) :
                new ObjectParameter("AttributeDate", typeof(System.DateTime));
    
            var attributeTextParameter = attributeText != null ?
                new ObjectParameter("AttributeText", attributeText) :
                new ObjectParameter("AttributeText", typeof(string));
    
            var attributeNumberParameter = attributeNumber != null ?
                new ObjectParameter("AttributeNumber", attributeNumber) :
                new ObjectParameter("AttributeNumber", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var attributeTypePLParameter = attributeTypePL.HasValue ?
                new ObjectParameter("AttributeTypePL", attributeTypePL) :
                new ObjectParameter("AttributeTypePL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspDistrictOrganizationalUpdate", districtOrganizationalIDParameter, attributeNamePLParameter, attributeDateParameter, attributeTextParameter, attributeNumberParameter, modifiedByParameter, schoolYearPLParameter, attributeTypePLParameter);
        }
    
        public virtual ObjectResult<uspDistrictSearch_Result> uspDistrictSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<bool> isAdds, Nullable<bool> isPhone, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var isAddsParameter = isAdds.HasValue ?
                new ObjectParameter("IsAdds", isAdds) :
                new ObjectParameter("IsAdds", typeof(bool));
    
            var isPhoneParameter = isPhone.HasValue ?
                new ObjectParameter("IsPhone", isPhone) :
                new ObjectParameter("IsPhone", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictSearch_Result>("uspDistrictSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, isAddsParameter, isPhoneParameter, personIDParameter);
        }
    
        public virtual int uspDistrictStaffDetailsByStaffIDGet(Nullable<int> districtid, Nullable<int> staffid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictStaffDetailsByStaffIDGet", districtidParameter, staffidParameter);
        }
    
        public virtual int uspDistrictStaffDetailsGet(string districtID)
        {
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictStaffDetailsGet", districtIDParameter);
        }
    
        public virtual int uspDynamicEMISReportGenerator_notUsing(Nullable<int> reportID, Nullable<int> reportPeriodID, Nullable<System.DateTime> year)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var reportPeriodIDParameter = reportPeriodID.HasValue ?
                new ObjectParameter("ReportPeriodID", reportPeriodID) :
                new ObjectParameter("ReportPeriodID", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDynamicEMISReportGenerator_notUsing", reportIDParameter, reportPeriodIDParameter, yearParameter);
        }
    
        public virtual int uspEMISQueryGenerator(Nullable<long> schoolIRN, string report, string reportPeriod, string reportFieldsArray)
        {
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("schoolIRN", schoolIRN) :
                new ObjectParameter("schoolIRN", typeof(long));
    
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(string));
    
            var reportFieldsArrayParameter = reportFieldsArray != null ?
                new ObjectParameter("ReportFieldsArray", reportFieldsArray) :
                new ObjectParameter("ReportFieldsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEMISQueryGenerator", schoolIRNParameter, reportParameter, reportPeriodParameter, reportFieldsArrayParameter);
        }
    
        public virtual int uspEMISQueryGenerator_old(Nullable<long> schoolIRN, string report, string reportPeriod, string reportFieldsArray)
        {
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("schoolIRN", schoolIRN) :
                new ObjectParameter("schoolIRN", typeof(long));
    
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(string));
    
            var reportFieldsArrayParameter = reportFieldsArray != null ?
                new ObjectParameter("ReportFieldsArray", reportFieldsArray) :
                new ObjectParameter("ReportFieldsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEMISQueryGenerator_old", schoolIRNParameter, reportParameter, reportPeriodParameter, reportFieldsArrayParameter);
        }
    
        public virtual int uspEMISQueryGenerator_Test(Nullable<long> schoolIRN, string report, string reportPeriod, string reportFieldsArray)
        {
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("schoolIRN", schoolIRN) :
                new ObjectParameter("schoolIRN", typeof(long));
    
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(string));
    
            var reportFieldsArrayParameter = reportFieldsArray != null ?
                new ObjectParameter("ReportFieldsArray", reportFieldsArray) :
                new ObjectParameter("ReportFieldsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEMISQueryGenerator_Test", schoolIRNParameter, reportParameter, reportPeriodParameter, reportFieldsArrayParameter);
        }
    
        public virtual int uspEMISQueryGenerator_Test2(Nullable<long> schoolIRN, string report, string reportPeriod, string reportFieldsArray)
        {
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("schoolIRN", schoolIRN) :
                new ObjectParameter("schoolIRN", typeof(long));
    
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(string));
    
            var reportFieldsArrayParameter = reportFieldsArray != null ?
                new ObjectParameter("ReportFieldsArray", reportFieldsArray) :
                new ObjectParameter("ReportFieldsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEMISQueryGenerator_Test2", schoolIRNParameter, reportParameter, reportPeriodParameter, reportFieldsArrayParameter);
        }
    
        public virtual ObjectResult<uspEMISResultsByPeriod_Result> uspEMISResultsByPeriod(Nullable<int> districtId, string schools, string reportPeriodId, Nullable<int> studentId, string fields, Nullable<int> personId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var reportPeriodIdParameter = reportPeriodId != null ?
                new ObjectParameter("ReportPeriodId", reportPeriodId) :
                new ObjectParameter("ReportPeriodId", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var fieldsParameter = fields != null ?
                new ObjectParameter("Fields", fields) :
                new ObjectParameter("Fields", typeof(string));
    
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEMISResultsByPeriod_Result>("uspEMISResultsByPeriod", districtIdParameter, schoolsParameter, reportPeriodIdParameter, studentIdParameter, fieldsParameter, personIdParameter);
        }
    
        public virtual ObjectResult<uspEMISSelectStudentsBySchools_Result> uspEMISSelectStudentsBySchools(Nullable<int> districtId, string schools)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEMISSelectStudentsBySchools_Result>("uspEMISSelectStudentsBySchools", districtIdParameter, schoolsParameter);
        }
    
        public virtual int uspGetEMISReportFieldsList(string report)
        {
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetEMISReportFieldsList", reportParameter);
        }
    
        public virtual ObjectResult<uspGetEMISReportPeriodsList_Result> uspGetEMISReportPeriodsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetEMISReportPeriodsList_Result>("uspGetEMISReportPeriodsList");
        }
    
        public virtual int uspGetEMISReportsBySchool(Nullable<long> schoolIRN)
        {
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("SchoolIRN", schoolIRN) :
                new ObjectParameter("SchoolIRN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetEMISReportsBySchool", schoolIRNParameter);
        }
    
        public virtual int uspGetEMISReportsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetEMISReportsList");
        }
    
        public virtual int uspGetReportPeriodFieldCodesByReportID(Nullable<int> reportID, Nullable<long> schoolIRN)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("SchoolIRN", schoolIRN) :
                new ObjectParameter("SchoolIRN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetReportPeriodFieldCodesByReportID", reportIDParameter, schoolIRNParameter);
        }
    
        public virtual ObjectResult<string> uspGetSchoolCalendarPeriodBySchoolYear(Nullable<int> schoolyrid)
        {
            var schoolyridParameter = schoolyrid.HasValue ?
                new ObjectParameter("schoolyrid", schoolyrid) :
                new ObjectParameter("schoolyrid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetSchoolCalendarPeriodBySchoolYear", schoolyridParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetSchoolIDBySchoolName(string schoolName)
        {
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetSchoolIDBySchoolName", schoolNameParameter);
        }
    
        public virtual ObjectResult<uspGetSelectedStudentDetails_Result> uspGetSelectedStudentDetails(Nullable<int> studentId, Nullable<int> portalAccountId, Nullable<System.DateTime> currentDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetSelectedStudentDetails_Result>("uspGetSelectedStudentDetails", studentIdParameter, portalAccountIdParameter, currentDateParameter);
        }
    
        public virtual int uspGetStudentDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetStudentDetails");
        }
    
        public virtual int uspGradeLevelsGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGradeLevelsGetBySchoolId", schoolIdParameter);
        }
    
        public virtual int uspGradeLevelsGetForAttendance(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGradeLevelsGetForAttendance", teacherIdParameter);
        }
    
        public virtual int uspGradeScalesGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGradeScalesGetBySchoolId", schoolIdParameter);
        }
    
        public virtual int uspGradingPeriodsGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGradingPeriodsGetBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAbsenceNotice(Nullable<int> studentID, Nullable<int> absenceReasonPL, Nullable<System.DateTime> absenceDate, string noticeDetail, string documentExtension, string documentSize, string documentType, string documentName, byte[] documentData, Nullable<int> submittedBy, Nullable<System.DateTime> submittedDate, Nullable<int> reviewedBy, Nullable<int> hasAttachment, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var absenceReasonPLParameter = absenceReasonPL.HasValue ?
                new ObjectParameter("AbsenceReasonPL", absenceReasonPL) :
                new ObjectParameter("AbsenceReasonPL", typeof(int));
    
            var absenceDateParameter = absenceDate.HasValue ?
                new ObjectParameter("AbsenceDate", absenceDate) :
                new ObjectParameter("AbsenceDate", typeof(System.DateTime));
    
            var noticeDetailParameter = noticeDetail != null ?
                new ObjectParameter("NoticeDetail", noticeDetail) :
                new ObjectParameter("NoticeDetail", typeof(string));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var submittedDateParameter = submittedDate.HasValue ?
                new ObjectParameter("SubmittedDate", submittedDate) :
                new ObjectParameter("SubmittedDate", typeof(System.DateTime));
    
            var reviewedByParameter = reviewedBy.HasValue ?
                new ObjectParameter("ReviewedBy", reviewedBy) :
                new ObjectParameter("ReviewedBy", typeof(int));
    
            var hasAttachmentParameter = hasAttachment.HasValue ?
                new ObjectParameter("HasAttachment", hasAttachment) :
                new ObjectParameter("HasAttachment", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAbsenceNotice", studentIDParameter, absenceReasonPLParameter, absenceDateParameter, noticeDetailParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, documentDataParameter, submittedByParameter, submittedDateParameter, reviewedByParameter, hasAttachmentParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentAccommodations(Nullable<int> assessmentAreaId, string assessmentAccommodationsArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assessmentAreaIdParameter = assessmentAreaId.HasValue ?
                new ObjectParameter("AssessmentAreaId", assessmentAreaId) :
                new ObjectParameter("AssessmentAreaId", typeof(int));
    
            var assessmentAccommodationsArrayParameter = assessmentAccommodationsArray != null ?
                new ObjectParameter("AssessmentAccommodationsArray", assessmentAccommodationsArray) :
                new ObjectParameter("AssessmentAccommodationsArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentAccommodations", assessmentAreaIdParameter, assessmentAccommodationsArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentAccommodationsDistrict(Nullable<int> assessmentAreaId, string assessmentAccommodationsArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentAreaIdParameter = assessmentAreaId.HasValue ?
                new ObjectParameter("AssessmentAreaId", assessmentAreaId) :
                new ObjectParameter("AssessmentAreaId", typeof(int));
    
            var assessmentAccommodationsArrayParameter = assessmentAccommodationsArray != null ?
                new ObjectParameter("AssessmentAccommodationsArray", assessmentAccommodationsArray) :
                new ObjectParameter("AssessmentAccommodationsArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentAccommodationsDistrict", assessmentAreaIdParameter, assessmentAccommodationsArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentAreas(Nullable<int> assessmentPL, string assessmentAreasArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentAreasArrayParameter = assessmentAreasArray != null ?
                new ObjectParameter("AssessmentAreasArray", assessmentAreasArray) :
                new ObjectParameter("AssessmentAreasArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentAreas", assessmentPLParameter, assessmentAreasArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentAreasDistrict(Nullable<int> assessmentPL, string assessmentAreasArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentAreasArrayParameter = assessmentAreasArray != null ?
                new ObjectParameter("AssessmentAreasArray", assessmentAreasArray) :
                new ObjectParameter("AssessmentAreasArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentAreasDistrict", assessmentPLParameter, assessmentAreasArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentAreasDistrictLevel(Nullable<int> assessmentPL, string assessmentAreasArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentAreasArrayParameter = assessmentAreasArray != null ?
                new ObjectParameter("AssessmentAreasArray", assessmentAreasArray) :
                new ObjectParameter("AssessmentAreasArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentAreasDistrictLevel", assessmentPLParameter, assessmentAreasArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentDiagnosticsDistrict(Nullable<int> assessmentPL, string assessmentDiagnosticArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentDiagnosticArrayParameter = assessmentDiagnosticArray != null ?
                new ObjectParameter("AssessmentDiagnosticArray", assessmentDiagnosticArray) :
                new ObjectParameter("AssessmentDiagnosticArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentDiagnosticsDistrict", assessmentPLParameter, assessmentDiagnosticArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentGradPerformanceDistrict(Nullable<int> assessmentPL, string assessmentDiagnosticArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentDiagnosticArrayParameter = assessmentDiagnosticArray != null ?
                new ObjectParameter("AssessmentDiagnosticArray", assessmentDiagnosticArray) :
                new ObjectParameter("AssessmentDiagnosticArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentGradPerformanceDistrict", assessmentPLParameter, assessmentDiagnosticArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentScoreNotReportedDistrict(Nullable<int> assessmentPL, string assessmentScoreNotReportedArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentScoreNotReportedArrayParameter = assessmentScoreNotReportedArray != null ?
                new ObjectParameter("AssessmentScoreNotReportedArray", assessmentScoreNotReportedArray) :
                new ObjectParameter("AssessmentScoreNotReportedArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentScoreNotReportedDistrict", assessmentPLParameter, assessmentScoreNotReportedArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentSetupDistrict(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentStartDate, Nullable<System.DateTime> assessmentEndDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentStartDateParameter = assessmentStartDate.HasValue ?
                new ObjectParameter("AssessmentStartDate", assessmentStartDate) :
                new ObjectParameter("AssessmentStartDate", typeof(System.DateTime));
    
            var assessmentEndDateParameter = assessmentEndDate.HasValue ?
                new ObjectParameter("AssessmentEndDate", assessmentEndDate) :
                new ObjectParameter("AssessmentEndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentSetupDistrict", assessmentPLParameter, districtIDParameter, assessmentStartDateParameter, assessmentEndDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentTestAccomTypesDistrict(Nullable<int> assessmentPL, string assessmentTestAccomTypesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentTestAccomTypesArrayParameter = assessmentTestAccomTypesArray != null ?
                new ObjectParameter("AssessmentTestAccomTypesArray", assessmentTestAccomTypesArray) :
                new ObjectParameter("AssessmentTestAccomTypesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentTestAccomTypesDistrict", assessmentPLParameter, assessmentTestAccomTypesArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentTestGradeLevelsDistrict(Nullable<int> assessmentPL, string assessmentTestGradeLevelsArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentTestGradeLevelsArrayParameter = assessmentTestGradeLevelsArray != null ?
                new ObjectParameter("AssessmentTestGradeLevelsArray", assessmentTestGradeLevelsArray) :
                new ObjectParameter("AssessmentTestGradeLevelsArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentTestGradeLevelsDistrict", assessmentPLParameter, assessmentTestGradeLevelsArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentTestTypesDistrict(Nullable<int> assessmentPL, string assessmentTestTypesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentTestTypesArrayParameter = assessmentTestTypesArray != null ?
                new ObjectParameter("AssessmentTestTypesArray", assessmentTestTypesArray) :
                new ObjectParameter("AssessmentTestTypesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentTestTypesDistrict", assessmentPLParameter, assessmentTestTypesArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssessmentValidScoresDistrict(Nullable<int> assessmentPL, string assessmentValidScoresArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentValidScoresArrayParameter = assessmentValidScoresArray != null ?
                new ObjectParameter("AssessmentValidScoresArray", assessmentValidScoresArray) :
                new ObjectParameter("AssessmentValidScoresArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssessmentValidScoresDistrict", assessmentPLParameter, assessmentValidScoresArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertAssignment(string assignmentName, Nullable<int> categoryPL, Nullable<decimal> maxPoints, Nullable<System.DateTime> assignedDate, Nullable<System.DateTime> dueDate, Nullable<bool> missingGradeCount, Nullable<decimal> assignmentWeight, Nullable<bool> isIncludeInFinalGrade, Nullable<int> schoolCourseSectionID, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var assignmentNameParameter = assignmentName != null ?
                new ObjectParameter("AssignmentName", assignmentName) :
                new ObjectParameter("AssignmentName", typeof(string));
    
            var categoryPLParameter = categoryPL.HasValue ?
                new ObjectParameter("CategoryPL", categoryPL) :
                new ObjectParameter("CategoryPL", typeof(int));
    
            var maxPointsParameter = maxPoints.HasValue ?
                new ObjectParameter("MaxPoints", maxPoints) :
                new ObjectParameter("MaxPoints", typeof(decimal));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var missingGradeCountParameter = missingGradeCount.HasValue ?
                new ObjectParameter("MissingGradeCount", missingGradeCount) :
                new ObjectParameter("MissingGradeCount", typeof(bool));
    
            var assignmentWeightParameter = assignmentWeight.HasValue ?
                new ObjectParameter("AssignmentWeight", assignmentWeight) :
                new ObjectParameter("AssignmentWeight", typeof(decimal));
    
            var isIncludeInFinalGradeParameter = isIncludeInFinalGrade.HasValue ?
                new ObjectParameter("IsIncludeInFinalGrade", isIncludeInFinalGrade) :
                new ObjectParameter("IsIncludeInFinalGrade", typeof(bool));
    
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertAssignment", assignmentNameParameter, categoryPLParameter, maxPointsParameter, assignedDateParameter, dueDateParameter, missingGradeCountParameter, assignmentWeightParameter, isIncludeInFinalGradeParameter, schoolCourseSectionIDParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertAssignmentDocument(Nullable<int> classAssignmentId, Nullable<int> teacherId, Nullable<int> classId, string documentName, string filePath, string fileDescription)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var filePathParameter = filePath != null ?
                new ObjectParameter("FilePath", filePath) :
                new ObjectParameter("FilePath", typeof(string));
    
            var fileDescriptionParameter = fileDescription != null ?
                new ObjectParameter("FileDescription", fileDescription) :
                new ObjectParameter("FileDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAssignmentDocument", classAssignmentIdParameter, teacherIdParameter, classIdParameter, documentNameParameter, filePathParameter, fileDescriptionParameter);
        }
    
        public virtual int uspInsertAssociatedIncidents(Nullable<int> disciplineincidentid, Nullable<int> associatedincidentid1, Nullable<int> associatedincidentid2, Nullable<int> associatedincidentid3, Nullable<int> associatedincidentid4, Nullable<int> associatedincidentid5, string createdby, Nullable<System.DateTime> createddate)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var associatedincidentid1Parameter = associatedincidentid1.HasValue ?
                new ObjectParameter("associatedincidentid1", associatedincidentid1) :
                new ObjectParameter("associatedincidentid1", typeof(int));
    
            var associatedincidentid2Parameter = associatedincidentid2.HasValue ?
                new ObjectParameter("associatedincidentid2", associatedincidentid2) :
                new ObjectParameter("associatedincidentid2", typeof(int));
    
            var associatedincidentid3Parameter = associatedincidentid3.HasValue ?
                new ObjectParameter("associatedincidentid3", associatedincidentid3) :
                new ObjectParameter("associatedincidentid3", typeof(int));
    
            var associatedincidentid4Parameter = associatedincidentid4.HasValue ?
                new ObjectParameter("associatedincidentid4", associatedincidentid4) :
                new ObjectParameter("associatedincidentid4", typeof(int));
    
            var associatedincidentid5Parameter = associatedincidentid5.HasValue ?
                new ObjectParameter("associatedincidentid5", associatedincidentid5) :
                new ObjectParameter("associatedincidentid5", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAssociatedIncidents", disciplineincidentidParameter, associatedincidentid1Parameter, associatedincidentid2Parameter, associatedincidentid3Parameter, associatedincidentid4Parameter, associatedincidentid5Parameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertAttendancePattern(Nullable<int> patternId, string patternName, string patternDescription, string scheduleDays, string scheduleGradeLevels, Nullable<decimal> hoursPerDay, Nullable<System.DateTime> patternStartDate, Nullable<System.DateTime> patternEndDate, string scheduleSchools, Nullable<decimal> totalHours, Nullable<decimal> totalDays, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifieddate)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("PatternId", patternId) :
                new ObjectParameter("PatternId", typeof(int));
    
            var patternNameParameter = patternName != null ?
                new ObjectParameter("PatternName", patternName) :
                new ObjectParameter("PatternName", typeof(string));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var scheduleDaysParameter = scheduleDays != null ?
                new ObjectParameter("ScheduleDays", scheduleDays) :
                new ObjectParameter("ScheduleDays", typeof(string));
    
            var scheduleGradeLevelsParameter = scheduleGradeLevels != null ?
                new ObjectParameter("ScheduleGradeLevels", scheduleGradeLevels) :
                new ObjectParameter("ScheduleGradeLevels", typeof(string));
    
            var hoursPerDayParameter = hoursPerDay.HasValue ?
                new ObjectParameter("HoursPerDay", hoursPerDay) :
                new ObjectParameter("HoursPerDay", typeof(decimal));
    
            var patternStartDateParameter = patternStartDate.HasValue ?
                new ObjectParameter("PatternStartDate", patternStartDate) :
                new ObjectParameter("PatternStartDate", typeof(System.DateTime));
    
            var patternEndDateParameter = patternEndDate.HasValue ?
                new ObjectParameter("PatternEndDate", patternEndDate) :
                new ObjectParameter("PatternEndDate", typeof(System.DateTime));
    
            var scheduleSchoolsParameter = scheduleSchools != null ?
                new ObjectParameter("ScheduleSchools", scheduleSchools) :
                new ObjectParameter("ScheduleSchools", typeof(string));
    
            var totalHoursParameter = totalHours.HasValue ?
                new ObjectParameter("TotalHours", totalHours) :
                new ObjectParameter("TotalHours", typeof(decimal));
    
            var totalDaysParameter = totalDays.HasValue ?
                new ObjectParameter("TotalDays", totalDays) :
                new ObjectParameter("TotalDays", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("Modifieddate", modifieddate) :
                new ObjectParameter("Modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAttendancePattern", patternIdParameter, patternNameParameter, patternDescriptionParameter, scheduleDaysParameter, scheduleGradeLevelsParameter, hoursPerDayParameter, patternStartDateParameter, patternEndDateParameter, scheduleSchoolsParameter, totalHoursParameter, totalDaysParameter, isActiveParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifieddateParameter);
        }
    
        public virtual int uspInsertAttendanceSettingsInfo(Nullable<int> pickListCodeID, string pickListName, Nullable<int> value, string name, string outputValue, string outputLength, Nullable<int> sortOrder, string defaultValue)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            var pickListNameParameter = pickListName != null ?
                new ObjectParameter("PickListName", pickListName) :
                new ObjectParameter("PickListName", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var outputValueParameter = outputValue != null ?
                new ObjectParameter("OutputValue", outputValue) :
                new ObjectParameter("OutputValue", typeof(string));
    
            var outputLengthParameter = outputLength != null ?
                new ObjectParameter("OutputLength", outputLength) :
                new ObjectParameter("OutputLength", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var defaultValueParameter = defaultValue != null ?
                new ObjectParameter("DefaultValue", defaultValue) :
                new ObjectParameter("DefaultValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAttendanceSettingsInfo", pickListCodeIDParameter, pickListNameParameter, valueParameter, nameParameter, outputValueParameter, outputLengthParameter, sortOrderParameter, defaultValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertBellScheduleInfo(string bellScheduleName, string bellScheduleDescription, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string grades, string days, string perioddetails, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var bellScheduleNameParameter = bellScheduleName != null ?
                new ObjectParameter("BellScheduleName", bellScheduleName) :
                new ObjectParameter("BellScheduleName", typeof(string));
    
            var bellScheduleDescriptionParameter = bellScheduleDescription != null ?
                new ObjectParameter("BellScheduleDescription", bellScheduleDescription) :
                new ObjectParameter("BellScheduleDescription", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var gradesParameter = grades != null ?
                new ObjectParameter("Grades", grades) :
                new ObjectParameter("Grades", typeof(string));
    
            var daysParameter = days != null ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(string));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertBellScheduleInfo", bellScheduleNameParameter, bellScheduleDescriptionParameter, schoolIdParameter, schoolYearIdParameter, startDateParameter, endDateParameter, gradesParameter, daysParameter, perioddetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertBuildingCourse(string buildingCourseName, string buildingCourseNumber, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isEMISReporting, Nullable<bool> createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolId, string mode, Nullable<int> schoolYearId)
        {
            var buildingCourseNameParameter = buildingCourseName != null ?
                new ObjectParameter("BuildingCourseName", buildingCourseName) :
                new ObjectParameter("BuildingCourseName", typeof(string));
    
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(bool));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(bool));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingCourse", buildingCourseNameParameter, buildingCourseNumberParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolIdParameter, modeParameter, schoolYearIdParameter);
        }
    
        public virtual int uspInsertBuildingCourseSection(string buildingCourseName, string buildingCourseNumber, string sectionNumber, Nullable<int> roomId, Nullable<int> defaultMaximunEnrollement, Nullable<int> currentEnrollment, Nullable<int> availableSeats, Nullable<bool> open, Nullable<int> staffId, Nullable<int> staffRoleId, Nullable<System.DateTime> staffStartDate, Nullable<System.DateTime> staffEndDate, Nullable<int> staffHQTId, string staffHQTIRN, string staffProviderIRN, string termIds, Nullable<System.DateTime> sectionStartDate, Nullable<System.DateTime> sectionEndDate, string daysIds, Nullable<int> periodId, Nullable<int> gradeScaleId, Nullable<decimal> gPAAddedValue, string locationIRN, Nullable<int> deliveryMethodId, Nullable<int> studentPopulationId, Nullable<int> educationalOptionId, Nullable<int> languageIdUsedinTeachingCourse, Nullable<int> creditFlexibilityCode, Nullable<decimal> dualEnrollment, Nullable<int> lengthofScheduledInstruction, Nullable<int> maximunSeats, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode)
        {
            var buildingCourseNameParameter = buildingCourseName != null ?
                new ObjectParameter("BuildingCourseName", buildingCourseName) :
                new ObjectParameter("BuildingCourseName", typeof(string));
    
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var defaultMaximunEnrollementParameter = defaultMaximunEnrollement.HasValue ?
                new ObjectParameter("DefaultMaximunEnrollement", defaultMaximunEnrollement) :
                new ObjectParameter("DefaultMaximunEnrollement", typeof(int));
    
            var currentEnrollmentParameter = currentEnrollment.HasValue ?
                new ObjectParameter("CurrentEnrollment", currentEnrollment) :
                new ObjectParameter("CurrentEnrollment", typeof(int));
    
            var availableSeatsParameter = availableSeats.HasValue ?
                new ObjectParameter("AvailableSeats", availableSeats) :
                new ObjectParameter("AvailableSeats", typeof(int));
    
            var openParameter = open.HasValue ?
                new ObjectParameter("Open", open) :
                new ObjectParameter("Open", typeof(bool));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var staffRoleIdParameter = staffRoleId.HasValue ?
                new ObjectParameter("StaffRoleId", staffRoleId) :
                new ObjectParameter("StaffRoleId", typeof(int));
    
            var staffStartDateParameter = staffStartDate.HasValue ?
                new ObjectParameter("StaffStartDate", staffStartDate) :
                new ObjectParameter("StaffStartDate", typeof(System.DateTime));
    
            var staffEndDateParameter = staffEndDate.HasValue ?
                new ObjectParameter("StaffEndDate", staffEndDate) :
                new ObjectParameter("StaffEndDate", typeof(System.DateTime));
    
            var staffHQTIdParameter = staffHQTId.HasValue ?
                new ObjectParameter("StaffHQTId", staffHQTId) :
                new ObjectParameter("StaffHQTId", typeof(int));
    
            var staffHQTIRNParameter = staffHQTIRN != null ?
                new ObjectParameter("StaffHQTIRN", staffHQTIRN) :
                new ObjectParameter("StaffHQTIRN", typeof(string));
    
            var staffProviderIRNParameter = staffProviderIRN != null ?
                new ObjectParameter("StaffProviderIRN", staffProviderIRN) :
                new ObjectParameter("StaffProviderIRN", typeof(string));
    
            var termIdsParameter = termIds != null ?
                new ObjectParameter("TermIds", termIds) :
                new ObjectParameter("TermIds", typeof(string));
    
            var sectionStartDateParameter = sectionStartDate.HasValue ?
                new ObjectParameter("SectionStartDate", sectionStartDate) :
                new ObjectParameter("SectionStartDate", typeof(System.DateTime));
    
            var sectionEndDateParameter = sectionEndDate.HasValue ?
                new ObjectParameter("SectionEndDate", sectionEndDate) :
                new ObjectParameter("SectionEndDate", typeof(System.DateTime));
    
            var daysIdsParameter = daysIds != null ?
                new ObjectParameter("DaysIds", daysIds) :
                new ObjectParameter("DaysIds", typeof(string));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(int));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var gPAAddedValueParameter = gPAAddedValue.HasValue ?
                new ObjectParameter("GPAAddedValue", gPAAddedValue) :
                new ObjectParameter("GPAAddedValue", typeof(decimal));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var deliveryMethodIdParameter = deliveryMethodId.HasValue ?
                new ObjectParameter("DeliveryMethodId", deliveryMethodId) :
                new ObjectParameter("DeliveryMethodId", typeof(int));
    
            var studentPopulationIdParameter = studentPopulationId.HasValue ?
                new ObjectParameter("StudentPopulationId", studentPopulationId) :
                new ObjectParameter("StudentPopulationId", typeof(int));
    
            var educationalOptionIdParameter = educationalOptionId.HasValue ?
                new ObjectParameter("EducationalOptionId", educationalOptionId) :
                new ObjectParameter("EducationalOptionId", typeof(int));
    
            var languageIdUsedinTeachingCourseParameter = languageIdUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageIdUsedinTeachingCourse", languageIdUsedinTeachingCourse) :
                new ObjectParameter("LanguageIdUsedinTeachingCourse", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var dualEnrollmentParameter = dualEnrollment.HasValue ?
                new ObjectParameter("DualEnrollment", dualEnrollment) :
                new ObjectParameter("DualEnrollment", typeof(decimal));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var maximunSeatsParameter = maximunSeats.HasValue ?
                new ObjectParameter("MaximunSeats", maximunSeats) :
                new ObjectParameter("MaximunSeats", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingCourseSection", buildingCourseNameParameter, buildingCourseNumberParameter, sectionNumberParameter, roomIdParameter, defaultMaximunEnrollementParameter, currentEnrollmentParameter, availableSeatsParameter, openParameter, staffIdParameter, staffRoleIdParameter, staffStartDateParameter, staffEndDateParameter, staffHQTIdParameter, staffHQTIRNParameter, staffProviderIRNParameter, termIdsParameter, sectionStartDateParameter, sectionEndDateParameter, daysIdsParameter, periodIdParameter, gradeScaleIdParameter, gPAAddedValueParameter, locationIRNParameter, deliveryMethodIdParameter, studentPopulationIdParameter, educationalOptionIdParameter, languageIdUsedinTeachingCourseParameter, creditFlexibilityCodeParameter, dualEnrollmentParameter, lengthofScheduledInstructionParameter, maximunSeatsParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter);
        }
    
        public virtual int uspInsertBuildingCourseSection_Raghuveer(string perioddetails)
        {
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingCourseSection_Raghuveer", perioddetailsParameter);
        }
    
        public virtual int uspInsertBuildingCourseSection_Vijaya(Nullable<int> buildingCourseId, string sectionNumber, Nullable<int> roomId, Nullable<int> defaultMaximunEnrollement, Nullable<int> currentEnrollment, Nullable<int> availableSeats, Nullable<bool> open, Nullable<decimal> creditHours, Nullable<int> staffId, Nullable<int> staffRoleId, Nullable<System.DateTime> staffStartDate, string staffEndDate, Nullable<int> staffHQTId, string staffHQTIRN, string staffProviderIRN, string termIds, Nullable<System.DateTime> sectionStartDate, Nullable<System.DateTime> sectionEndDate, Nullable<int> gradeScaleId, Nullable<decimal> gPAAddedValue, Nullable<int> stateSubjectCode, Nullable<int> courseLevel, Nullable<int> subjectAreaForCredit, string locationIRN, Nullable<int> deliveryMethodId, Nullable<int> studentPopulationId, Nullable<int> educationalOptionId, Nullable<int> curriculum, Nullable<int> languageIdUsedinTeachingCourse, Nullable<int> creditFlexibilityCode, Nullable<decimal> dualEnrollment, Nullable<int> lengthofScheduledInstruction, Nullable<int> maximunSeats, Nullable<int> cTECollegeCredit, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode, string perioddetails, Nullable<int> schoolId, Nullable<int> schoolYearId, string buttonName)
        {
            var buildingCourseIdParameter = buildingCourseId.HasValue ?
                new ObjectParameter("BuildingCourseId", buildingCourseId) :
                new ObjectParameter("BuildingCourseId", typeof(int));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var defaultMaximunEnrollementParameter = defaultMaximunEnrollement.HasValue ?
                new ObjectParameter("DefaultMaximunEnrollement", defaultMaximunEnrollement) :
                new ObjectParameter("DefaultMaximunEnrollement", typeof(int));
    
            var currentEnrollmentParameter = currentEnrollment.HasValue ?
                new ObjectParameter("CurrentEnrollment", currentEnrollment) :
                new ObjectParameter("CurrentEnrollment", typeof(int));
    
            var availableSeatsParameter = availableSeats.HasValue ?
                new ObjectParameter("AvailableSeats", availableSeats) :
                new ObjectParameter("AvailableSeats", typeof(int));
    
            var openParameter = open.HasValue ?
                new ObjectParameter("Open", open) :
                new ObjectParameter("Open", typeof(bool));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var staffRoleIdParameter = staffRoleId.HasValue ?
                new ObjectParameter("StaffRoleId", staffRoleId) :
                new ObjectParameter("StaffRoleId", typeof(int));
    
            var staffStartDateParameter = staffStartDate.HasValue ?
                new ObjectParameter("StaffStartDate", staffStartDate) :
                new ObjectParameter("StaffStartDate", typeof(System.DateTime));
    
            var staffEndDateParameter = staffEndDate != null ?
                new ObjectParameter("StaffEndDate", staffEndDate) :
                new ObjectParameter("StaffEndDate", typeof(string));
    
            var staffHQTIdParameter = staffHQTId.HasValue ?
                new ObjectParameter("StaffHQTId", staffHQTId) :
                new ObjectParameter("StaffHQTId", typeof(int));
    
            var staffHQTIRNParameter = staffHQTIRN != null ?
                new ObjectParameter("StaffHQTIRN", staffHQTIRN) :
                new ObjectParameter("StaffHQTIRN", typeof(string));
    
            var staffProviderIRNParameter = staffProviderIRN != null ?
                new ObjectParameter("StaffProviderIRN", staffProviderIRN) :
                new ObjectParameter("StaffProviderIRN", typeof(string));
    
            var termIdsParameter = termIds != null ?
                new ObjectParameter("TermIds", termIds) :
                new ObjectParameter("TermIds", typeof(string));
    
            var sectionStartDateParameter = sectionStartDate.HasValue ?
                new ObjectParameter("SectionStartDate", sectionStartDate) :
                new ObjectParameter("SectionStartDate", typeof(System.DateTime));
    
            var sectionEndDateParameter = sectionEndDate.HasValue ?
                new ObjectParameter("SectionEndDate", sectionEndDate) :
                new ObjectParameter("SectionEndDate", typeof(System.DateTime));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var gPAAddedValueParameter = gPAAddedValue.HasValue ?
                new ObjectParameter("GPAAddedValue", gPAAddedValue) :
                new ObjectParameter("GPAAddedValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var deliveryMethodIdParameter = deliveryMethodId.HasValue ?
                new ObjectParameter("DeliveryMethodId", deliveryMethodId) :
                new ObjectParameter("DeliveryMethodId", typeof(int));
    
            var studentPopulationIdParameter = studentPopulationId.HasValue ?
                new ObjectParameter("StudentPopulationId", studentPopulationId) :
                new ObjectParameter("StudentPopulationId", typeof(int));
    
            var educationalOptionIdParameter = educationalOptionId.HasValue ?
                new ObjectParameter("EducationalOptionId", educationalOptionId) :
                new ObjectParameter("EducationalOptionId", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var languageIdUsedinTeachingCourseParameter = languageIdUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageIdUsedinTeachingCourse", languageIdUsedinTeachingCourse) :
                new ObjectParameter("LanguageIdUsedinTeachingCourse", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var dualEnrollmentParameter = dualEnrollment.HasValue ?
                new ObjectParameter("DualEnrollment", dualEnrollment) :
                new ObjectParameter("DualEnrollment", typeof(decimal));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var maximunSeatsParameter = maximunSeats.HasValue ?
                new ObjectParameter("MaximunSeats", maximunSeats) :
                new ObjectParameter("MaximunSeats", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingCourseSection_Vijaya", buildingCourseIdParameter, sectionNumberParameter, roomIdParameter, defaultMaximunEnrollementParameter, currentEnrollmentParameter, availableSeatsParameter, openParameter, creditHoursParameter, staffIdParameter, staffRoleIdParameter, staffStartDateParameter, staffEndDateParameter, staffHQTIdParameter, staffHQTIRNParameter, staffProviderIRNParameter, termIdsParameter, sectionStartDateParameter, sectionEndDateParameter, gradeScaleIdParameter, gPAAddedValueParameter, stateSubjectCodeParameter, courseLevelParameter, subjectAreaForCreditParameter, locationIRNParameter, deliveryMethodIdParameter, studentPopulationIdParameter, educationalOptionIdParameter, curriculumParameter, languageIdUsedinTeachingCourseParameter, creditFlexibilityCodeParameter, dualEnrollmentParameter, lengthofScheduledInstructionParameter, maximunSeatsParameter, cTECollegeCreditParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter, perioddetailsParameter, schoolIdParameter, schoolYearIdParameter, buttonNameParameter);
        }
    
        public virtual int uspInsertBuildingCourseSectionStaffHistory(string buildingCourseName, string buildingCourseNumber, string sectionNumber, Nullable<int> staffId, Nullable<int> staffRoleId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var buildingCourseNameParameter = buildingCourseName != null ?
                new ObjectParameter("BuildingCourseName", buildingCourseName) :
                new ObjectParameter("BuildingCourseName", typeof(string));
    
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var staffRoleIdParameter = staffRoleId.HasValue ?
                new ObjectParameter("StaffRoleId", staffRoleId) :
                new ObjectParameter("StaffRoleId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingCourseSectionStaffHistory", buildingCourseNameParameter, buildingCourseNumberParameter, sectionNumberParameter, staffIdParameter, staffRoleIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspInsertBuildingDetails(string buildingname, string buidlingirn, string streetnumber, string strretname, string streettype, string trailingdirection, string leadingdreiction, string zipcode, string city, string state, string country, string contactperson, string contactemail, string contactphone, string contactphonetype, string contactfax, Nullable<int> numberoffloors, Nullable<int> numberofrooms, string longitudelatitude, Nullable<bool> istestcenterlocation, Nullable<bool> isactive)
        {
            var buildingnameParameter = buildingname != null ?
                new ObjectParameter("buildingname", buildingname) :
                new ObjectParameter("buildingname", typeof(string));
    
            var buidlingirnParameter = buidlingirn != null ?
                new ObjectParameter("buidlingirn", buidlingirn) :
                new ObjectParameter("buidlingirn", typeof(string));
    
            var streetnumberParameter = streetnumber != null ?
                new ObjectParameter("streetnumber", streetnumber) :
                new ObjectParameter("streetnumber", typeof(string));
    
            var strretnameParameter = strretname != null ?
                new ObjectParameter("strretname", strretname) :
                new ObjectParameter("strretname", typeof(string));
    
            var streettypeParameter = streettype != null ?
                new ObjectParameter("streettype", streettype) :
                new ObjectParameter("streettype", typeof(string));
    
            var trailingdirectionParameter = trailingdirection != null ?
                new ObjectParameter("trailingdirection", trailingdirection) :
                new ObjectParameter("trailingdirection", typeof(string));
    
            var leadingdreictionParameter = leadingdreiction != null ?
                new ObjectParameter("leadingdreiction", leadingdreiction) :
                new ObjectParameter("leadingdreiction", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var contactpersonParameter = contactperson != null ?
                new ObjectParameter("contactperson", contactperson) :
                new ObjectParameter("contactperson", typeof(string));
    
            var contactemailParameter = contactemail != null ?
                new ObjectParameter("contactemail", contactemail) :
                new ObjectParameter("contactemail", typeof(string));
    
            var contactphoneParameter = contactphone != null ?
                new ObjectParameter("contactphone", contactphone) :
                new ObjectParameter("contactphone", typeof(string));
    
            var contactphonetypeParameter = contactphonetype != null ?
                new ObjectParameter("contactphonetype", contactphonetype) :
                new ObjectParameter("contactphonetype", typeof(string));
    
            var contactfaxParameter = contactfax != null ?
                new ObjectParameter("contactfax", contactfax) :
                new ObjectParameter("contactfax", typeof(string));
    
            var numberoffloorsParameter = numberoffloors.HasValue ?
                new ObjectParameter("numberoffloors", numberoffloors) :
                new ObjectParameter("numberoffloors", typeof(int));
    
            var numberofroomsParameter = numberofrooms.HasValue ?
                new ObjectParameter("numberofrooms", numberofrooms) :
                new ObjectParameter("numberofrooms", typeof(int));
    
            var longitudelatitudeParameter = longitudelatitude != null ?
                new ObjectParameter("longitudelatitude", longitudelatitude) :
                new ObjectParameter("longitudelatitude", typeof(string));
    
            var istestcenterlocationParameter = istestcenterlocation.HasValue ?
                new ObjectParameter("istestcenterlocation", istestcenterlocation) :
                new ObjectParameter("istestcenterlocation", typeof(bool));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBuildingDetails", buildingnameParameter, buidlingirnParameter, streetnumberParameter, strretnameParameter, streettypeParameter, trailingdirectionParameter, leadingdreictionParameter, zipcodeParameter, cityParameter, stateParameter, countryParameter, contactpersonParameter, contactemailParameter, contactphoneParameter, contactphonetypeParameter, contactfaxParameter, numberoffloorsParameter, numberofroomsParameter, longitudelatitudeParameter, istestcenterlocationParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertBulletin(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string name, string description, Nullable<short> type, string districts, string schools, Nullable<int> createdBy, Nullable<bool> isParent, Nullable<bool> isChild, Nullable<short> creationType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            var districtsParameter = districts != null ?
                new ObjectParameter("Districts", districts) :
                new ObjectParameter("Districts", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isParentParameter = isParent.HasValue ?
                new ObjectParameter("IsParent", isParent) :
                new ObjectParameter("IsParent", typeof(bool));
    
            var isChildParameter = isChild.HasValue ?
                new ObjectParameter("IsChild", isChild) :
                new ObjectParameter("IsChild", typeof(bool));
    
            var creationTypeParameter = creationType.HasValue ?
                new ObjectParameter("CreationType", creationType) :
                new ObjectParameter("CreationType", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertBulletin", startDateParameter, endDateParameter, nameParameter, descriptionParameter, typeParameter, districtsParameter, schoolsParameter, createdByParameter, isParentParameter, isChildParameter, creationTypeParameter);
        }
    
        public virtual int uspInsertBulletinReadStatus(Nullable<int> bulletinId, Nullable<int> personID)
        {
            var bulletinIdParameter = bulletinId.HasValue ?
                new ObjectParameter("BulletinId", bulletinId) :
                new ObjectParameter("BulletinId", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertBulletinReadStatus", bulletinIdParameter, personIDParameter);
        }
    
        public virtual int uspInsertClassAssignment(string assignmentName, Nullable<int> classId, Nullable<int> categoryId, Nullable<int> gradePeriodId, Nullable<System.DateTime> assignedDate, Nullable<System.DateTime> dueDate, Nullable<byte> gradeMethodId, Nullable<decimal> maxPoints, Nullable<decimal> multiplier, Nullable<bool> includeInGradeCalculation)
        {
            var assignmentNameParameter = assignmentName != null ?
                new ObjectParameter("AssignmentName", assignmentName) :
                new ObjectParameter("AssignmentName", typeof(string));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var gradeMethodIdParameter = gradeMethodId.HasValue ?
                new ObjectParameter("GradeMethodId", gradeMethodId) :
                new ObjectParameter("GradeMethodId", typeof(byte));
    
            var maxPointsParameter = maxPoints.HasValue ?
                new ObjectParameter("MaxPoints", maxPoints) :
                new ObjectParameter("MaxPoints", typeof(decimal));
    
            var multiplierParameter = multiplier.HasValue ?
                new ObjectParameter("Multiplier", multiplier) :
                new ObjectParameter("Multiplier", typeof(decimal));
    
            var includeInGradeCalculationParameter = includeInGradeCalculation.HasValue ?
                new ObjectParameter("IncludeInGradeCalculation", includeInGradeCalculation) :
                new ObjectParameter("IncludeInGradeCalculation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassAssignment", assignmentNameParameter, classIdParameter, categoryIdParameter, gradePeriodIdParameter, assignedDateParameter, dueDateParameter, gradeMethodIdParameter, maxPointsParameter, multiplierParameter, includeInGradeCalculationParameter);
        }
    
        public virtual int uspInsertClassAssignmentStudents(Nullable<int> classAssignmentId, Nullable<int> studentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassAssignmentStudents", classAssignmentIdParameter, studentIdParameter);
        }
    
        public virtual int uspInsertClassAssignmentTopic(Nullable<int> classAssignmentId, Nullable<int> topicId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassAssignmentTopic", classAssignmentIdParameter, topicIdParameter);
        }
    
        public virtual int uspInsertClassCategory(Nullable<int> classId, string catgvaluesArray)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var catgvaluesArrayParameter = catgvaluesArray != null ?
                new ObjectParameter("CatgvaluesArray", catgvaluesArray) :
                new ObjectParameter("CatgvaluesArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassCategory", classIdParameter, catgvaluesArrayParameter);
        }
    
        public virtual int uspInsertClassGradePeriods(Nullable<int> classId, Nullable<int> schoolId, string gradePeriodIds)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var gradePeriodIdsParameter = gradePeriodIds != null ?
                new ObjectParameter("GradePeriodIds", gradePeriodIds) :
                new ObjectParameter("GradePeriodIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassGradePeriods", classIdParameter, schoolIdParameter, gradePeriodIdsParameter);
        }
    
        public virtual int uspInsertClassInfo(string className, Nullable<int> subjectId, Nullable<int> courseId, string gradeLevel, Nullable<int> defaultStandardId, string startTime, string endTime, Nullable<int> teacherId, Nullable<int> secondaryTeacherId, string scheduleDays, Nullable<int> gradeScaleId, Nullable<bool> usedForAttendance, Nullable<bool> usedForScheduling, Nullable<int> schoolId, string schoolYear, string roomName, string gradePeriodIds, string sectionName)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var gradeLevelParameter = gradeLevel != null ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(string));
    
            var defaultStandardIdParameter = defaultStandardId.HasValue ?
                new ObjectParameter("DefaultStandardId", defaultStandardId) :
                new ObjectParameter("DefaultStandardId", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var secondaryTeacherIdParameter = secondaryTeacherId.HasValue ?
                new ObjectParameter("SecondaryTeacherId", secondaryTeacherId) :
                new ObjectParameter("SecondaryTeacherId", typeof(int));
    
            var scheduleDaysParameter = scheduleDays != null ?
                new ObjectParameter("ScheduleDays", scheduleDays) :
                new ObjectParameter("ScheduleDays", typeof(string));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var usedForAttendanceParameter = usedForAttendance.HasValue ?
                new ObjectParameter("UsedForAttendance", usedForAttendance) :
                new ObjectParameter("UsedForAttendance", typeof(bool));
    
            var usedForSchedulingParameter = usedForScheduling.HasValue ?
                new ObjectParameter("UsedForScheduling", usedForScheduling) :
                new ObjectParameter("UsedForScheduling", typeof(bool));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var gradePeriodIdsParameter = gradePeriodIds != null ?
                new ObjectParameter("GradePeriodIds", gradePeriodIds) :
                new ObjectParameter("GradePeriodIds", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassInfo", classNameParameter, subjectIdParameter, courseIdParameter, gradeLevelParameter, defaultStandardIdParameter, startTimeParameter, endTimeParameter, teacherIdParameter, secondaryTeacherIdParameter, scheduleDaysParameter, gradeScaleIdParameter, usedForAttendanceParameter, usedForSchedulingParameter, schoolIdParameter, schoolYearParameter, roomNameParameter, gradePeriodIdsParameter, sectionNameParameter);
        }
    
        public virtual int uspInsertClassInfoWithOutGPId(string className, Nullable<int> subjectId, Nullable<int> courseId, string gradeLevel, Nullable<int> defaultStandardId, string startTime, string endTime, Nullable<int> teacherId, Nullable<int> secondaryTeacherId, string scheduleDays, Nullable<int> gradeScaleId, Nullable<bool> usedForAttendance, Nullable<bool> usedForScheduling, Nullable<int> schoolId, string schoolYear, string roomName, string gradePeriodIds, string sectionName)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var gradeLevelParameter = gradeLevel != null ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(string));
    
            var defaultStandardIdParameter = defaultStandardId.HasValue ?
                new ObjectParameter("DefaultStandardId", defaultStandardId) :
                new ObjectParameter("DefaultStandardId", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var secondaryTeacherIdParameter = secondaryTeacherId.HasValue ?
                new ObjectParameter("SecondaryTeacherId", secondaryTeacherId) :
                new ObjectParameter("SecondaryTeacherId", typeof(int));
    
            var scheduleDaysParameter = scheduleDays != null ?
                new ObjectParameter("ScheduleDays", scheduleDays) :
                new ObjectParameter("ScheduleDays", typeof(string));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var usedForAttendanceParameter = usedForAttendance.HasValue ?
                new ObjectParameter("UsedForAttendance", usedForAttendance) :
                new ObjectParameter("UsedForAttendance", typeof(bool));
    
            var usedForSchedulingParameter = usedForScheduling.HasValue ?
                new ObjectParameter("UsedForScheduling", usedForScheduling) :
                new ObjectParameter("UsedForScheduling", typeof(bool));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var gradePeriodIdsParameter = gradePeriodIds != null ?
                new ObjectParameter("GradePeriodIds", gradePeriodIds) :
                new ObjectParameter("GradePeriodIds", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassInfoWithOutGPId", classNameParameter, subjectIdParameter, courseIdParameter, gradeLevelParameter, defaultStandardIdParameter, startTimeParameter, endTimeParameter, teacherIdParameter, secondaryTeacherIdParameter, scheduleDaysParameter, gradeScaleIdParameter, usedForAttendanceParameter, usedForSchedulingParameter, schoolIdParameter, schoolYearParameter, roomNameParameter, gradePeriodIdsParameter, sectionNameParameter);
        }
    
        public virtual int uspInsertClassStudents(Nullable<int> classid)
        {
            var classidParameter = classid.HasValue ?
                new ObjectParameter("classid", classid) :
                new ObjectParameter("classid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertClassStudents", classidParameter);
        }
    
        public virtual int uspInsertContactDetails(Nullable<int> id, string childlivesewith, Nullable<bool> iscontactlegalcustodianofstudent, Nullable<bool> specialcustodialcourt, string primarycontactlastname, string primarycontactfirstname, string primarycontactrelationshipwithstudent, Nullable<bool> iscontactlegalcustodianofstudent1, Nullable<bool> primarysameasstudentaddress, string primarycontactaddress1, string primarycontactaddress2, string primarycontactaddress3, string primarycontactstate, string primarycontactcity, string primarycontactzipcode, string emailaddress, Nullable<bool> primaryphonesameasstudentphone, Nullable<bool> isprivatecontact, string primarycontactphonenumber, Nullable<bool> isprivatealtcontact, string primarycontactalternatephonenumber, string secondarycontactlastname, string secondarycontactfirstname, string secondarycontactrelationshipwithstudent, Nullable<bool> isthecontactlegalcustodianofstudent, Nullable<bool> secondaryaddresssameasstudentaddress, string secondarycontactaddress1, string secondarycontactaddress2, string secondarycontactstate, string secondarycontactcity, string secondaycontactzipcode, Nullable<bool> secondaycontactphoneasstudentphone, Nullable<bool> sprivate, string secondarycontactphonenumber, Nullable<bool> saltprivate, string secondarycontactalternatephonenumber, string primaryphonenumtype, string primaryaltphonenumtype, string secondaryphonenumtype, string secondaryaltphonenumtype)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var childlivesewithParameter = childlivesewith != null ?
                new ObjectParameter("childlivesewith", childlivesewith) :
                new ObjectParameter("childlivesewith", typeof(string));
    
            var iscontactlegalcustodianofstudentParameter = iscontactlegalcustodianofstudent.HasValue ?
                new ObjectParameter("iscontactlegalcustodianofstudent", iscontactlegalcustodianofstudent) :
                new ObjectParameter("iscontactlegalcustodianofstudent", typeof(bool));
    
            var specialcustodialcourtParameter = specialcustodialcourt.HasValue ?
                new ObjectParameter("specialcustodialcourt", specialcustodialcourt) :
                new ObjectParameter("specialcustodialcourt", typeof(bool));
    
            var primarycontactlastnameParameter = primarycontactlastname != null ?
                new ObjectParameter("primarycontactlastname", primarycontactlastname) :
                new ObjectParameter("primarycontactlastname", typeof(string));
    
            var primarycontactfirstnameParameter = primarycontactfirstname != null ?
                new ObjectParameter("primarycontactfirstname", primarycontactfirstname) :
                new ObjectParameter("primarycontactfirstname", typeof(string));
    
            var primarycontactrelationshipwithstudentParameter = primarycontactrelationshipwithstudent != null ?
                new ObjectParameter("primarycontactrelationshipwithstudent", primarycontactrelationshipwithstudent) :
                new ObjectParameter("primarycontactrelationshipwithstudent", typeof(string));
    
            var iscontactlegalcustodianofstudent1Parameter = iscontactlegalcustodianofstudent1.HasValue ?
                new ObjectParameter("iscontactlegalcustodianofstudent1", iscontactlegalcustodianofstudent1) :
                new ObjectParameter("iscontactlegalcustodianofstudent1", typeof(bool));
    
            var primarysameasstudentaddressParameter = primarysameasstudentaddress.HasValue ?
                new ObjectParameter("primarysameasstudentaddress", primarysameasstudentaddress) :
                new ObjectParameter("primarysameasstudentaddress", typeof(bool));
    
            var primarycontactaddress1Parameter = primarycontactaddress1 != null ?
                new ObjectParameter("primarycontactaddress1", primarycontactaddress1) :
                new ObjectParameter("primarycontactaddress1", typeof(string));
    
            var primarycontactaddress2Parameter = primarycontactaddress2 != null ?
                new ObjectParameter("primarycontactaddress2", primarycontactaddress2) :
                new ObjectParameter("primarycontactaddress2", typeof(string));
    
            var primarycontactaddress3Parameter = primarycontactaddress3 != null ?
                new ObjectParameter("primarycontactaddress3", primarycontactaddress3) :
                new ObjectParameter("primarycontactaddress3", typeof(string));
    
            var primarycontactstateParameter = primarycontactstate != null ?
                new ObjectParameter("primarycontactstate", primarycontactstate) :
                new ObjectParameter("primarycontactstate", typeof(string));
    
            var primarycontactcityParameter = primarycontactcity != null ?
                new ObjectParameter("primarycontactcity", primarycontactcity) :
                new ObjectParameter("primarycontactcity", typeof(string));
    
            var primarycontactzipcodeParameter = primarycontactzipcode != null ?
                new ObjectParameter("primarycontactzipcode", primarycontactzipcode) :
                new ObjectParameter("primarycontactzipcode", typeof(string));
    
            var emailaddressParameter = emailaddress != null ?
                new ObjectParameter("emailaddress", emailaddress) :
                new ObjectParameter("emailaddress", typeof(string));
    
            var primaryphonesameasstudentphoneParameter = primaryphonesameasstudentphone.HasValue ?
                new ObjectParameter("primaryphonesameasstudentphone", primaryphonesameasstudentphone) :
                new ObjectParameter("primaryphonesameasstudentphone", typeof(bool));
    
            var isprivatecontactParameter = isprivatecontact.HasValue ?
                new ObjectParameter("isprivatecontact", isprivatecontact) :
                new ObjectParameter("isprivatecontact", typeof(bool));
    
            var primarycontactphonenumberParameter = primarycontactphonenumber != null ?
                new ObjectParameter("primarycontactphonenumber", primarycontactphonenumber) :
                new ObjectParameter("primarycontactphonenumber", typeof(string));
    
            var isprivatealtcontactParameter = isprivatealtcontact.HasValue ?
                new ObjectParameter("isprivatealtcontact", isprivatealtcontact) :
                new ObjectParameter("isprivatealtcontact", typeof(bool));
    
            var primarycontactalternatephonenumberParameter = primarycontactalternatephonenumber != null ?
                new ObjectParameter("primarycontactalternatephonenumber", primarycontactalternatephonenumber) :
                new ObjectParameter("primarycontactalternatephonenumber", typeof(string));
    
            var secondarycontactlastnameParameter = secondarycontactlastname != null ?
                new ObjectParameter("secondarycontactlastname", secondarycontactlastname) :
                new ObjectParameter("secondarycontactlastname", typeof(string));
    
            var secondarycontactfirstnameParameter = secondarycontactfirstname != null ?
                new ObjectParameter("secondarycontactfirstname", secondarycontactfirstname) :
                new ObjectParameter("secondarycontactfirstname", typeof(string));
    
            var secondarycontactrelationshipwithstudentParameter = secondarycontactrelationshipwithstudent != null ?
                new ObjectParameter("secondarycontactrelationshipwithstudent", secondarycontactrelationshipwithstudent) :
                new ObjectParameter("secondarycontactrelationshipwithstudent", typeof(string));
    
            var isthecontactlegalcustodianofstudentParameter = isthecontactlegalcustodianofstudent.HasValue ?
                new ObjectParameter("isthecontactlegalcustodianofstudent", isthecontactlegalcustodianofstudent) :
                new ObjectParameter("isthecontactlegalcustodianofstudent", typeof(bool));
    
            var secondaryaddresssameasstudentaddressParameter = secondaryaddresssameasstudentaddress.HasValue ?
                new ObjectParameter("secondaryaddresssameasstudentaddress", secondaryaddresssameasstudentaddress) :
                new ObjectParameter("secondaryaddresssameasstudentaddress", typeof(bool));
    
            var secondarycontactaddress1Parameter = secondarycontactaddress1 != null ?
                new ObjectParameter("secondarycontactaddress1", secondarycontactaddress1) :
                new ObjectParameter("secondarycontactaddress1", typeof(string));
    
            var secondarycontactaddress2Parameter = secondarycontactaddress2 != null ?
                new ObjectParameter("secondarycontactaddress2", secondarycontactaddress2) :
                new ObjectParameter("secondarycontactaddress2", typeof(string));
    
            var secondarycontactstateParameter = secondarycontactstate != null ?
                new ObjectParameter("secondarycontactstate", secondarycontactstate) :
                new ObjectParameter("secondarycontactstate", typeof(string));
    
            var secondarycontactcityParameter = secondarycontactcity != null ?
                new ObjectParameter("secondarycontactcity", secondarycontactcity) :
                new ObjectParameter("secondarycontactcity", typeof(string));
    
            var secondaycontactzipcodeParameter = secondaycontactzipcode != null ?
                new ObjectParameter("secondaycontactzipcode", secondaycontactzipcode) :
                new ObjectParameter("secondaycontactzipcode", typeof(string));
    
            var secondaycontactphoneasstudentphoneParameter = secondaycontactphoneasstudentphone.HasValue ?
                new ObjectParameter("secondaycontactphoneasstudentphone", secondaycontactphoneasstudentphone) :
                new ObjectParameter("secondaycontactphoneasstudentphone", typeof(bool));
    
            var sprivateParameter = sprivate.HasValue ?
                new ObjectParameter("sprivate", sprivate) :
                new ObjectParameter("sprivate", typeof(bool));
    
            var secondarycontactphonenumberParameter = secondarycontactphonenumber != null ?
                new ObjectParameter("secondarycontactphonenumber", secondarycontactphonenumber) :
                new ObjectParameter("secondarycontactphonenumber", typeof(string));
    
            var saltprivateParameter = saltprivate.HasValue ?
                new ObjectParameter("saltprivate", saltprivate) :
                new ObjectParameter("saltprivate", typeof(bool));
    
            var secondarycontactalternatephonenumberParameter = secondarycontactalternatephonenumber != null ?
                new ObjectParameter("secondarycontactalternatephonenumber", secondarycontactalternatephonenumber) :
                new ObjectParameter("secondarycontactalternatephonenumber", typeof(string));
    
            var primaryphonenumtypeParameter = primaryphonenumtype != null ?
                new ObjectParameter("primaryphonenumtype", primaryphonenumtype) :
                new ObjectParameter("primaryphonenumtype", typeof(string));
    
            var primaryaltphonenumtypeParameter = primaryaltphonenumtype != null ?
                new ObjectParameter("primaryaltphonenumtype", primaryaltphonenumtype) :
                new ObjectParameter("primaryaltphonenumtype", typeof(string));
    
            var secondaryphonenumtypeParameter = secondaryphonenumtype != null ?
                new ObjectParameter("secondaryphonenumtype", secondaryphonenumtype) :
                new ObjectParameter("secondaryphonenumtype", typeof(string));
    
            var secondaryaltphonenumtypeParameter = secondaryaltphonenumtype != null ?
                new ObjectParameter("secondaryaltphonenumtype", secondaryaltphonenumtype) :
                new ObjectParameter("secondaryaltphonenumtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertContactDetails", idParameter, childlivesewithParameter, iscontactlegalcustodianofstudentParameter, specialcustodialcourtParameter, primarycontactlastnameParameter, primarycontactfirstnameParameter, primarycontactrelationshipwithstudentParameter, iscontactlegalcustodianofstudent1Parameter, primarysameasstudentaddressParameter, primarycontactaddress1Parameter, primarycontactaddress2Parameter, primarycontactaddress3Parameter, primarycontactstateParameter, primarycontactcityParameter, primarycontactzipcodeParameter, emailaddressParameter, primaryphonesameasstudentphoneParameter, isprivatecontactParameter, primarycontactphonenumberParameter, isprivatealtcontactParameter, primarycontactalternatephonenumberParameter, secondarycontactlastnameParameter, secondarycontactfirstnameParameter, secondarycontactrelationshipwithstudentParameter, isthecontactlegalcustodianofstudentParameter, secondaryaddresssameasstudentaddressParameter, secondarycontactaddress1Parameter, secondarycontactaddress2Parameter, secondarycontactstateParameter, secondarycontactcityParameter, secondaycontactzipcodeParameter, secondaycontactphoneasstudentphoneParameter, sprivateParameter, secondarycontactphonenumberParameter, saltprivateParameter, secondarycontactalternatephonenumberParameter, primaryphonenumtypeParameter, primaryaltphonenumtypeParameter, secondaryphonenumtypeParameter, secondaryaltphonenumtypeParameter);
        }
    
        public virtual int uspInsertCoreAreaCodesHistory(string districtCourseName, string districtCourseNumber, Nullable<int> coreAreaCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var coreAreaCodeParameter = coreAreaCode.HasValue ?
                new ObjectParameter("CoreAreaCode", coreAreaCode) :
                new ObjectParameter("CoreAreaCode", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCoreAreaCodesHistory", districtCourseNameParameter, districtCourseNumberParameter, coreAreaCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspInsertCourseGradeReq(Nullable<int> schoolCourseId, string gradReqDetails, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            var gradReqDetailsParameter = gradReqDetails != null ?
                new ObjectParameter("GradReqDetails", gradReqDetails) :
                new ObjectParameter("GradReqDetails", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseGradeReq", schoolCourseIdParameter, gradReqDetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertCourseLevelsHistory(string districtCourseName, string districtCourseNumber, Nullable<int> courseLevel, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseLevelsHistory", districtCourseNameParameter, districtCourseNumberParameter, courseLevelParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspInsertCourseSectionsToStudent(string sectionIds, Nullable<int> studentId, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<System.DateTime> startDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var sectionIdsParameter = sectionIds != null ?
                new ObjectParameter("SectionIds", sectionIds) :
                new ObjectParameter("SectionIds", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertCourseSectionsToStudent", sectionIdsParameter, studentIdParameter, schoolIdParameter, schoolYearIdParameter, startDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDataHistoryElements(Nullable<int> studentID, string tableNames, string elementNames, string elementValues, string actions, string effectiveStartDates, string effectiveEndDates, string pickListStatusValues, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var tableNamesParameter = tableNames != null ?
                new ObjectParameter("TableNames", tableNames) :
                new ObjectParameter("TableNames", typeof(string));
    
            var elementNamesParameter = elementNames != null ?
                new ObjectParameter("ElementNames", elementNames) :
                new ObjectParameter("ElementNames", typeof(string));
    
            var elementValuesParameter = elementValues != null ?
                new ObjectParameter("ElementValues", elementValues) :
                new ObjectParameter("ElementValues", typeof(string));
    
            var actionsParameter = actions != null ?
                new ObjectParameter("Actions", actions) :
                new ObjectParameter("Actions", typeof(string));
    
            var effectiveStartDatesParameter = effectiveStartDates != null ?
                new ObjectParameter("EffectiveStartDates", effectiveStartDates) :
                new ObjectParameter("EffectiveStartDates", typeof(string));
    
            var effectiveEndDatesParameter = effectiveEndDates != null ?
                new ObjectParameter("EffectiveEndDates", effectiveEndDates) :
                new ObjectParameter("EffectiveEndDates", typeof(string));
    
            var pickListStatusValuesParameter = pickListStatusValues != null ?
                new ObjectParameter("PickListStatusValues", pickListStatusValues) :
                new ObjectParameter("PickListStatusValues", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDataHistoryElements", studentIDParameter, tableNamesParameter, elementNamesParameter, elementValuesParameter, actionsParameter, effectiveStartDatesParameter, effectiveEndDatesParameter, pickListStatusValuesParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDataHistoryForAllElements(Nullable<int> studentID, Nullable<int> studentApplicationID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDataHistoryForAllElements", studentIDParameter, studentApplicationIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDataHistoryForWithdrawalInFiscalYear(Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDataHistoryForWithdrawalInFiscalYear", schoolIDParameter, schoolYearIDParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDemographics(string firstname, string middlename, string lastname, Nullable<int> suffix, string nickname, string mothersmaidenname, string homestreetnumber, string homestreetname, string homestate, string homecity, string homecountry, string homezipcode, string homecounty, string homeneighbourhood, Nullable<bool> ishomeprivate, string homephonenumber, Nullable<bool> ishomealtprivate, string alternatephonenumber, Nullable<bool> mailingaddresssameashomeaddress, string mailingstreetnumber, string mailingstreetname, string mailingstate, string mailingcity, string mailingcountry, string mailingzipcode, string mailingcounty, string mailingneighbourhood, string mailingapartment, string mailinglot, string mailingother, string dateofbirth, string age, Nullable<int> homelesstype, string birthplacecity, Nullable<bool> migrant, Nullable<int> areyouhispanic, Nullable<bool> racecheck1, Nullable<bool> racecheck2, Nullable<bool> racecheck3, Nullable<bool> racecheck4, Nullable<bool> racecheck5, Nullable<int> gender, Nullable<int> schoolid, string filepath, Nullable<int> homephonenumtype, Nullable<int> altphonenumtype, Nullable<int> militarypl, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var suffixParameter = suffix.HasValue ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var mothersmaidennameParameter = mothersmaidenname != null ?
                new ObjectParameter("mothersmaidenname", mothersmaidenname) :
                new ObjectParameter("mothersmaidenname", typeof(string));
    
            var homestreetnumberParameter = homestreetnumber != null ?
                new ObjectParameter("homestreetnumber", homestreetnumber) :
                new ObjectParameter("homestreetnumber", typeof(string));
    
            var homestreetnameParameter = homestreetname != null ?
                new ObjectParameter("homestreetname", homestreetname) :
                new ObjectParameter("homestreetname", typeof(string));
    
            var homestateParameter = homestate != null ?
                new ObjectParameter("homestate", homestate) :
                new ObjectParameter("homestate", typeof(string));
    
            var homecityParameter = homecity != null ?
                new ObjectParameter("homecity", homecity) :
                new ObjectParameter("homecity", typeof(string));
    
            var homecountryParameter = homecountry != null ?
                new ObjectParameter("homecountry", homecountry) :
                new ObjectParameter("homecountry", typeof(string));
    
            var homezipcodeParameter = homezipcode != null ?
                new ObjectParameter("homezipcode", homezipcode) :
                new ObjectParameter("homezipcode", typeof(string));
    
            var homecountyParameter = homecounty != null ?
                new ObjectParameter("homecounty", homecounty) :
                new ObjectParameter("homecounty", typeof(string));
    
            var homeneighbourhoodParameter = homeneighbourhood != null ?
                new ObjectParameter("homeneighbourhood", homeneighbourhood) :
                new ObjectParameter("homeneighbourhood", typeof(string));
    
            var ishomeprivateParameter = ishomeprivate.HasValue ?
                new ObjectParameter("ishomeprivate", ishomeprivate) :
                new ObjectParameter("ishomeprivate", typeof(bool));
    
            var homephonenumberParameter = homephonenumber != null ?
                new ObjectParameter("homephonenumber", homephonenumber) :
                new ObjectParameter("homephonenumber", typeof(string));
    
            var ishomealtprivateParameter = ishomealtprivate.HasValue ?
                new ObjectParameter("ishomealtprivate", ishomealtprivate) :
                new ObjectParameter("ishomealtprivate", typeof(bool));
    
            var alternatephonenumberParameter = alternatephonenumber != null ?
                new ObjectParameter("alternatephonenumber", alternatephonenumber) :
                new ObjectParameter("alternatephonenumber", typeof(string));
    
            var mailingaddresssameashomeaddressParameter = mailingaddresssameashomeaddress.HasValue ?
                new ObjectParameter("mailingaddresssameashomeaddress", mailingaddresssameashomeaddress) :
                new ObjectParameter("mailingaddresssameashomeaddress", typeof(bool));
    
            var mailingstreetnumberParameter = mailingstreetnumber != null ?
                new ObjectParameter("mailingstreetnumber", mailingstreetnumber) :
                new ObjectParameter("mailingstreetnumber", typeof(string));
    
            var mailingstreetnameParameter = mailingstreetname != null ?
                new ObjectParameter("mailingstreetname", mailingstreetname) :
                new ObjectParameter("mailingstreetname", typeof(string));
    
            var mailingstateParameter = mailingstate != null ?
                new ObjectParameter("mailingstate", mailingstate) :
                new ObjectParameter("mailingstate", typeof(string));
    
            var mailingcityParameter = mailingcity != null ?
                new ObjectParameter("mailingcity", mailingcity) :
                new ObjectParameter("mailingcity", typeof(string));
    
            var mailingcountryParameter = mailingcountry != null ?
                new ObjectParameter("mailingcountry", mailingcountry) :
                new ObjectParameter("mailingcountry", typeof(string));
    
            var mailingzipcodeParameter = mailingzipcode != null ?
                new ObjectParameter("mailingzipcode", mailingzipcode) :
                new ObjectParameter("mailingzipcode", typeof(string));
    
            var mailingcountyParameter = mailingcounty != null ?
                new ObjectParameter("mailingcounty", mailingcounty) :
                new ObjectParameter("mailingcounty", typeof(string));
    
            var mailingneighbourhoodParameter = mailingneighbourhood != null ?
                new ObjectParameter("mailingneighbourhood", mailingneighbourhood) :
                new ObjectParameter("mailingneighbourhood", typeof(string));
    
            var mailingapartmentParameter = mailingapartment != null ?
                new ObjectParameter("mailingapartment", mailingapartment) :
                new ObjectParameter("mailingapartment", typeof(string));
    
            var mailinglotParameter = mailinglot != null ?
                new ObjectParameter("mailinglot", mailinglot) :
                new ObjectParameter("mailinglot", typeof(string));
    
            var mailingotherParameter = mailingother != null ?
                new ObjectParameter("mailingother", mailingother) :
                new ObjectParameter("mailingother", typeof(string));
    
            var dateofbirthParameter = dateofbirth != null ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var homelesstypeParameter = homelesstype.HasValue ?
                new ObjectParameter("homelesstype", homelesstype) :
                new ObjectParameter("homelesstype", typeof(int));
    
            var birthplacecityParameter = birthplacecity != null ?
                new ObjectParameter("birthplacecity", birthplacecity) :
                new ObjectParameter("birthplacecity", typeof(string));
    
            var migrantParameter = migrant.HasValue ?
                new ObjectParameter("migrant", migrant) :
                new ObjectParameter("migrant", typeof(bool));
    
            var areyouhispanicParameter = areyouhispanic.HasValue ?
                new ObjectParameter("areyouhispanic", areyouhispanic) :
                new ObjectParameter("areyouhispanic", typeof(int));
    
            var racecheck1Parameter = racecheck1.HasValue ?
                new ObjectParameter("racecheck1", racecheck1) :
                new ObjectParameter("racecheck1", typeof(bool));
    
            var racecheck2Parameter = racecheck2.HasValue ?
                new ObjectParameter("racecheck2", racecheck2) :
                new ObjectParameter("racecheck2", typeof(bool));
    
            var racecheck3Parameter = racecheck3.HasValue ?
                new ObjectParameter("racecheck3", racecheck3) :
                new ObjectParameter("racecheck3", typeof(bool));
    
            var racecheck4Parameter = racecheck4.HasValue ?
                new ObjectParameter("racecheck4", racecheck4) :
                new ObjectParameter("racecheck4", typeof(bool));
    
            var racecheck5Parameter = racecheck5.HasValue ?
                new ObjectParameter("racecheck5", racecheck5) :
                new ObjectParameter("racecheck5", typeof(bool));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var filepathParameter = filepath != null ?
                new ObjectParameter("filepath", filepath) :
                new ObjectParameter("filepath", typeof(string));
    
            var homephonenumtypeParameter = homephonenumtype.HasValue ?
                new ObjectParameter("homephonenumtype", homephonenumtype) :
                new ObjectParameter("homephonenumtype", typeof(int));
    
            var altphonenumtypeParameter = altphonenumtype.HasValue ?
                new ObjectParameter("altphonenumtype", altphonenumtype) :
                new ObjectParameter("altphonenumtype", typeof(int));
    
            var militaryplParameter = militarypl.HasValue ?
                new ObjectParameter("militarypl", militarypl) :
                new ObjectParameter("militarypl", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDemographics", firstnameParameter, middlenameParameter, lastnameParameter, suffixParameter, nicknameParameter, mothersmaidennameParameter, homestreetnumberParameter, homestreetnameParameter, homestateParameter, homecityParameter, homecountryParameter, homezipcodeParameter, homecountyParameter, homeneighbourhoodParameter, ishomeprivateParameter, homephonenumberParameter, ishomealtprivateParameter, alternatephonenumberParameter, mailingaddresssameashomeaddressParameter, mailingstreetnumberParameter, mailingstreetnameParameter, mailingstateParameter, mailingcityParameter, mailingcountryParameter, mailingzipcodeParameter, mailingcountyParameter, mailingneighbourhoodParameter, mailingapartmentParameter, mailinglotParameter, mailingotherParameter, dateofbirthParameter, ageParameter, homelesstypeParameter, birthplacecityParameter, migrantParameter, areyouhispanicParameter, racecheck1Parameter, racecheck2Parameter, racecheck3Parameter, racecheck4Parameter, racecheck5Parameter, genderParameter, schoolidParameter, filepathParameter, homephonenumtypeParameter, altphonenumtypeParameter, militaryplParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertDepartment(string departmentname, string description, Nullable<int> schoolid, Nullable<int> departmentheadone, Nullable<int> departmentheadtwo, string createdby, Nullable<System.DateTime> createddate)
        {
            var departmentnameParameter = departmentname != null ?
                new ObjectParameter("departmentname", departmentname) :
                new ObjectParameter("departmentname", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var departmentheadoneParameter = departmentheadone.HasValue ?
                new ObjectParameter("departmentheadone", departmentheadone) :
                new ObjectParameter("departmentheadone", typeof(int));
    
            var departmentheadtwoParameter = departmentheadtwo.HasValue ?
                new ObjectParameter("departmentheadtwo", departmentheadtwo) :
                new ObjectParameter("departmentheadtwo", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDepartment", departmentnameParameter, descriptionParameter, schoolidParameter, departmentheadoneParameter, departmentheadtwoParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertDeptStaffDetails(string departmentName, Nullable<int> districtID, Nullable<int> schoolID, string staffDetailsArray)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var staffDetailsArrayParameter = staffDetailsArray != null ?
                new ObjectParameter("StaffDetailsArray", staffDetailsArray) :
                new ObjectParameter("StaffDetailsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDeptStaffDetails", departmentNameParameter, districtIDParameter, schoolIDParameter, staffDetailsArrayParameter);
        }
    
        public virtual int uspInsertDisciplineIncident(Nullable<System.DateTime> incidentdate, Nullable<int> disciplinecategory, string schoolyear, string term, string description, Nullable<int> location, string nonfirearmsconfiscated, string firearmsconfiscated, Nullable<bool> tobaccolettersenttoparents, Nullable<bool> notifiedpolice, string stateincidentnumber, Nullable<int> publishnow, string publishcomment, string summary, Nullable<System.DateTime> actionstartdate, Nullable<System.DateTime> actionenddate, Nullable<int> actiontakentype, Nullable<int> suspensiondays, string actiondescription, Nullable<int> schoolid, string createdby, Nullable<System.DateTime> createddate)
        {
            var incidentdateParameter = incidentdate.HasValue ?
                new ObjectParameter("incidentdate", incidentdate) :
                new ObjectParameter("incidentdate", typeof(System.DateTime));
    
            var disciplinecategoryParameter = disciplinecategory.HasValue ?
                new ObjectParameter("disciplinecategory", disciplinecategory) :
                new ObjectParameter("disciplinecategory", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var nonfirearmsconfiscatedParameter = nonfirearmsconfiscated != null ?
                new ObjectParameter("nonfirearmsconfiscated", nonfirearmsconfiscated) :
                new ObjectParameter("nonfirearmsconfiscated", typeof(string));
    
            var firearmsconfiscatedParameter = firearmsconfiscated != null ?
                new ObjectParameter("firearmsconfiscated", firearmsconfiscated) :
                new ObjectParameter("firearmsconfiscated", typeof(string));
    
            var tobaccolettersenttoparentsParameter = tobaccolettersenttoparents.HasValue ?
                new ObjectParameter("tobaccolettersenttoparents", tobaccolettersenttoparents) :
                new ObjectParameter("tobaccolettersenttoparents", typeof(bool));
    
            var notifiedpoliceParameter = notifiedpolice.HasValue ?
                new ObjectParameter("notifiedpolice", notifiedpolice) :
                new ObjectParameter("notifiedpolice", typeof(bool));
    
            var stateincidentnumberParameter = stateincidentnumber != null ?
                new ObjectParameter("stateincidentnumber", stateincidentnumber) :
                new ObjectParameter("stateincidentnumber", typeof(string));
    
            var publishnowParameter = publishnow.HasValue ?
                new ObjectParameter("publishnow", publishnow) :
                new ObjectParameter("publishnow", typeof(int));
    
            var publishcommentParameter = publishcomment != null ?
                new ObjectParameter("publishcomment", publishcomment) :
                new ObjectParameter("publishcomment", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("summary", summary) :
                new ObjectParameter("summary", typeof(string));
    
            var actionstartdateParameter = actionstartdate.HasValue ?
                new ObjectParameter("actionstartdate", actionstartdate) :
                new ObjectParameter("actionstartdate", typeof(System.DateTime));
    
            var actionenddateParameter = actionenddate.HasValue ?
                new ObjectParameter("actionenddate", actionenddate) :
                new ObjectParameter("actionenddate", typeof(System.DateTime));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var suspensiondaysParameter = suspensiondays.HasValue ?
                new ObjectParameter("suspensiondays", suspensiondays) :
                new ObjectParameter("suspensiondays", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDisciplineIncident", incidentdateParameter, disciplinecategoryParameter, schoolyearParameter, termParameter, descriptionParameter, locationParameter, nonfirearmsconfiscatedParameter, firearmsconfiscatedParameter, tobaccolettersenttoparentsParameter, notifiedpoliceParameter, stateincidentnumberParameter, publishnowParameter, publishcommentParameter, summaryParameter, actionstartdateParameter, actionenddateParameter, actiontakentypeParameter, suspensiondaysParameter, actiondescriptionParameter, schoolidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDIstrictApplicationSetup(Nullable<int> districtid, string surveyquestion1, string surveyquestion2, string surveyquestion3, string applicationmessaeg, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var surveyquestion1Parameter = surveyquestion1 != null ?
                new ObjectParameter("surveyquestion1", surveyquestion1) :
                new ObjectParameter("surveyquestion1", typeof(string));
    
            var surveyquestion2Parameter = surveyquestion2 != null ?
                new ObjectParameter("surveyquestion2", surveyquestion2) :
                new ObjectParameter("surveyquestion2", typeof(string));
    
            var surveyquestion3Parameter = surveyquestion3 != null ?
                new ObjectParameter("surveyquestion3", surveyquestion3) :
                new ObjectParameter("surveyquestion3", typeof(string));
    
            var applicationmessaegParameter = applicationmessaeg != null ?
                new ObjectParameter("applicationmessaeg", applicationmessaeg) :
                new ObjectParameter("applicationmessaeg", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDIstrictApplicationSetup", districtidParameter, surveyquestion1Parameter, surveyquestion2Parameter, surveyquestion3Parameter, applicationmessaegParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictArea(Nullable<int> districtId, string areaName, Nullable<int> areaLeaderId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaLeaderIdParameter = areaLeaderId.HasValue ?
                new ObjectParameter("AreaLeaderId", areaLeaderId) :
                new ObjectParameter("AreaLeaderId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictArea", districtIdParameter, areaNameParameter, areaLeaderIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictAttendancePattern(Nullable<int> districtID, string patternName, string patternDescription, Nullable<System.DateTime> patternStartDate, Nullable<System.DateTime> patternEndDate, string scheduleSchools, Nullable<int> schoolYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("districtID", districtID) :
                new ObjectParameter("districtID", typeof(int));
    
            var patternNameParameter = patternName != null ?
                new ObjectParameter("PatternName", patternName) :
                new ObjectParameter("PatternName", typeof(string));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var patternStartDateParameter = patternStartDate.HasValue ?
                new ObjectParameter("PatternStartDate", patternStartDate) :
                new ObjectParameter("PatternStartDate", typeof(System.DateTime));
    
            var patternEndDateParameter = patternEndDate.HasValue ?
                new ObjectParameter("PatternEndDate", patternEndDate) :
                new ObjectParameter("PatternEndDate", typeof(System.DateTime));
    
            var scheduleSchoolsParameter = scheduleSchools != null ?
                new ObjectParameter("ScheduleSchools", scheduleSchools) :
                new ObjectParameter("ScheduleSchools", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictAttendancePattern", districtIDParameter, patternNameParameter, patternDescriptionParameter, patternStartDateParameter, patternEndDateParameter, scheduleSchoolsParameter, schoolYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictAttendancePattern_Vijaya(Nullable<int> districtID, string patternName, string patternDescription, Nullable<System.DateTime> patternStartDate, Nullable<System.DateTime> patternEndDate, string scheduleSchools, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("districtID", districtID) :
                new ObjectParameter("districtID", typeof(int));
    
            var patternNameParameter = patternName != null ?
                new ObjectParameter("PatternName", patternName) :
                new ObjectParameter("PatternName", typeof(string));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var patternStartDateParameter = patternStartDate.HasValue ?
                new ObjectParameter("PatternStartDate", patternStartDate) :
                new ObjectParameter("PatternStartDate", typeof(System.DateTime));
    
            var patternEndDateParameter = patternEndDate.HasValue ?
                new ObjectParameter("PatternEndDate", patternEndDate) :
                new ObjectParameter("PatternEndDate", typeof(System.DateTime));
    
            var scheduleSchoolsParameter = scheduleSchools != null ?
                new ObjectParameter("ScheduleSchools", scheduleSchools) :
                new ObjectParameter("ScheduleSchools", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictAttendancePattern_Vijaya", districtIDParameter, patternNameParameter, patternDescriptionParameter, patternStartDateParameter, patternEndDateParameter, scheduleSchoolsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictAttendancePatternEvent(string patternDescription, Nullable<int> calendarEventPL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> districtAttendancePatternID, Nullable<decimal> hours, string scheduledSchools, string scheduledGradeLevels, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> schoolAttendancePatternID)
        {
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var calendarEventPLParameter = calendarEventPL.HasValue ?
                new ObjectParameter("CalendarEventPL", calendarEventPL) :
                new ObjectParameter("CalendarEventPL", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var districtAttendancePatternIDParameter = districtAttendancePatternID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternID", districtAttendancePatternID) :
                new ObjectParameter("DistrictAttendancePatternID", typeof(int));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var scheduledSchoolsParameter = scheduledSchools != null ?
                new ObjectParameter("ScheduledSchools", scheduledSchools) :
                new ObjectParameter("ScheduledSchools", typeof(string));
    
            var scheduledGradeLevelsParameter = scheduledGradeLevels != null ?
                new ObjectParameter("ScheduledGradeLevels", scheduledGradeLevels) :
                new ObjectParameter("ScheduledGradeLevels", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictAttendancePatternEvent", patternDescriptionParameter, calendarEventPLParameter, startDateParameter, endDateParameter, districtAttendancePatternIDParameter, hoursParameter, scheduledSchoolsParameter, scheduledGradeLevelsParameter, createdByParameter, createdDateParameter, schoolAttendancePatternIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCalendarEndSetupSettings(Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<bool> courses, Nullable<bool> students, Nullable<bool> retention, Nullable<bool> fees, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var coursesParameter = courses.HasValue ?
                new ObjectParameter("Courses", courses) :
                new ObjectParameter("Courses", typeof(bool));
    
            var studentsParameter = students.HasValue ?
                new ObjectParameter("Students", students) :
                new ObjectParameter("Students", typeof(bool));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(bool));
    
            var feesParameter = fees.HasValue ?
                new ObjectParameter("Fees", fees) :
                new ObjectParameter("Fees", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCalendarEndSetupSettings", districtIDParameter, schoolYearPLParameter, coursesParameter, studentsParameter, retentionParameter, feesParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictComment(Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<int> commentTypePL, string commentDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var commentTypePLParameter = commentTypePL.HasValue ?
                new ObjectParameter("CommentTypePL", commentTypePL) :
                new ObjectParameter("CommentTypePL", typeof(int));
    
            var commentDescriptionParameter = commentDescription != null ?
                new ObjectParameter("CommentDescription", commentDescription) :
                new ObjectParameter("CommentDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictComment", districtIDParameter, schoolYearPLParameter, commentTypePLParameter, commentDescriptionParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCommentsToSchools(string districtCommentIDs, string schoolIDs, Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCommentIDsParameter = districtCommentIDs != null ?
                new ObjectParameter("DistrictCommentIDs", districtCommentIDs) :
                new ObjectParameter("DistrictCommentIDs", typeof(string));
    
            var schoolIDsParameter = schoolIDs != null ?
                new ObjectParameter("SchoolIDs", schoolIDs) :
                new ObjectParameter("SchoolIDs", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCommentsToSchools", districtCommentIDsParameter, schoolIDsParameter, districtIDParameter, schoolYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCourse(string districtCourseName, string districtCourseNumber, string schools, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<System.DateTime> startDate, string endDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolYearId, string termLength, string mode, Nullable<int> districtId, string buttonName, Nullable<int> districtCourseId, Nullable<bool> isStateReporting)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var termLengthParameter = termLength != null ?
                new ObjectParameter("TermLength", termLength) :
                new ObjectParameter("TermLength", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            var districtCourseIdParameter = districtCourseId.HasValue ?
                new ObjectParameter("DistrictCourseId", districtCourseId) :
                new ObjectParameter("DistrictCourseId", typeof(int));
    
            var isStateReportingParameter = isStateReporting.HasValue ?
                new ObjectParameter("IsStateReporting", isStateReporting) :
                new ObjectParameter("IsStateReporting", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCourse", districtCourseNameParameter, districtCourseNumberParameter, schoolsParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, startDateParameter, endDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolYearIdParameter, termLengthParameter, modeParameter, districtIdParameter, buttonNameParameter, districtCourseIdParameter, isStateReportingParameter);
        }
    
        public virtual int uspInsertDistrictCourse_Old(string districtCourseName, string districtCourseNumber, string schools, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolYearId, string termLength, string mode, Nullable<int> districtId, string buttonName, Nullable<int> districtCourseId)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var termLengthParameter = termLength != null ?
                new ObjectParameter("TermLength", termLength) :
                new ObjectParameter("TermLength", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            var districtCourseIdParameter = districtCourseId.HasValue ?
                new ObjectParameter("DistrictCourseId", districtCourseId) :
                new ObjectParameter("DistrictCourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDistrictCourse_Old", districtCourseNameParameter, districtCourseNumberParameter, schoolsParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolYearIdParameter, termLengthParameter, modeParameter, districtIdParameter, buttonNameParameter, districtCourseIdParameter);
        }
    
        public virtual int uspInsertDistrictCourse_Vijaya(string districtCourseName, string districtCourseNumber, string schools, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolYearId, string termLength, string mode, Nullable<int> districtId)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var termLengthParameter = termLength != null ?
                new ObjectParameter("TermLength", termLength) :
                new ObjectParameter("TermLength", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDistrictCourse_Vijaya", districtCourseNameParameter, districtCourseNumberParameter, schoolsParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolYearIdParameter, termLengthParameter, modeParameter, districtIdParameter);
        }
    
        public virtual int uspInsertDistrictCourseHistory(Nullable<int> districtCourseId, string districtCourseHistory, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseIdParameter = districtCourseId.HasValue ?
                new ObjectParameter("DistrictCourseId", districtCourseId) :
                new ObjectParameter("DistrictCourseId", typeof(int));
    
            var districtCourseHistoryParameter = districtCourseHistory != null ?
                new ObjectParameter("DistrictCourseHistory", districtCourseHistory) :
                new ObjectParameter("DistrictCourseHistory", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDistrictCourseHistory", districtCourseIdParameter, districtCourseHistoryParameter, startDateParameter, endDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertDistrictCourseNew(string districtCourseName, string districtCourseNumber, string schools, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string schoolYear, string termLength, string mode)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var termLengthParameter = termLength != null ?
                new ObjectParameter("TermLength", termLength) :
                new ObjectParameter("TermLength", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDistrictCourseNew", districtCourseNameParameter, districtCourseNumberParameter, schoolsParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolYearParameter, termLengthParameter, modeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCoursesToSchool(string districtCourseIds, Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseIdsParameter = districtCourseIds != null ?
                new ObjectParameter("DistrictCourseIds", districtCourseIds) :
                new ObjectParameter("DistrictCourseIds", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCoursesToSchool", districtCourseIdsParameter, schoolIDParameter, schoolYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCourseTerm(Nullable<int> districtID, Nullable<int> courseTermLengthPL, Nullable<System.DateTime> courseTermStartDate, Nullable<System.DateTime> courseTermEndDate, Nullable<int> schoolYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var courseTermLengthPLParameter = courseTermLengthPL.HasValue ?
                new ObjectParameter("CourseTermLengthPL", courseTermLengthPL) :
                new ObjectParameter("CourseTermLengthPL", typeof(int));
    
            var courseTermStartDateParameter = courseTermStartDate.HasValue ?
                new ObjectParameter("CourseTermStartDate", courseTermStartDate) :
                new ObjectParameter("CourseTermStartDate", typeof(System.DateTime));
    
            var courseTermEndDateParameter = courseTermEndDate.HasValue ?
                new ObjectParameter("CourseTermEndDate", courseTermEndDate) :
                new ObjectParameter("CourseTermEndDate", typeof(System.DateTime));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCourseTerm", districtIDParameter, courseTermLengthPLParameter, courseTermStartDateParameter, courseTermEndDateParameter, schoolYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictCourseTermsToSchools(string districtCourseTermIDs, string schoolIDs, Nullable<int> districtID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseTermIDsParameter = districtCourseTermIDs != null ?
                new ObjectParameter("DistrictCourseTermIDs", districtCourseTermIDs) :
                new ObjectParameter("DistrictCourseTermIDs", typeof(string));
    
            var schoolIDsParameter = schoolIDs != null ?
                new ObjectParameter("SchoolIDs", schoolIDs) :
                new ObjectParameter("SchoolIDs", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictCourseTermsToSchools", districtCourseTermIDsParameter, schoolIDsParameter, districtIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertDistrictDetails(Nullable<int> organizationid, string districttype, string districtname, string districtaddress1, string districtaddress2, string districtzipcode, string districtcity, string districtstate, string districtcountry, string districtcontactname, string districtcontactemail, string districtphone, string districtusername, string distrcituserpassword)
        {
            var organizationidParameter = organizationid.HasValue ?
                new ObjectParameter("organizationid", organizationid) :
                new ObjectParameter("organizationid", typeof(int));
    
            var districttypeParameter = districttype != null ?
                new ObjectParameter("districttype", districttype) :
                new ObjectParameter("districttype", typeof(string));
    
            var districtnameParameter = districtname != null ?
                new ObjectParameter("districtname", districtname) :
                new ObjectParameter("districtname", typeof(string));
    
            var districtaddress1Parameter = districtaddress1 != null ?
                new ObjectParameter("districtaddress1", districtaddress1) :
                new ObjectParameter("districtaddress1", typeof(string));
    
            var districtaddress2Parameter = districtaddress2 != null ?
                new ObjectParameter("districtaddress2", districtaddress2) :
                new ObjectParameter("districtaddress2", typeof(string));
    
            var districtzipcodeParameter = districtzipcode != null ?
                new ObjectParameter("districtzipcode", districtzipcode) :
                new ObjectParameter("districtzipcode", typeof(string));
    
            var districtcityParameter = districtcity != null ?
                new ObjectParameter("districtcity", districtcity) :
                new ObjectParameter("districtcity", typeof(string));
    
            var districtstateParameter = districtstate != null ?
                new ObjectParameter("districtstate", districtstate) :
                new ObjectParameter("districtstate", typeof(string));
    
            var districtcountryParameter = districtcountry != null ?
                new ObjectParameter("districtcountry", districtcountry) :
                new ObjectParameter("districtcountry", typeof(string));
    
            var districtcontactnameParameter = districtcontactname != null ?
                new ObjectParameter("districtcontactname", districtcontactname) :
                new ObjectParameter("districtcontactname", typeof(string));
    
            var districtcontactemailParameter = districtcontactemail != null ?
                new ObjectParameter("districtcontactemail", districtcontactemail) :
                new ObjectParameter("districtcontactemail", typeof(string));
    
            var districtphoneParameter = districtphone != null ?
                new ObjectParameter("districtphone", districtphone) :
                new ObjectParameter("districtphone", typeof(string));
    
            var districtusernameParameter = districtusername != null ?
                new ObjectParameter("districtusername", districtusername) :
                new ObjectParameter("districtusername", typeof(string));
    
            var distrcituserpasswordParameter = distrcituserpassword != null ?
                new ObjectParameter("distrcituserpassword", distrcituserpassword) :
                new ObjectParameter("distrcituserpassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDistrictDetails", organizationidParameter, districttypeParameter, districtnameParameter, districtaddress1Parameter, districtaddress2Parameter, districtzipcodeParameter, districtcityParameter, districtstateParameter, districtcountryParameter, districtcontactnameParameter, districtcontactemailParameter, districtphoneParameter, districtusernameParameter, distrcituserpasswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGPA(Nullable<int> districtID, string gPAName, string gPAFormula, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gPANameParameter = gPAName != null ?
                new ObjectParameter("GPAName", gPAName) :
                new ObjectParameter("GPAName", typeof(string));
    
            var gPAFormulaParameter = gPAFormula != null ?
                new ObjectParameter("GPAFormula", gPAFormula) :
                new ObjectParameter("GPAFormula", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGPA", districtIDParameter, gPANameParameter, gPAFormulaParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGPAToSchools(Nullable<int> districtID, string districtGPAName)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var districtGPANameParameter = districtGPAName != null ?
                new ObjectParameter("DistrictGPAName", districtGPAName) :
                new ObjectParameter("DistrictGPAName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGPAToSchools", districtIDParameter, districtGPANameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGradebookPreference(Nullable<int> districtID, Nullable<int> schoolYearPL, string assignmentCategoryPLs, string gradeReasonTypePLs, Nullable<bool> isMissingScore, Nullable<int> roundToDecimalPL, string districtCommentPLs, Nullable<bool> isSchoolCreateNewComments, string assignmentCategoryColorCode, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var assignmentCategoryPLsParameter = assignmentCategoryPLs != null ?
                new ObjectParameter("AssignmentCategoryPLs", assignmentCategoryPLs) :
                new ObjectParameter("AssignmentCategoryPLs", typeof(string));
    
            var gradeReasonTypePLsParameter = gradeReasonTypePLs != null ?
                new ObjectParameter("GradeReasonTypePLs", gradeReasonTypePLs) :
                new ObjectParameter("GradeReasonTypePLs", typeof(string));
    
            var isMissingScoreParameter = isMissingScore.HasValue ?
                new ObjectParameter("IsMissingScore", isMissingScore) :
                new ObjectParameter("IsMissingScore", typeof(bool));
    
            var roundToDecimalPLParameter = roundToDecimalPL.HasValue ?
                new ObjectParameter("RoundToDecimalPL", roundToDecimalPL) :
                new ObjectParameter("RoundToDecimalPL", typeof(int));
    
            var districtCommentPLsParameter = districtCommentPLs != null ?
                new ObjectParameter("DistrictCommentPLs", districtCommentPLs) :
                new ObjectParameter("DistrictCommentPLs", typeof(string));
    
            var isSchoolCreateNewCommentsParameter = isSchoolCreateNewComments.HasValue ?
                new ObjectParameter("IsSchoolCreateNewComments", isSchoolCreateNewComments) :
                new ObjectParameter("IsSchoolCreateNewComments", typeof(bool));
    
            var assignmentCategoryColorCodeParameter = assignmentCategoryColorCode != null ?
                new ObjectParameter("AssignmentCategoryColorCode", assignmentCategoryColorCode) :
                new ObjectParameter("AssignmentCategoryColorCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGradebookPreference", districtIDParameter, schoolYearPLParameter, assignmentCategoryPLsParameter, gradeReasonTypePLsParameter, isMissingScoreParameter, roundToDecimalPLParameter, districtCommentPLsParameter, isSchoolCreateNewCommentsParameter, assignmentCategoryColorCodeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGradebookPreferencesToSchools(Nullable<int> schoolYearPL, string schoolIDs, Nullable<int> districtID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var schoolIDsParameter = schoolIDs != null ?
                new ObjectParameter("SchoolIDs", schoolIDs) :
                new ObjectParameter("SchoolIDs", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGradebookPreferencesToSchools", schoolYearPLParameter, schoolIDsParameter, districtIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGradeScale(Nullable<int> districtID, string gradeScaleName, Nullable<bool> @default, Nullable<bool> canEditAtSchool, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gradeScaleNameParameter = gradeScaleName != null ?
                new ObjectParameter("GradeScaleName", gradeScaleName) :
                new ObjectParameter("GradeScaleName", typeof(string));
    
            var defaultParameter = @default.HasValue ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(bool));
    
            var canEditAtSchoolParameter = canEditAtSchool.HasValue ?
                new ObjectParameter("CanEditAtSchool", canEditAtSchool) :
                new ObjectParameter("CanEditAtSchool", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGradeScale", districtIDParameter, gradeScaleNameParameter, defaultParameter, canEditAtSchoolParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGradeScaleDetails(Nullable<int> districtGradeScaleID, Nullable<decimal> minValue, Nullable<decimal> maxValue, string grade, string description, Nullable<bool> validForGPA, Nullable<int> districtID, Nullable<decimal> gradePoints, Nullable<bool> isEarnsCredit, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtGradeScaleIDParameter = districtGradeScaleID.HasValue ?
                new ObjectParameter("DistrictGradeScaleID", districtGradeScaleID) :
                new ObjectParameter("DistrictGradeScaleID", typeof(int));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(decimal));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(decimal));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var validForGPAParameter = validForGPA.HasValue ?
                new ObjectParameter("ValidForGPA", validForGPA) :
                new ObjectParameter("ValidForGPA", typeof(bool));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gradePointsParameter = gradePoints.HasValue ?
                new ObjectParameter("GradePoints", gradePoints) :
                new ObjectParameter("GradePoints", typeof(decimal));
    
            var isEarnsCreditParameter = isEarnsCredit.HasValue ?
                new ObjectParameter("IsEarnsCredit", isEarnsCredit) :
                new ObjectParameter("IsEarnsCredit", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGradeScaleDetails", districtGradeScaleIDParameter, minValueParameter, maxValueParameter, gradeParameter, descriptionParameter, validForGPAParameter, districtIDParameter, gradePointsParameter, isEarnsCreditParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictGradeScaleToSchools(Nullable<int> districtID, string districtGradeScaleName)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var districtGradeScaleNameParameter = districtGradeScaleName != null ?
                new ObjectParameter("DistrictGradeScaleName", districtGradeScaleName) :
                new ObjectParameter("DistrictGradeScaleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictGradeScaleToSchools", districtIDParameter, districtGradeScaleNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictPortal(string portalString, Nullable<int> districtID, Nullable<bool> canSchoolsUpdate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var portalStringParameter = portalString != null ?
                new ObjectParameter("PortalString", portalString) :
                new ObjectParameter("PortalString", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var canSchoolsUpdateParameter = canSchoolsUpdate.HasValue ?
                new ObjectParameter("CanSchoolsUpdate", canSchoolsUpdate) :
                new ObjectParameter("CanSchoolsUpdate", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictPortal", portalStringParameter, districtIDParameter, canSchoolsUpdateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictRegion(Nullable<int> districtId, string regionName, Nullable<int> coordinatorId, string counties, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("RegionName", regionName) :
                new ObjectParameter("RegionName", typeof(string));
    
            var coordinatorIdParameter = coordinatorId.HasValue ?
                new ObjectParameter("CoordinatorId", coordinatorId) :
                new ObjectParameter("CoordinatorId", typeof(int));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictRegion", districtIdParameter, regionNameParameter, coordinatorIdParameter, countiesParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictReportingPeriod(Nullable<int> districtCourseTermID, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseTermIDParameter = districtCourseTermID.HasValue ?
                new ObjectParameter("DistrictCourseTermID", districtCourseTermID) :
                new ObjectParameter("DistrictCourseTermID", typeof(int));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictReportingPeriod", districtCourseTermIDParameter, valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictSchoolYear(Nullable<int> districtID, Nullable<int> schoolYear, string abbrivation, Nullable<bool> isDefault, Nullable<System.DateTime> firstDay, Nullable<System.DateTime> lastday, string districtSchoolYearTerms, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var abbrivationParameter = abbrivation != null ?
                new ObjectParameter("Abbrivation", abbrivation) :
                new ObjectParameter("Abbrivation", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var firstDayParameter = firstDay.HasValue ?
                new ObjectParameter("FirstDay", firstDay) :
                new ObjectParameter("FirstDay", typeof(System.DateTime));
    
            var lastdayParameter = lastday.HasValue ?
                new ObjectParameter("Lastday", lastday) :
                new ObjectParameter("Lastday", typeof(System.DateTime));
    
            var districtSchoolYearTermsParameter = districtSchoolYearTerms != null ?
                new ObjectParameter("DistrictSchoolYearTerms", districtSchoolYearTerms) :
                new ObjectParameter("DistrictSchoolYearTerms", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictSchoolYear", districtIDParameter, schoolYearParameter, abbrivationParameter, isDefaultParameter, firstDayParameter, lastdayParameter, districtSchoolYearTermsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictStudentBanner(Nullable<int> districtID, string lineOneFields, string lineTwoFields, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var lineOneFieldsParameter = lineOneFields != null ?
                new ObjectParameter("lineOneFields", lineOneFields) :
                new ObjectParameter("lineOneFields", typeof(string));
    
            var lineTwoFieldsParameter = lineTwoFields != null ?
                new ObjectParameter("lineTwoFields", lineTwoFields) :
                new ObjectParameter("lineTwoFields", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictStudentBanner", districtIDParameter, lineOneFieldsParameter, lineTwoFieldsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDistrictTermsToSchools(string districtSchoolYearIDs, Nullable<int> schoolYearPL, string schoolIDs, Nullable<int> districtID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtSchoolYearIDsParameter = districtSchoolYearIDs != null ?
                new ObjectParameter("DistrictSchoolYearIDs", districtSchoolYearIDs) :
                new ObjectParameter("DistrictSchoolYearIDs", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var schoolIDsParameter = schoolIDs != null ?
                new ObjectParameter("SchoolIDs", schoolIDs) :
                new ObjectParameter("SchoolIDs", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDistrictTermsToSchools", districtSchoolYearIDsParameter, schoolYearPLParameter, schoolIDsParameter, districtIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDocumentatationURL(string documentationURL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var documentationURLParameter = documentationURL != null ?
                new ObjectParameter("DocumentationURL", documentationURL) :
                new ObjectParameter("DocumentationURL", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDocumentatationURL", documentationURLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertDocumentForStudentNote(Nullable<int> studentNoteId, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentNoteIdParameter = studentNoteId.HasValue ?
                new ObjectParameter("StudentNoteId", studentNoteId) :
                new ObjectParameter("StudentNoteId", typeof(int));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertDocumentForStudentNote", studentNoteIdParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspInsertDuplicateDistrictCourse(string districtCourseName, string districtCourseNumber, Nullable<int> districtId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDuplicateDistrictCourse", districtCourseNameParameter, districtCourseNumberParameter, districtIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertEMISData(Nullable<int> id, Nullable<System.DateTime> studentninthgradeenterdate, string birthplacestate, string birthplacecity, Nullable<bool> isconsidered, string countryofbirth, Nullable<bool> migrantorformerworker, Nullable<bool> regularandadequatenighttimeresidence, string kindergartenexperience, string tenativecourseschedule)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var studentninthgradeenterdateParameter = studentninthgradeenterdate.HasValue ?
                new ObjectParameter("studentninthgradeenterdate", studentninthgradeenterdate) :
                new ObjectParameter("studentninthgradeenterdate", typeof(System.DateTime));
    
            var birthplacestateParameter = birthplacestate != null ?
                new ObjectParameter("birthplacestate", birthplacestate) :
                new ObjectParameter("birthplacestate", typeof(string));
    
            var birthplacecityParameter = birthplacecity != null ?
                new ObjectParameter("birthplacecity", birthplacecity) :
                new ObjectParameter("birthplacecity", typeof(string));
    
            var isconsideredParameter = isconsidered.HasValue ?
                new ObjectParameter("isconsidered", isconsidered) :
                new ObjectParameter("isconsidered", typeof(bool));
    
            var countryofbirthParameter = countryofbirth != null ?
                new ObjectParameter("countryofbirth", countryofbirth) :
                new ObjectParameter("countryofbirth", typeof(string));
    
            var migrantorformerworkerParameter = migrantorformerworker.HasValue ?
                new ObjectParameter("migrantorformerworker", migrantorformerworker) :
                new ObjectParameter("migrantorformerworker", typeof(bool));
    
            var regularandadequatenighttimeresidenceParameter = regularandadequatenighttimeresidence.HasValue ?
                new ObjectParameter("regularandadequatenighttimeresidence", regularandadequatenighttimeresidence) :
                new ObjectParameter("regularandadequatenighttimeresidence", typeof(bool));
    
            var kindergartenexperienceParameter = kindergartenexperience != null ?
                new ObjectParameter("kindergartenexperience", kindergartenexperience) :
                new ObjectParameter("kindergartenexperience", typeof(string));
    
            var tenativecoursescheduleParameter = tenativecourseschedule != null ?
                new ObjectParameter("tenativecourseschedule", tenativecourseschedule) :
                new ObjectParameter("tenativecourseschedule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertEMISData", idParameter, studentninthgradeenterdateParameter, birthplacestateParameter, birthplacecityParameter, isconsideredParameter, countryofbirthParameter, migrantorformerworkerParameter, regularandadequatenighttimeresidenceParameter, kindergartenexperienceParameter, tenativecoursescheduleParameter);
        }
    
        public virtual int uspInsertEMISReportPeriodsBySchool(string report, string reportPeriod, string reportPeriodName, string reportFieldCodeArray, Nullable<long> schoolIRN)
        {
            var reportParameter = report != null ?
                new ObjectParameter("Report", report) :
                new ObjectParameter("Report", typeof(string));
    
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("ReportPeriod", reportPeriod) :
                new ObjectParameter("ReportPeriod", typeof(string));
    
            var reportPeriodNameParameter = reportPeriodName != null ?
                new ObjectParameter("ReportPeriodName", reportPeriodName) :
                new ObjectParameter("ReportPeriodName", typeof(string));
    
            var reportFieldCodeArrayParameter = reportFieldCodeArray != null ?
                new ObjectParameter("ReportFieldCodeArray", reportFieldCodeArray) :
                new ObjectParameter("ReportFieldCodeArray", typeof(string));
    
            var schoolIRNParameter = schoolIRN.HasValue ?
                new ObjectParameter("SchoolIRN", schoolIRN) :
                new ObjectParameter("SchoolIRN", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertEMISReportPeriodsBySchool", reportParameter, reportPeriodParameter, reportPeriodNameParameter, reportFieldCodeArrayParameter, schoolIRNParameter);
        }
    
        public virtual int uspInsertEnrollments(Nullable<int> studentid, string enrollmentdate, string enrollmentcode, string withdrwaldate, string withdrawlcode, Nullable<int> schoolid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var enrollmentdateParameter = enrollmentdate != null ?
                new ObjectParameter("enrollmentdate", enrollmentdate) :
                new ObjectParameter("enrollmentdate", typeof(string));
    
            var enrollmentcodeParameter = enrollmentcode != null ?
                new ObjectParameter("enrollmentcode", enrollmentcode) :
                new ObjectParameter("enrollmentcode", typeof(string));
    
            var withdrwaldateParameter = withdrwaldate != null ?
                new ObjectParameter("withdrwaldate", withdrwaldate) :
                new ObjectParameter("withdrwaldate", typeof(string));
    
            var withdrawlcodeParameter = withdrawlcode != null ?
                new ObjectParameter("withdrawlcode", withdrawlcode) :
                new ObjectParameter("withdrawlcode", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertEnrollments", studentidParameter, enrollmentdateParameter, enrollmentcodeParameter, withdrwaldateParameter, withdrawlcodeParameter, schoolidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertExceptionLog(Nullable<System.DateTime> logDate, string url, string message, string source, Nullable<int> personID, Nullable<int> schoolId, string registrationNumber)
        {
            var logDateParameter = logDate.HasValue ?
                new ObjectParameter("LogDate", logDate) :
                new ObjectParameter("LogDate", typeof(System.DateTime));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertExceptionLog", logDateParameter, urlParameter, messageParameter, sourceParameter, personIDParameter, schoolIdParameter, registrationNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertGiftedStudentInfo(Nullable<int> studentID, string resultsArray, Nullable<bool> isGifted)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var resultsArrayParameter = resultsArray != null ?
                new ObjectParameter("ResultsArray", resultsArray) :
                new ObjectParameter("ResultsArray", typeof(string));
    
            var isGiftedParameter = isGifted.HasValue ?
                new ObjectParameter("IsGifted", isGifted) :
                new ObjectParameter("IsGifted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertGiftedStudentInfo", studentIDParameter, resultsArrayParameter, isGiftedParameter);
        }
    
        public virtual int uspInsertGPADefinition(Nullable<int> districtid, Nullable<int> schoolid, string methodname, string methodtype, string description, string formula, string calctype, string gradescale, Nullable<System.DateTime> gradestatusdate, Nullable<bool> excludecourses, Nullable<bool> exciudegroups)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            var methodtypeParameter = methodtype != null ?
                new ObjectParameter("methodtype", methodtype) :
                new ObjectParameter("methodtype", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var formulaParameter = formula != null ?
                new ObjectParameter("formula", formula) :
                new ObjectParameter("formula", typeof(string));
    
            var calctypeParameter = calctype != null ?
                new ObjectParameter("calctype", calctype) :
                new ObjectParameter("calctype", typeof(string));
    
            var gradescaleParameter = gradescale != null ?
                new ObjectParameter("gradescale", gradescale) :
                new ObjectParameter("gradescale", typeof(string));
    
            var gradestatusdateParameter = gradestatusdate.HasValue ?
                new ObjectParameter("gradestatusdate", gradestatusdate) :
                new ObjectParameter("gradestatusdate", typeof(System.DateTime));
    
            var excludecoursesParameter = excludecourses.HasValue ?
                new ObjectParameter("excludecourses", excludecourses) :
                new ObjectParameter("excludecourses", typeof(bool));
    
            var exciudegroupsParameter = exciudegroups.HasValue ?
                new ObjectParameter("exciudegroups", exciudegroups) :
                new ObjectParameter("exciudegroups", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGPADefinition", districtidParameter, schoolidParameter, methodnameParameter, methodtypeParameter, descriptionParameter, formulaParameter, calctypeParameter, gradescaleParameter, gradestatusdateParameter, excludecoursesParameter, exciudegroupsParameter);
        }
    
        public virtual int uspInsertGradeMethods(string methodname, string methodtype)
        {
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            var methodtypeParameter = methodtype != null ?
                new ObjectParameter("methodtype", methodtype) :
                new ObjectParameter("methodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGradeMethods", methodnameParameter, methodtypeParameter);
        }
    
        public virtual int uspInsertGradeScaleDetails(Nullable<int> districtid, Nullable<int> schoolid, string gradeLetter, string fromvalue, string tovalue, string gradestatus, Nullable<bool> includeintranscript, Nullable<bool> includeinGPA, string courseindicator, Nullable<bool> includeinwithdraw)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var gradeLetterParameter = gradeLetter != null ?
                new ObjectParameter("gradeLetter", gradeLetter) :
                new ObjectParameter("gradeLetter", typeof(string));
    
            var fromvalueParameter = fromvalue != null ?
                new ObjectParameter("fromvalue", fromvalue) :
                new ObjectParameter("fromvalue", typeof(string));
    
            var tovalueParameter = tovalue != null ?
                new ObjectParameter("tovalue", tovalue) :
                new ObjectParameter("tovalue", typeof(string));
    
            var gradestatusParameter = gradestatus != null ?
                new ObjectParameter("gradestatus", gradestatus) :
                new ObjectParameter("gradestatus", typeof(string));
    
            var includeintranscriptParameter = includeintranscript.HasValue ?
                new ObjectParameter("includeintranscript", includeintranscript) :
                new ObjectParameter("includeintranscript", typeof(bool));
    
            var includeinGPAParameter = includeinGPA.HasValue ?
                new ObjectParameter("includeinGPA", includeinGPA) :
                new ObjectParameter("includeinGPA", typeof(bool));
    
            var courseindicatorParameter = courseindicator != null ?
                new ObjectParameter("courseindicator", courseindicator) :
                new ObjectParameter("courseindicator", typeof(string));
    
            var includeinwithdrawParameter = includeinwithdraw.HasValue ?
                new ObjectParameter("includeinwithdraw", includeinwithdraw) :
                new ObjectParameter("includeinwithdraw", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertGradeScaleDetails", districtidParameter, schoolidParameter, gradeLetterParameter, fromvalueParameter, tovalueParameter, gradestatusParameter, includeintranscriptParameter, includeinGPAParameter, courseindicatorParameter, includeinwithdrawParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertGradReqAssessment(Nullable<int> gradReqID, Nullable<int> assessmentTypePL, string subjects, string minimumPoints, Nullable<decimal> totalRequiredPoints, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var assessmentTypePLParameter = assessmentTypePL.HasValue ?
                new ObjectParameter("AssessmentTypePL", assessmentTypePL) :
                new ObjectParameter("AssessmentTypePL", typeof(int));
    
            var subjectsParameter = subjects != null ?
                new ObjectParameter("Subjects", subjects) :
                new ObjectParameter("Subjects", typeof(string));
    
            var minimumPointsParameter = minimumPoints != null ?
                new ObjectParameter("MinimumPoints", minimumPoints) :
                new ObjectParameter("MinimumPoints", typeof(string));
    
            var totalRequiredPointsParameter = totalRequiredPoints.HasValue ?
                new ObjectParameter("TotalRequiredPoints", totalRequiredPoints) :
                new ObjectParameter("TotalRequiredPoints", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertGradReqAssessment", gradReqIDParameter, assessmentTypePLParameter, subjectsParameter, minimumPointsParameter, totalRequiredPointsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertGradReqAssessmentArea(string gradReqSubjects, string assessmentAreaPLs, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var gradReqSubjectsParameter = gradReqSubjects != null ?
                new ObjectParameter("GradReqSubjects", gradReqSubjects) :
                new ObjectParameter("GradReqSubjects", typeof(string));
    
            var assessmentAreaPLsParameter = assessmentAreaPLs != null ?
                new ObjectParameter("AssessmentAreaPLs", assessmentAreaPLs) :
                new ObjectParameter("AssessmentAreaPLs", typeof(string));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertGradReqAssessmentArea", gradReqSubjectsParameter, assessmentAreaPLsParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertGradReqSubject(Nullable<int> gradReqID, string gradCode, string subject, Nullable<decimal> credits, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBY, Nullable<System.DateTime> createdDate, Nullable<int> displayOrder)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var gradCodeParameter = gradCode != null ?
                new ObjectParameter("GradCode", gradCode) :
                new ObjectParameter("GradCode", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("Credits", credits) :
                new ObjectParameter("Credits", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertGradReqSubject", gradReqIDParameter, gradCodeParameter, subjectParameter, creditsParameter, startDateParameter, endDateParameter, createdBYParameter, createdDateParameter, displayOrderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertGradRequirement(Nullable<int> schoolID, string title, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertGradRequirement", schoolIDParameter, titleParameter, startDateParameter, endDateParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertHomeroom(string homeroomName, Nullable<int> roomID, string staffDetails, Nullable<int> maxSeats, Nullable<int> actualSeats, string startDate, string endDate, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var homeroomNameParameter = homeroomName != null ?
                new ObjectParameter("HomeroomName", homeroomName) :
                new ObjectParameter("HomeroomName", typeof(string));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var maxSeatsParameter = maxSeats.HasValue ?
                new ObjectParameter("MaxSeats", maxSeats) :
                new ObjectParameter("MaxSeats", typeof(int));
    
            var actualSeatsParameter = actualSeats.HasValue ?
                new ObjectParameter("ActualSeats", actualSeats) :
                new ObjectParameter("ActualSeats", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertHomeroom", homeroomNameParameter, roomIDParameter, staffDetailsParameter, maxSeatsParameter, actualSeatsParameter, startDateParameter, endDateParameter, schoolIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertHomeroomStaff(Nullable<int> homeroomId, string staffDetails, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var homeroomIdParameter = homeroomId.HasValue ?
                new ObjectParameter("HomeroomId", homeroomId) :
                new ObjectParameter("HomeroomId", typeof(int));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertHomeroomStaff", homeroomIdParameter, staffDetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertINTOSchoolEvents(Nullable<int> eventID, Nullable<int> schoolID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string eventType, string eventDescription, Nullable<int> days, Nullable<bool> isActive, string createdBy, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertINTOSchoolEvents", eventIDParameter, schoolIDParameter, startDateParameter, endDateParameter, eventTypeParameter, eventDescriptionParameter, daysParameter, isActiveParameter, createdByParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertLoginDetails(string username, Nullable<System.DateTime> loginDate)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var loginDateParameter = loginDate.HasValue ?
                new ObjectParameter("LoginDate", loginDate) :
                new ObjectParameter("LoginDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertLoginDetails", usernameParameter, loginDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertMenuPrivileges(string users, string roles, string menuidsArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var usersParameter = users != null ?
                new ObjectParameter("Users", users) :
                new ObjectParameter("Users", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var menuidsArrayParameter = menuidsArray != null ?
                new ObjectParameter("MenuidsArray", menuidsArray) :
                new ObjectParameter("MenuidsArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertMenuPrivileges", usersParameter, rolesParameter, menuidsArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertMenuPrivilegesByRole(Nullable<int> roleid, string mainmenuids, string submenuids, string tabids, string menuprivilegesstring)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var mainmenuidsParameter = mainmenuids != null ?
                new ObjectParameter("mainmenuids", mainmenuids) :
                new ObjectParameter("mainmenuids", typeof(string));
    
            var submenuidsParameter = submenuids != null ?
                new ObjectParameter("submenuids", submenuids) :
                new ObjectParameter("submenuids", typeof(string));
    
            var tabidsParameter = tabids != null ?
                new ObjectParameter("tabids", tabids) :
                new ObjectParameter("tabids", typeof(string));
    
            var menuprivilegesstringParameter = menuprivilegesstring != null ?
                new ObjectParameter("menuprivilegesstring", menuprivilegesstring) :
                new ObjectParameter("menuprivilegesstring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertMenuPrivilegesByRole", roleidParameter, mainmenuidsParameter, submenuidsParameter, tabidsParameter, menuprivilegesstringParameter);
        }
    
        public virtual int uspInsertMenuPrivilegesByRole_Backup(Nullable<int> roleid, string mainmenuids, string submenuids, string tabids, string menuprivilegesstring)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var mainmenuidsParameter = mainmenuids != null ?
                new ObjectParameter("mainmenuids", mainmenuids) :
                new ObjectParameter("mainmenuids", typeof(string));
    
            var submenuidsParameter = submenuids != null ?
                new ObjectParameter("submenuids", submenuids) :
                new ObjectParameter("submenuids", typeof(string));
    
            var tabidsParameter = tabids != null ?
                new ObjectParameter("tabids", tabids) :
                new ObjectParameter("tabids", typeof(string));
    
            var menuprivilegesstringParameter = menuprivilegesstring != null ?
                new ObjectParameter("menuprivilegesstring", menuprivilegesstring) :
                new ObjectParameter("menuprivilegesstring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertMenuPrivilegesByRole_Backup", roleidParameter, mainmenuidsParameter, submenuidsParameter, tabidsParameter, menuprivilegesstringParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertMultipleContactDetails(Nullable<int> applicationid, Nullable<int> childlivesewith, string primarycontactlastname, string primarycontactfirstname, Nullable<int> primarycontactrelationshipwithstudent, Nullable<bool> primaryiscontactlegalcustodianofstudent1, Nullable<bool> primarysameasstudentaddress, string primarycontactstreetnumber, string primarycontactstreetname, string primarycontactcountry, string primarycontactcounty, string primarycontactneighbourhood, string primarycontactstate, string primarycontactcity, string primarycontactzipcode, string primarycontactapartment, string primarycontactlot, string primarycontactother, string primaryemailaddress, Nullable<bool> primaryphonesameasstudentphone, Nullable<bool> primaryisprivatecontact, string primarycontactphonenumber, Nullable<bool> primaryisprivatealtcontact, string primarycontactalternatephonenumber, Nullable<int> primaryphonenumtype, Nullable<int> primaryaltphonenumtype, Nullable<int> primarypriority, string secondarycontactlastname, string secondarycontactfirstname, Nullable<int> secondarycontactrelationshipwithstudent, Nullable<bool> secondaryiscontactlegalcustodianofstudent1, Nullable<bool> secondarysameasstudentaddress, string secondarycontactstreetnumber, string secondarycontactstreetname, string secondarycontactcountry, string secondarycontactcounty, string secondarycontactneighbourhood, string secondarycontactstate, string secondarycontactcity, string secondarycontactzipcode, string secondarycontactapartment, string secondarycontactlot, string secondarycontactother, string secondaryemailaddress, Nullable<bool> secondaryphonesameasstudentphone, Nullable<bool> secondaryisprivatecontact, string secondarycontactphonenumber, Nullable<bool> secondaryisprivatealtcontact, string secondarycontactalternatephonenumber, Nullable<int> secondaryphonenumtype, Nullable<int> secondaryaltphonenumtype, Nullable<int> secondarypriority, string primaryContactMiddleName, string secondaryContactMiddleName, Nullable<int> primaryPrefix, Nullable<int> secondaryPrefix, Nullable<int> primarySuffix, Nullable<int> secondarySuffix, Nullable<bool> primaryIsConstactLegalGuardianOfStudent, Nullable<bool> secondaryIsTheContactTheLegalGuardianOfTheStudent, string primaryPhoneExtn, string secondaryPhoneExtn, string primaryPhoneAlternateExtn, string secondaryPhoneAlternateExtn, Nullable<int> primaryEmailType, Nullable<int> secondaryEmailType, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var childlivesewithParameter = childlivesewith.HasValue ?
                new ObjectParameter("childlivesewith", childlivesewith) :
                new ObjectParameter("childlivesewith", typeof(int));
    
            var primarycontactlastnameParameter = primarycontactlastname != null ?
                new ObjectParameter("primarycontactlastname", primarycontactlastname) :
                new ObjectParameter("primarycontactlastname", typeof(string));
    
            var primarycontactfirstnameParameter = primarycontactfirstname != null ?
                new ObjectParameter("primarycontactfirstname", primarycontactfirstname) :
                new ObjectParameter("primarycontactfirstname", typeof(string));
    
            var primarycontactrelationshipwithstudentParameter = primarycontactrelationshipwithstudent.HasValue ?
                new ObjectParameter("primarycontactrelationshipwithstudent", primarycontactrelationshipwithstudent) :
                new ObjectParameter("primarycontactrelationshipwithstudent", typeof(int));
    
            var primaryiscontactlegalcustodianofstudent1Parameter = primaryiscontactlegalcustodianofstudent1.HasValue ?
                new ObjectParameter("primaryiscontactlegalcustodianofstudent1", primaryiscontactlegalcustodianofstudent1) :
                new ObjectParameter("primaryiscontactlegalcustodianofstudent1", typeof(bool));
    
            var primarysameasstudentaddressParameter = primarysameasstudentaddress.HasValue ?
                new ObjectParameter("primarysameasstudentaddress", primarysameasstudentaddress) :
                new ObjectParameter("primarysameasstudentaddress", typeof(bool));
    
            var primarycontactstreetnumberParameter = primarycontactstreetnumber != null ?
                new ObjectParameter("primarycontactstreetnumber", primarycontactstreetnumber) :
                new ObjectParameter("primarycontactstreetnumber", typeof(string));
    
            var primarycontactstreetnameParameter = primarycontactstreetname != null ?
                new ObjectParameter("primarycontactstreetname", primarycontactstreetname) :
                new ObjectParameter("primarycontactstreetname", typeof(string));
    
            var primarycontactcountryParameter = primarycontactcountry != null ?
                new ObjectParameter("primarycontactcountry", primarycontactcountry) :
                new ObjectParameter("primarycontactcountry", typeof(string));
    
            var primarycontactcountyParameter = primarycontactcounty != null ?
                new ObjectParameter("primarycontactcounty", primarycontactcounty) :
                new ObjectParameter("primarycontactcounty", typeof(string));
    
            var primarycontactneighbourhoodParameter = primarycontactneighbourhood != null ?
                new ObjectParameter("primarycontactneighbourhood", primarycontactneighbourhood) :
                new ObjectParameter("primarycontactneighbourhood", typeof(string));
    
            var primarycontactstateParameter = primarycontactstate != null ?
                new ObjectParameter("primarycontactstate", primarycontactstate) :
                new ObjectParameter("primarycontactstate", typeof(string));
    
            var primarycontactcityParameter = primarycontactcity != null ?
                new ObjectParameter("primarycontactcity", primarycontactcity) :
                new ObjectParameter("primarycontactcity", typeof(string));
    
            var primarycontactzipcodeParameter = primarycontactzipcode != null ?
                new ObjectParameter("primarycontactzipcode", primarycontactzipcode) :
                new ObjectParameter("primarycontactzipcode", typeof(string));
    
            var primarycontactapartmentParameter = primarycontactapartment != null ?
                new ObjectParameter("primarycontactapartment", primarycontactapartment) :
                new ObjectParameter("primarycontactapartment", typeof(string));
    
            var primarycontactlotParameter = primarycontactlot != null ?
                new ObjectParameter("primarycontactlot", primarycontactlot) :
                new ObjectParameter("primarycontactlot", typeof(string));
    
            var primarycontactotherParameter = primarycontactother != null ?
                new ObjectParameter("primarycontactother", primarycontactother) :
                new ObjectParameter("primarycontactother", typeof(string));
    
            var primaryemailaddressParameter = primaryemailaddress != null ?
                new ObjectParameter("primaryemailaddress", primaryemailaddress) :
                new ObjectParameter("primaryemailaddress", typeof(string));
    
            var primaryphonesameasstudentphoneParameter = primaryphonesameasstudentphone.HasValue ?
                new ObjectParameter("primaryphonesameasstudentphone", primaryphonesameasstudentphone) :
                new ObjectParameter("primaryphonesameasstudentphone", typeof(bool));
    
            var primaryisprivatecontactParameter = primaryisprivatecontact.HasValue ?
                new ObjectParameter("primaryisprivatecontact", primaryisprivatecontact) :
                new ObjectParameter("primaryisprivatecontact", typeof(bool));
    
            var primarycontactphonenumberParameter = primarycontactphonenumber != null ?
                new ObjectParameter("primarycontactphonenumber", primarycontactphonenumber) :
                new ObjectParameter("primarycontactphonenumber", typeof(string));
    
            var primaryisprivatealtcontactParameter = primaryisprivatealtcontact.HasValue ?
                new ObjectParameter("primaryisprivatealtcontact", primaryisprivatealtcontact) :
                new ObjectParameter("primaryisprivatealtcontact", typeof(bool));
    
            var primarycontactalternatephonenumberParameter = primarycontactalternatephonenumber != null ?
                new ObjectParameter("primarycontactalternatephonenumber", primarycontactalternatephonenumber) :
                new ObjectParameter("primarycontactalternatephonenumber", typeof(string));
    
            var primaryphonenumtypeParameter = primaryphonenumtype.HasValue ?
                new ObjectParameter("primaryphonenumtype", primaryphonenumtype) :
                new ObjectParameter("primaryphonenumtype", typeof(int));
    
            var primaryaltphonenumtypeParameter = primaryaltphonenumtype.HasValue ?
                new ObjectParameter("primaryaltphonenumtype", primaryaltphonenumtype) :
                new ObjectParameter("primaryaltphonenumtype", typeof(int));
    
            var primarypriorityParameter = primarypriority.HasValue ?
                new ObjectParameter("primarypriority", primarypriority) :
                new ObjectParameter("primarypriority", typeof(int));
    
            var secondarycontactlastnameParameter = secondarycontactlastname != null ?
                new ObjectParameter("secondarycontactlastname", secondarycontactlastname) :
                new ObjectParameter("secondarycontactlastname", typeof(string));
    
            var secondarycontactfirstnameParameter = secondarycontactfirstname != null ?
                new ObjectParameter("secondarycontactfirstname", secondarycontactfirstname) :
                new ObjectParameter("secondarycontactfirstname", typeof(string));
    
            var secondarycontactrelationshipwithstudentParameter = secondarycontactrelationshipwithstudent.HasValue ?
                new ObjectParameter("secondarycontactrelationshipwithstudent", secondarycontactrelationshipwithstudent) :
                new ObjectParameter("secondarycontactrelationshipwithstudent", typeof(int));
    
            var secondaryiscontactlegalcustodianofstudent1Parameter = secondaryiscontactlegalcustodianofstudent1.HasValue ?
                new ObjectParameter("secondaryiscontactlegalcustodianofstudent1", secondaryiscontactlegalcustodianofstudent1) :
                new ObjectParameter("secondaryiscontactlegalcustodianofstudent1", typeof(bool));
    
            var secondarysameasstudentaddressParameter = secondarysameasstudentaddress.HasValue ?
                new ObjectParameter("secondarysameasstudentaddress", secondarysameasstudentaddress) :
                new ObjectParameter("secondarysameasstudentaddress", typeof(bool));
    
            var secondarycontactstreetnumberParameter = secondarycontactstreetnumber != null ?
                new ObjectParameter("secondarycontactstreetnumber", secondarycontactstreetnumber) :
                new ObjectParameter("secondarycontactstreetnumber", typeof(string));
    
            var secondarycontactstreetnameParameter = secondarycontactstreetname != null ?
                new ObjectParameter("secondarycontactstreetname", secondarycontactstreetname) :
                new ObjectParameter("secondarycontactstreetname", typeof(string));
    
            var secondarycontactcountryParameter = secondarycontactcountry != null ?
                new ObjectParameter("secondarycontactcountry", secondarycontactcountry) :
                new ObjectParameter("secondarycontactcountry", typeof(string));
    
            var secondarycontactcountyParameter = secondarycontactcounty != null ?
                new ObjectParameter("secondarycontactcounty", secondarycontactcounty) :
                new ObjectParameter("secondarycontactcounty", typeof(string));
    
            var secondarycontactneighbourhoodParameter = secondarycontactneighbourhood != null ?
                new ObjectParameter("secondarycontactneighbourhood", secondarycontactneighbourhood) :
                new ObjectParameter("secondarycontactneighbourhood", typeof(string));
    
            var secondarycontactstateParameter = secondarycontactstate != null ?
                new ObjectParameter("secondarycontactstate", secondarycontactstate) :
                new ObjectParameter("secondarycontactstate", typeof(string));
    
            var secondarycontactcityParameter = secondarycontactcity != null ?
                new ObjectParameter("secondarycontactcity", secondarycontactcity) :
                new ObjectParameter("secondarycontactcity", typeof(string));
    
            var secondarycontactzipcodeParameter = secondarycontactzipcode != null ?
                new ObjectParameter("secondarycontactzipcode", secondarycontactzipcode) :
                new ObjectParameter("secondarycontactzipcode", typeof(string));
    
            var secondarycontactapartmentParameter = secondarycontactapartment != null ?
                new ObjectParameter("secondarycontactapartment", secondarycontactapartment) :
                new ObjectParameter("secondarycontactapartment", typeof(string));
    
            var secondarycontactlotParameter = secondarycontactlot != null ?
                new ObjectParameter("secondarycontactlot", secondarycontactlot) :
                new ObjectParameter("secondarycontactlot", typeof(string));
    
            var secondarycontactotherParameter = secondarycontactother != null ?
                new ObjectParameter("secondarycontactother", secondarycontactother) :
                new ObjectParameter("secondarycontactother", typeof(string));
    
            var secondaryemailaddressParameter = secondaryemailaddress != null ?
                new ObjectParameter("secondaryemailaddress", secondaryemailaddress) :
                new ObjectParameter("secondaryemailaddress", typeof(string));
    
            var secondaryphonesameasstudentphoneParameter = secondaryphonesameasstudentphone.HasValue ?
                new ObjectParameter("secondaryphonesameasstudentphone", secondaryphonesameasstudentphone) :
                new ObjectParameter("secondaryphonesameasstudentphone", typeof(bool));
    
            var secondaryisprivatecontactParameter = secondaryisprivatecontact.HasValue ?
                new ObjectParameter("secondaryisprivatecontact", secondaryisprivatecontact) :
                new ObjectParameter("secondaryisprivatecontact", typeof(bool));
    
            var secondarycontactphonenumberParameter = secondarycontactphonenumber != null ?
                new ObjectParameter("secondarycontactphonenumber", secondarycontactphonenumber) :
                new ObjectParameter("secondarycontactphonenumber", typeof(string));
    
            var secondaryisprivatealtcontactParameter = secondaryisprivatealtcontact.HasValue ?
                new ObjectParameter("secondaryisprivatealtcontact", secondaryisprivatealtcontact) :
                new ObjectParameter("secondaryisprivatealtcontact", typeof(bool));
    
            var secondarycontactalternatephonenumberParameter = secondarycontactalternatephonenumber != null ?
                new ObjectParameter("secondarycontactalternatephonenumber", secondarycontactalternatephonenumber) :
                new ObjectParameter("secondarycontactalternatephonenumber", typeof(string));
    
            var secondaryphonenumtypeParameter = secondaryphonenumtype.HasValue ?
                new ObjectParameter("secondaryphonenumtype", secondaryphonenumtype) :
                new ObjectParameter("secondaryphonenumtype", typeof(int));
    
            var secondaryaltphonenumtypeParameter = secondaryaltphonenumtype.HasValue ?
                new ObjectParameter("secondaryaltphonenumtype", secondaryaltphonenumtype) :
                new ObjectParameter("secondaryaltphonenumtype", typeof(int));
    
            var secondarypriorityParameter = secondarypriority.HasValue ?
                new ObjectParameter("secondarypriority", secondarypriority) :
                new ObjectParameter("secondarypriority", typeof(int));
    
            var primaryContactMiddleNameParameter = primaryContactMiddleName != null ?
                new ObjectParameter("PrimaryContactMiddleName", primaryContactMiddleName) :
                new ObjectParameter("PrimaryContactMiddleName", typeof(string));
    
            var secondaryContactMiddleNameParameter = secondaryContactMiddleName != null ?
                new ObjectParameter("SecondaryContactMiddleName", secondaryContactMiddleName) :
                new ObjectParameter("SecondaryContactMiddleName", typeof(string));
    
            var primaryPrefixParameter = primaryPrefix.HasValue ?
                new ObjectParameter("PrimaryPrefix", primaryPrefix) :
                new ObjectParameter("PrimaryPrefix", typeof(int));
    
            var secondaryPrefixParameter = secondaryPrefix.HasValue ?
                new ObjectParameter("SecondaryPrefix", secondaryPrefix) :
                new ObjectParameter("SecondaryPrefix", typeof(int));
    
            var primarySuffixParameter = primarySuffix.HasValue ?
                new ObjectParameter("PrimarySuffix", primarySuffix) :
                new ObjectParameter("PrimarySuffix", typeof(int));
    
            var secondarySuffixParameter = secondarySuffix.HasValue ?
                new ObjectParameter("SecondarySuffix", secondarySuffix) :
                new ObjectParameter("SecondarySuffix", typeof(int));
    
            var primaryIsConstactLegalGuardianOfStudentParameter = primaryIsConstactLegalGuardianOfStudent.HasValue ?
                new ObjectParameter("PrimaryIsConstactLegalGuardianOfStudent", primaryIsConstactLegalGuardianOfStudent) :
                new ObjectParameter("PrimaryIsConstactLegalGuardianOfStudent", typeof(bool));
    
            var secondaryIsTheContactTheLegalGuardianOfTheStudentParameter = secondaryIsTheContactTheLegalGuardianOfTheStudent.HasValue ?
                new ObjectParameter("SecondaryIsTheContactTheLegalGuardianOfTheStudent", secondaryIsTheContactTheLegalGuardianOfTheStudent) :
                new ObjectParameter("SecondaryIsTheContactTheLegalGuardianOfTheStudent", typeof(bool));
    
            var primaryPhoneExtnParameter = primaryPhoneExtn != null ?
                new ObjectParameter("PrimaryPhoneExtn", primaryPhoneExtn) :
                new ObjectParameter("PrimaryPhoneExtn", typeof(string));
    
            var secondaryPhoneExtnParameter = secondaryPhoneExtn != null ?
                new ObjectParameter("SecondaryPhoneExtn", secondaryPhoneExtn) :
                new ObjectParameter("SecondaryPhoneExtn", typeof(string));
    
            var primaryPhoneAlternateExtnParameter = primaryPhoneAlternateExtn != null ?
                new ObjectParameter("PrimaryPhoneAlternateExtn", primaryPhoneAlternateExtn) :
                new ObjectParameter("PrimaryPhoneAlternateExtn", typeof(string));
    
            var secondaryPhoneAlternateExtnParameter = secondaryPhoneAlternateExtn != null ?
                new ObjectParameter("SecondaryPhoneAlternateExtn", secondaryPhoneAlternateExtn) :
                new ObjectParameter("SecondaryPhoneAlternateExtn", typeof(string));
    
            var primaryEmailTypeParameter = primaryEmailType.HasValue ?
                new ObjectParameter("PrimaryEmailType", primaryEmailType) :
                new ObjectParameter("PrimaryEmailType", typeof(int));
    
            var secondaryEmailTypeParameter = secondaryEmailType.HasValue ?
                new ObjectParameter("SecondaryEmailType", secondaryEmailType) :
                new ObjectParameter("SecondaryEmailType", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertMultipleContactDetails", applicationidParameter, childlivesewithParameter, primarycontactlastnameParameter, primarycontactfirstnameParameter, primarycontactrelationshipwithstudentParameter, primaryiscontactlegalcustodianofstudent1Parameter, primarysameasstudentaddressParameter, primarycontactstreetnumberParameter, primarycontactstreetnameParameter, primarycontactcountryParameter, primarycontactcountyParameter, primarycontactneighbourhoodParameter, primarycontactstateParameter, primarycontactcityParameter, primarycontactzipcodeParameter, primarycontactapartmentParameter, primarycontactlotParameter, primarycontactotherParameter, primaryemailaddressParameter, primaryphonesameasstudentphoneParameter, primaryisprivatecontactParameter, primarycontactphonenumberParameter, primaryisprivatealtcontactParameter, primarycontactalternatephonenumberParameter, primaryphonenumtypeParameter, primaryaltphonenumtypeParameter, primarypriorityParameter, secondarycontactlastnameParameter, secondarycontactfirstnameParameter, secondarycontactrelationshipwithstudentParameter, secondaryiscontactlegalcustodianofstudent1Parameter, secondarysameasstudentaddressParameter, secondarycontactstreetnumberParameter, secondarycontactstreetnameParameter, secondarycontactcountryParameter, secondarycontactcountyParameter, secondarycontactneighbourhoodParameter, secondarycontactstateParameter, secondarycontactcityParameter, secondarycontactzipcodeParameter, secondarycontactapartmentParameter, secondarycontactlotParameter, secondarycontactotherParameter, secondaryemailaddressParameter, secondaryphonesameasstudentphoneParameter, secondaryisprivatecontactParameter, secondarycontactphonenumberParameter, secondaryisprivatealtcontactParameter, secondarycontactalternatephonenumberParameter, secondaryphonenumtypeParameter, secondaryaltphonenumtypeParameter, secondarypriorityParameter, primaryContactMiddleNameParameter, secondaryContactMiddleNameParameter, primaryPrefixParameter, secondaryPrefixParameter, primarySuffixParameter, secondarySuffixParameter, primaryIsConstactLegalGuardianOfStudentParameter, secondaryIsTheContactTheLegalGuardianOfTheStudentParameter, primaryPhoneExtnParameter, secondaryPhoneExtnParameter, primaryPhoneAlternateExtnParameter, secondaryPhoneAlternateExtnParameter, primaryEmailTypeParameter, secondaryEmailTypeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertNewDistrict(Nullable<int> districttypeid, string districtirn, string districtname, Nullable<bool> excludefromstatereporting, byte[] districtpicture, byte[] districtlogo, string districtaddresstypes, string districtstreetnumbers, string districtstreetnames, string districtcities, string districtstates, string districtcountries, string districtzipcodes, string districtcounties, string districtneighbourhoods, string districtaddressids, string districtphones, string districtphonetypes, Nullable<bool> isevolvedistrict, string faxnumber, string recordsemail, string createdby, Nullable<System.DateTime> createddate)
        {
            var districttypeidParameter = districttypeid.HasValue ?
                new ObjectParameter("districttypeid", districttypeid) :
                new ObjectParameter("districttypeid", typeof(int));
    
            var districtirnParameter = districtirn != null ?
                new ObjectParameter("districtirn", districtirn) :
                new ObjectParameter("districtirn", typeof(string));
    
            var districtnameParameter = districtname != null ?
                new ObjectParameter("districtname", districtname) :
                new ObjectParameter("districtname", typeof(string));
    
            var excludefromstatereportingParameter = excludefromstatereporting.HasValue ?
                new ObjectParameter("excludefromstatereporting", excludefromstatereporting) :
                new ObjectParameter("excludefromstatereporting", typeof(bool));
    
            var districtpictureParameter = districtpicture != null ?
                new ObjectParameter("districtpicture", districtpicture) :
                new ObjectParameter("districtpicture", typeof(byte[]));
    
            var districtlogoParameter = districtlogo != null ?
                new ObjectParameter("districtlogo", districtlogo) :
                new ObjectParameter("districtlogo", typeof(byte[]));
    
            var districtaddresstypesParameter = districtaddresstypes != null ?
                new ObjectParameter("districtaddresstypes", districtaddresstypes) :
                new ObjectParameter("districtaddresstypes", typeof(string));
    
            var districtstreetnumbersParameter = districtstreetnumbers != null ?
                new ObjectParameter("districtstreetnumbers", districtstreetnumbers) :
                new ObjectParameter("districtstreetnumbers", typeof(string));
    
            var districtstreetnamesParameter = districtstreetnames != null ?
                new ObjectParameter("districtstreetnames", districtstreetnames) :
                new ObjectParameter("districtstreetnames", typeof(string));
    
            var districtcitiesParameter = districtcities != null ?
                new ObjectParameter("districtcities", districtcities) :
                new ObjectParameter("districtcities", typeof(string));
    
            var districtstatesParameter = districtstates != null ?
                new ObjectParameter("districtstates", districtstates) :
                new ObjectParameter("districtstates", typeof(string));
    
            var districtcountriesParameter = districtcountries != null ?
                new ObjectParameter("districtcountries", districtcountries) :
                new ObjectParameter("districtcountries", typeof(string));
    
            var districtzipcodesParameter = districtzipcodes != null ?
                new ObjectParameter("districtzipcodes", districtzipcodes) :
                new ObjectParameter("districtzipcodes", typeof(string));
    
            var districtcountiesParameter = districtcounties != null ?
                new ObjectParameter("districtcounties", districtcounties) :
                new ObjectParameter("districtcounties", typeof(string));
    
            var districtneighbourhoodsParameter = districtneighbourhoods != null ?
                new ObjectParameter("districtneighbourhoods", districtneighbourhoods) :
                new ObjectParameter("districtneighbourhoods", typeof(string));
    
            var districtaddressidsParameter = districtaddressids != null ?
                new ObjectParameter("districtaddressids", districtaddressids) :
                new ObjectParameter("districtaddressids", typeof(string));
    
            var districtphonesParameter = districtphones != null ?
                new ObjectParameter("districtphones", districtphones) :
                new ObjectParameter("districtphones", typeof(string));
    
            var districtphonetypesParameter = districtphonetypes != null ?
                new ObjectParameter("districtphonetypes", districtphonetypes) :
                new ObjectParameter("districtphonetypes", typeof(string));
    
            var isevolvedistrictParameter = isevolvedistrict.HasValue ?
                new ObjectParameter("isevolvedistrict", isevolvedistrict) :
                new ObjectParameter("isevolvedistrict", typeof(bool));
    
            var faxnumberParameter = faxnumber != null ?
                new ObjectParameter("faxnumber", faxnumber) :
                new ObjectParameter("faxnumber", typeof(string));
    
            var recordsemailParameter = recordsemail != null ?
                new ObjectParameter("recordsemail", recordsemail) :
                new ObjectParameter("recordsemail", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertNewDistrict", districttypeidParameter, districtirnParameter, districtnameParameter, excludefromstatereportingParameter, districtpictureParameter, districtlogoParameter, districtaddresstypesParameter, districtstreetnumbersParameter, districtstreetnamesParameter, districtcitiesParameter, districtstatesParameter, districtcountriesParameter, districtzipcodesParameter, districtcountiesParameter, districtneighbourhoodsParameter, districtaddressidsParameter, districtphonesParameter, districtphonetypesParameter, isevolvedistrictParameter, faxnumberParameter, recordsemailParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertOffenders(Nullable<int> offendertype, Nullable<int> studentstatus, Nullable<int> student, Nullable<int> gradelevel, string otheroffenderfullname, Nullable<int> age, Nullable<int> staff, Nullable<System.DateTime> actionstartdate, Nullable<System.DateTime> actionenddate, Nullable<int> actiontakentype, Nullable<int> suspensiondays, string actiondescription, Nullable<int> disciplineincidentid, string createdby, Nullable<System.DateTime> createddate)
        {
            var offendertypeParameter = offendertype.HasValue ?
                new ObjectParameter("offendertype", offendertype) :
                new ObjectParameter("offendertype", typeof(int));
    
            var studentstatusParameter = studentstatus.HasValue ?
                new ObjectParameter("studentstatus", studentstatus) :
                new ObjectParameter("studentstatus", typeof(int));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("student", student) :
                new ObjectParameter("student", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var otheroffenderfullnameParameter = otheroffenderfullname != null ?
                new ObjectParameter("otheroffenderfullname", otheroffenderfullname) :
                new ObjectParameter("otheroffenderfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var staffParameter = staff.HasValue ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(int));
    
            var actionstartdateParameter = actionstartdate.HasValue ?
                new ObjectParameter("actionstartdate", actionstartdate) :
                new ObjectParameter("actionstartdate", typeof(System.DateTime));
    
            var actionenddateParameter = actionenddate.HasValue ?
                new ObjectParameter("actionenddate", actionenddate) :
                new ObjectParameter("actionenddate", typeof(System.DateTime));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var suspensiondaysParameter = suspensiondays.HasValue ?
                new ObjectParameter("suspensiondays", suspensiondays) :
                new ObjectParameter("suspensiondays", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertOffenders", offendertypeParameter, studentstatusParameter, studentParameter, gradelevelParameter, otheroffenderfullnameParameter, ageParameter, staffParameter, actionstartdateParameter, actionenddateParameter, actiontakentypeParameter, suspensiondaysParameter, actiondescriptionParameter, disciplineincidentidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertOrganizationDetails(string organizationname, string orgaddress1, string orgaddress2, string orgzipcode, string orgcity, string orgstate, string orgcountry, string orgprimarycontactname, string orgprimarycontactemail, string orgphone, string orgadminusername, string orgsuperadminpasssword)
        {
            var organizationnameParameter = organizationname != null ?
                new ObjectParameter("organizationname", organizationname) :
                new ObjectParameter("organizationname", typeof(string));
    
            var orgaddress1Parameter = orgaddress1 != null ?
                new ObjectParameter("orgaddress1", orgaddress1) :
                new ObjectParameter("orgaddress1", typeof(string));
    
            var orgaddress2Parameter = orgaddress2 != null ?
                new ObjectParameter("orgaddress2", orgaddress2) :
                new ObjectParameter("orgaddress2", typeof(string));
    
            var orgzipcodeParameter = orgzipcode != null ?
                new ObjectParameter("orgzipcode", orgzipcode) :
                new ObjectParameter("orgzipcode", typeof(string));
    
            var orgcityParameter = orgcity != null ?
                new ObjectParameter("orgcity", orgcity) :
                new ObjectParameter("orgcity", typeof(string));
    
            var orgstateParameter = orgstate != null ?
                new ObjectParameter("orgstate", orgstate) :
                new ObjectParameter("orgstate", typeof(string));
    
            var orgcountryParameter = orgcountry != null ?
                new ObjectParameter("orgcountry", orgcountry) :
                new ObjectParameter("orgcountry", typeof(string));
    
            var orgprimarycontactnameParameter = orgprimarycontactname != null ?
                new ObjectParameter("orgprimarycontactname", orgprimarycontactname) :
                new ObjectParameter("orgprimarycontactname", typeof(string));
    
            var orgprimarycontactemailParameter = orgprimarycontactemail != null ?
                new ObjectParameter("orgprimarycontactemail", orgprimarycontactemail) :
                new ObjectParameter("orgprimarycontactemail", typeof(string));
    
            var orgphoneParameter = orgphone != null ?
                new ObjectParameter("orgphone", orgphone) :
                new ObjectParameter("orgphone", typeof(string));
    
            var orgadminusernameParameter = orgadminusername != null ?
                new ObjectParameter("orgadminusername", orgadminusername) :
                new ObjectParameter("orgadminusername", typeof(string));
    
            var orgsuperadminpassswordParameter = orgsuperadminpasssword != null ?
                new ObjectParameter("orgsuperadminpasssword", orgsuperadminpasssword) :
                new ObjectParameter("orgsuperadminpasssword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertOrganizationDetails", organizationnameParameter, orgaddress1Parameter, orgaddress2Parameter, orgzipcodeParameter, orgcityParameter, orgstateParameter, orgcountryParameter, orgprimarycontactnameParameter, orgprimarycontactemailParameter, orgphoneParameter, orgadminusernameParameter, orgsuperadminpassswordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertOrientationDetails(string orientationdate, string orientationtime, Nullable<int> orientationtypepl, Nullable<int> counselorid, Nullable<int> location, Nullable<int> room, Nullable<int> applicationid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var orientationdateParameter = orientationdate != null ?
                new ObjectParameter("orientationdate", orientationdate) :
                new ObjectParameter("orientationdate", typeof(string));
    
            var orientationtimeParameter = orientationtime != null ?
                new ObjectParameter("orientationtime", orientationtime) :
                new ObjectParameter("orientationtime", typeof(string));
    
            var orientationtypeplParameter = orientationtypepl.HasValue ?
                new ObjectParameter("orientationtypepl", orientationtypepl) :
                new ObjectParameter("orientationtypepl", typeof(int));
    
            var counseloridParameter = counselorid.HasValue ?
                new ObjectParameter("counselorid", counselorid) :
                new ObjectParameter("counselorid", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var roomParameter = room.HasValue ?
                new ObjectParameter("room", room) :
                new ObjectParameter("room", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertOrientationDetails", orientationdateParameter, orientationtimeParameter, orientationtypeplParameter, counseloridParameter, locationParameter, roomParameter, applicationidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPeriodDetails(string periodNumber, string periodName, Nullable<int> sortOrder, string abbreviation, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var periodNumberParameter = periodNumber != null ?
                new ObjectParameter("PeriodNumber", periodNumber) :
                new ObjectParameter("PeriodNumber", typeof(string));
    
            var periodNameParameter = periodName != null ?
                new ObjectParameter("PeriodName", periodName) :
                new ObjectParameter("PeriodName", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPeriodDetails", periodNumberParameter, periodNameParameter, sortOrderParameter, abbreviationParameter, schoolIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPickListCategoryAndDetails(Nullable<int> categoryID, string categoryName, string pickListCodeValuesArray, string sortType, string stateOrCore, string sortElement, string pickListDisplay, string constant, string createdby, Nullable<System.DateTime> createddate)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            var stateOrCoreParameter = stateOrCore != null ?
                new ObjectParameter("StateOrCore", stateOrCore) :
                new ObjectParameter("StateOrCore", typeof(string));
    
            var sortElementParameter = sortElement != null ?
                new ObjectParameter("SortElement", sortElement) :
                new ObjectParameter("SortElement", typeof(string));
    
            var pickListDisplayParameter = pickListDisplay != null ?
                new ObjectParameter("PickListDisplay", pickListDisplay) :
                new ObjectParameter("PickListDisplay", typeof(string));
    
            var constantParameter = constant != null ?
                new ObjectParameter("Constant", constant) :
                new ObjectParameter("Constant", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPickListCategoryAndDetails", categoryIDParameter, categoryNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter, stateOrCoreParameter, sortElementParameter, pickListDisplayParameter, constantParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPickListCodes(Nullable<int> categoryID, string categoryName, string pickListCodeValuesArray, string sortType)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPickListCodes", categoryIDParameter, categoryNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPickListCodeValues(Nullable<int> pickListCodeID, string pickListName, string pickListCodeValuesArray, string sortType)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            var pickListNameParameter = pickListName != null ?
                new ObjectParameter("PickListName", pickListName) :
                new ObjectParameter("PickListName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPickListCodeValues", pickListCodeIDParameter, pickListNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPickListDetails(Nullable<int> pickListCodeID, string pickListName, string pickListCodeValuesArray, string sortType, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            var pickListNameParameter = pickListName != null ?
                new ObjectParameter("PickListName", pickListName) :
                new ObjectParameter("PickListName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPickListDetails", pickListCodeIDParameter, pickListNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPickListDetailsNew(Nullable<int> pickListCodeID, string pickListName, string pickListCodeValuesArray, string sortType, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            var pickListNameParameter = pickListName != null ?
                new ObjectParameter("PickListName", pickListName) :
                new ObjectParameter("PickListName", typeof(string));
    
            var pickListCodeValuesArrayParameter = pickListCodeValuesArray != null ?
                new ObjectParameter("PickListCodeValuesArray", pickListCodeValuesArray) :
                new ObjectParameter("PickListCodeValuesArray", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("Createddate", createddate) :
                new ObjectParameter("Createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPickListDetailsNew", pickListCodeIDParameter, pickListNameParameter, pickListCodeValuesArrayParameter, sortTypeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalAccount(Nullable<int> portalAccountId, string lastName, string firstName, string middleName, string emailAddress, string userName, string password, string userType, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> securityQuestion1PL, string securityAnswer1, Nullable<int> securityQuestion2PL, string securityAnswer2)
        {
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType != null ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var securityQuestion1PLParameter = securityQuestion1PL.HasValue ?
                new ObjectParameter("SecurityQuestion1PL", securityQuestion1PL) :
                new ObjectParameter("SecurityQuestion1PL", typeof(int));
    
            var securityAnswer1Parameter = securityAnswer1 != null ?
                new ObjectParameter("SecurityAnswer1", securityAnswer1) :
                new ObjectParameter("SecurityAnswer1", typeof(string));
    
            var securityQuestion2PLParameter = securityQuestion2PL.HasValue ?
                new ObjectParameter("SecurityQuestion2PL", securityQuestion2PL) :
                new ObjectParameter("SecurityQuestion2PL", typeof(int));
    
            var securityAnswer2Parameter = securityAnswer2 != null ?
                new ObjectParameter("SecurityAnswer2", securityAnswer2) :
                new ObjectParameter("SecurityAnswer2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalAccount", portalAccountIdParameter, lastNameParameter, firstNameParameter, middleNameParameter, emailAddressParameter, userNameParameter, passwordParameter, userTypeParameter, isActiveParameter, createdByParameter, createdDateParameter, securityQuestion1PLParameter, securityAnswer1Parameter, securityQuestion2PLParameter, securityAnswer2Parameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalContactAddress(Nullable<int> studentID, Nullable<int> studentContactID, Nullable<int> currentAddressID, string streetNumber, string streetName, string city, string apartment, string lot, string other, string state, string postalCode, string county, string country, string subdivision, Nullable<int> submittedBy, Nullable<System.DateTime> startDate, string currentAddressEndDate, Nullable<int> portalContactAddressID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            var currentAddressIDParameter = currentAddressID.HasValue ?
                new ObjectParameter("CurrentAddressID", currentAddressID) :
                new ObjectParameter("CurrentAddressID", typeof(int));
    
            var streetNumberParameter = streetNumber != null ?
                new ObjectParameter("StreetNumber", streetNumber) :
                new ObjectParameter("StreetNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var apartmentParameter = apartment != null ?
                new ObjectParameter("Apartment", apartment) :
                new ObjectParameter("Apartment", typeof(string));
    
            var lotParameter = lot != null ?
                new ObjectParameter("Lot", lot) :
                new ObjectParameter("Lot", typeof(string));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var subdivisionParameter = subdivision != null ?
                new ObjectParameter("Subdivision", subdivision) :
                new ObjectParameter("Subdivision", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currentAddressEndDateParameter = currentAddressEndDate != null ?
                new ObjectParameter("CurrentAddressEndDate", currentAddressEndDate) :
                new ObjectParameter("CurrentAddressEndDate", typeof(string));
    
            var portalContactAddressIDParameter = portalContactAddressID.HasValue ?
                new ObjectParameter("PortalContactAddressID", portalContactAddressID) :
                new ObjectParameter("PortalContactAddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalContactAddress", studentIDParameter, studentContactIDParameter, currentAddressIDParameter, streetNumberParameter, streetNameParameter, cityParameter, apartmentParameter, lotParameter, otherParameter, stateParameter, postalCodeParameter, countyParameter, countryParameter, subdivisionParameter, submittedByParameter, startDateParameter, currentAddressEndDateParameter, portalContactAddressIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalLinkedStudent(Nullable<int> portalAccountID, string studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var portalAccountIDParameter = portalAccountID.HasValue ?
                new ObjectParameter("PortalAccountID", portalAccountID) :
                new ObjectParameter("PortalAccountID", typeof(int));
    
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalLinkedStudent", portalAccountIDParameter, studentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalStudentAddress(Nullable<int> studentID, Nullable<int> addressTypePL, Nullable<int> currentAddressID, string streetNumber, string streetName, string city, string apartment, string lot, string other, string state, string postalCode, string county, string country, string subdivision, string documentExtension, string documentSize, string documentType, string documentName, byte[] documentData, Nullable<int> submittedBy, Nullable<System.DateTime> startDate, string currentAddressEndDate, Nullable<int> portalStudentAddressID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var addressTypePLParameter = addressTypePL.HasValue ?
                new ObjectParameter("AddressTypePL", addressTypePL) :
                new ObjectParameter("AddressTypePL", typeof(int));
    
            var currentAddressIDParameter = currentAddressID.HasValue ?
                new ObjectParameter("CurrentAddressID", currentAddressID) :
                new ObjectParameter("CurrentAddressID", typeof(int));
    
            var streetNumberParameter = streetNumber != null ?
                new ObjectParameter("StreetNumber", streetNumber) :
                new ObjectParameter("StreetNumber", typeof(string));
    
            var streetNameParameter = streetName != null ?
                new ObjectParameter("StreetName", streetName) :
                new ObjectParameter("StreetName", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var apartmentParameter = apartment != null ?
                new ObjectParameter("Apartment", apartment) :
                new ObjectParameter("Apartment", typeof(string));
    
            var lotParameter = lot != null ?
                new ObjectParameter("Lot", lot) :
                new ObjectParameter("Lot", typeof(string));
    
            var otherParameter = other != null ?
                new ObjectParameter("Other", other) :
                new ObjectParameter("Other", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var subdivisionParameter = subdivision != null ?
                new ObjectParameter("Subdivision", subdivision) :
                new ObjectParameter("Subdivision", typeof(string));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currentAddressEndDateParameter = currentAddressEndDate != null ?
                new ObjectParameter("CurrentAddressEndDate", currentAddressEndDate) :
                new ObjectParameter("CurrentAddressEndDate", typeof(string));
    
            var portalStudentAddressIDParameter = portalStudentAddressID.HasValue ?
                new ObjectParameter("PortalStudentAddressID", portalStudentAddressID) :
                new ObjectParameter("PortalStudentAddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalStudentAddress", studentIDParameter, addressTypePLParameter, currentAddressIDParameter, streetNumberParameter, streetNameParameter, cityParameter, apartmentParameter, lotParameter, otherParameter, stateParameter, postalCodeParameter, countyParameter, countryParameter, subdivisionParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, documentDataParameter, submittedByParameter, startDateParameter, currentAddressEndDateParameter, portalStudentAddressIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalStudentContactPhone(Nullable<int> studentID, Nullable<int> currentContactId, Nullable<int> phoneTypePL, string countryCode, string phoneNumber, Nullable<int> submittedBy, Nullable<bool> unlisted, Nullable<System.DateTime> startDate, string endDate, Nullable<int> portalStudentContactPhoneID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var currentContactIdParameter = currentContactId.HasValue ?
                new ObjectParameter("CurrentContactId", currentContactId) :
                new ObjectParameter("CurrentContactId", typeof(int));
    
            var phoneTypePLParameter = phoneTypePL.HasValue ?
                new ObjectParameter("PhoneTypePL", phoneTypePL) :
                new ObjectParameter("PhoneTypePL", typeof(int));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var unlistedParameter = unlisted.HasValue ?
                new ObjectParameter("Unlisted", unlisted) :
                new ObjectParameter("Unlisted", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var portalStudentContactPhoneIDParameter = portalStudentContactPhoneID.HasValue ?
                new ObjectParameter("PortalStudentContactPhoneID", portalStudentContactPhoneID) :
                new ObjectParameter("PortalStudentContactPhoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalStudentContactPhone", studentIDParameter, currentContactIdParameter, phoneTypePLParameter, countryCodeParameter, phoneNumberParameter, submittedByParameter, unlistedParameter, startDateParameter, endDateParameter, portalStudentContactPhoneIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalStudentPhone(Nullable<int> studentID, Nullable<int> currentPhoneID, Nullable<int> phoneTypePL, string countryCode, string phoneNumber, Nullable<int> submittedBy, Nullable<bool> unlisted, Nullable<System.DateTime> startDate, string endDate, Nullable<int> portalStudentPhoneID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var currentPhoneIDParameter = currentPhoneID.HasValue ?
                new ObjectParameter("CurrentPhoneID", currentPhoneID) :
                new ObjectParameter("CurrentPhoneID", typeof(int));
    
            var phoneTypePLParameter = phoneTypePL.HasValue ?
                new ObjectParameter("PhoneTypePL", phoneTypePL) :
                new ObjectParameter("PhoneTypePL", typeof(int));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var unlistedParameter = unlisted.HasValue ?
                new ObjectParameter("Unlisted", unlisted) :
                new ObjectParameter("Unlisted", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var portalStudentPhoneIDParameter = portalStudentPhoneID.HasValue ?
                new ObjectParameter("PortalStudentPhoneID", portalStudentPhoneID) :
                new ObjectParameter("PortalStudentPhoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalStudentPhone", studentIDParameter, currentPhoneIDParameter, phoneTypePLParameter, countryCodeParameter, phoneNumberParameter, submittedByParameter, unlistedParameter, startDateParameter, endDateParameter, portalStudentPhoneIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalStudentRemovalAddressRequest(Nullable<int> studentID, Nullable<int> addressTypePL, Nullable<int> currentAddressID, Nullable<int> submittedBy, Nullable<System.DateTime> startDate, string currentAddressEndDate, Nullable<int> portalStudentAddressID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var addressTypePLParameter = addressTypePL.HasValue ?
                new ObjectParameter("AddressTypePL", addressTypePL) :
                new ObjectParameter("AddressTypePL", typeof(int));
    
            var currentAddressIDParameter = currentAddressID.HasValue ?
                new ObjectParameter("CurrentAddressID", currentAddressID) :
                new ObjectParameter("CurrentAddressID", typeof(int));
    
            var submittedByParameter = submittedBy.HasValue ?
                new ObjectParameter("SubmittedBy", submittedBy) :
                new ObjectParameter("SubmittedBy", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var currentAddressEndDateParameter = currentAddressEndDate != null ?
                new ObjectParameter("CurrentAddressEndDate", currentAddressEndDate) :
                new ObjectParameter("CurrentAddressEndDate", typeof(string));
    
            var portalStudentAddressIDParameter = portalStudentAddressID.HasValue ?
                new ObjectParameter("PortalStudentAddressID", portalStudentAddressID) :
                new ObjectParameter("PortalStudentAddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalStudentRemovalAddressRequest", studentIDParameter, addressTypePLParameter, currentAddressIDParameter, submittedByParameter, startDateParameter, currentAddressEndDateParameter, portalStudentAddressIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertPortalUserLoginDetails(Nullable<int> loginUserID, string userRole, Nullable<System.DateTime> loginDate, Nullable<System.TimeSpan> loginTime)
        {
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var loginDateParameter = loginDate.HasValue ?
                new ObjectParameter("LoginDate", loginDate) :
                new ObjectParameter("LoginDate", typeof(System.DateTime));
    
            var loginTimeParameter = loginTime.HasValue ?
                new ObjectParameter("LoginTime", loginTime) :
                new ObjectParameter("LoginTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertPortalUserLoginDetails", loginUserIDParameter, userRoleParameter, loginDateParameter, loginTimeParameter);
        }
    
        public virtual int uspInsertReporter(Nullable<int> disciplinereportertype, Nullable<int> student, Nullable<int> gradelevel, Nullable<int> staff, string otherreporterfullname, Nullable<int> age, Nullable<int> actiontakentype, string actiondescription, Nullable<int> disciplineincidentid, string createdby, Nullable<System.DateTime> createddate)
        {
            var disciplinereportertypeParameter = disciplinereportertype.HasValue ?
                new ObjectParameter("disciplinereportertype", disciplinereportertype) :
                new ObjectParameter("disciplinereportertype", typeof(int));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("student", student) :
                new ObjectParameter("student", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var staffParameter = staff.HasValue ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(int));
    
            var otherreporterfullnameParameter = otherreporterfullname != null ?
                new ObjectParameter("otherreporterfullname", otherreporterfullname) :
                new ObjectParameter("otherreporterfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertReporter", disciplinereportertypeParameter, studentParameter, gradelevelParameter, staffParameter, otherreporterfullnameParameter, ageParameter, actiontakentypeParameter, actiondescriptionParameter, disciplineincidentidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertReportPeriodDetails(Nullable<int> reportperiodid, string reportname, Nullable<int> schoolYearPL)
        {
            var reportperiodidParameter = reportperiodid.HasValue ?
                new ObjectParameter("reportperiodid", reportperiodid) :
                new ObjectParameter("reportperiodid", typeof(int));
    
            var reportnameParameter = reportname != null ?
                new ObjectParameter("reportname", reportname) :
                new ObjectParameter("reportname", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertReportPeriodDetails", reportperiodidParameter, reportnameParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertReportPeriodDetailsDistrict(Nullable<int> reportperiodid, string reportname, Nullable<int> districtid, Nullable<int> schoolYearPL)
        {
            var reportperiodidParameter = reportperiodid.HasValue ?
                new ObjectParameter("reportperiodid", reportperiodid) :
                new ObjectParameter("reportperiodid", typeof(int));
    
            var reportnameParameter = reportname != null ?
                new ObjectParameter("reportname", reportname) :
                new ObjectParameter("reportname", typeof(string));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertReportPeriodDetailsDistrict", reportperiodidParameter, reportnameParameter, districtidParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertReviewAbsenceNoticeDetails(Nullable<int> absenceNoticeId, Nullable<int> reviewedBy, Nullable<System.DateTime> reviewedDate, Nullable<int> studentDayAttendanceId, Nullable<int> studentId, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceCodePL, Nullable<int> reasonPL, Nullable<System.TimeSpan> timeIn, Nullable<System.TimeSpan> timeOut, Nullable<int> schoolYearPL)
        {
            var absenceNoticeIdParameter = absenceNoticeId.HasValue ?
                new ObjectParameter("AbsenceNoticeId", absenceNoticeId) :
                new ObjectParameter("AbsenceNoticeId", typeof(int));
    
            var reviewedByParameter = reviewedBy.HasValue ?
                new ObjectParameter("ReviewedBy", reviewedBy) :
                new ObjectParameter("ReviewedBy", typeof(int));
    
            var reviewedDateParameter = reviewedDate.HasValue ?
                new ObjectParameter("ReviewedDate", reviewedDate) :
                new ObjectParameter("ReviewedDate", typeof(System.DateTime));
    
            var studentDayAttendanceIdParameter = studentDayAttendanceId.HasValue ?
                new ObjectParameter("StudentDayAttendanceId", studentDayAttendanceId) :
                new ObjectParameter("StudentDayAttendanceId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceCodePLParameter = attendanceCodePL.HasValue ?
                new ObjectParameter("AttendanceCodePL", attendanceCodePL) :
                new ObjectParameter("AttendanceCodePL", typeof(int));
    
            var reasonPLParameter = reasonPL.HasValue ?
                new ObjectParameter("ReasonPL", reasonPL) :
                new ObjectParameter("ReasonPL", typeof(int));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.TimeSpan));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.TimeSpan));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertReviewAbsenceNoticeDetails", absenceNoticeIdParameter, reviewedByParameter, reviewedDateParameter, studentDayAttendanceIdParameter, studentIdParameter, attendanceDateParameter, attendanceCodePLParameter, reasonPLParameter, timeInParameter, timeOutParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertRoleMenuPrivileges(Nullable<int> roleid, string level1menuids, string level2menuids, string level3menuids, string level4menuids, string menuprivilegesstring, string createdby, Nullable<System.DateTime> createddate)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var level1menuidsParameter = level1menuids != null ?
                new ObjectParameter("level1menuids", level1menuids) :
                new ObjectParameter("level1menuids", typeof(string));
    
            var level2menuidsParameter = level2menuids != null ?
                new ObjectParameter("level2menuids", level2menuids) :
                new ObjectParameter("level2menuids", typeof(string));
    
            var level3menuidsParameter = level3menuids != null ?
                new ObjectParameter("level3menuids", level3menuids) :
                new ObjectParameter("level3menuids", typeof(string));
    
            var level4menuidsParameter = level4menuids != null ?
                new ObjectParameter("level4menuids", level4menuids) :
                new ObjectParameter("level4menuids", typeof(string));
    
            var menuprivilegesstringParameter = menuprivilegesstring != null ?
                new ObjectParameter("menuprivilegesstring", menuprivilegesstring) :
                new ObjectParameter("menuprivilegesstring", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertRoleMenuPrivileges", roleidParameter, level1menuidsParameter, level2menuidsParameter, level3menuidsParameter, level4menuidsParameter, menuprivilegesstringParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertRooms(string roomnumber, string roomname, Nullable<int> schoolid, Nullable<int> roomtypepl, Nullable<int> roomcapacity, Nullable<bool> roomstatus, string createdby, Nullable<System.DateTime> createddate)
        {
            var roomnumberParameter = roomnumber != null ?
                new ObjectParameter("roomnumber", roomnumber) :
                new ObjectParameter("roomnumber", typeof(string));
    
            var roomnameParameter = roomname != null ?
                new ObjectParameter("roomname", roomname) :
                new ObjectParameter("roomname", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var roomtypeplParameter = roomtypepl.HasValue ?
                new ObjectParameter("roomtypepl", roomtypepl) :
                new ObjectParameter("roomtypepl", typeof(int));
    
            var roomcapacityParameter = roomcapacity.HasValue ?
                new ObjectParameter("roomcapacity", roomcapacity) :
                new ObjectParameter("roomcapacity", typeof(int));
    
            var roomstatusParameter = roomstatus.HasValue ?
                new ObjectParameter("roomstatus", roomstatus) :
                new ObjectParameter("roomstatus", typeof(bool));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertRooms", roomnumberParameter, roomnameParameter, schoolidParameter, roomtypeplParameter, roomcapacityParameter, roomstatusParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchool(string schoolirn, string schoolname, Nullable<bool> excludestatereporting, Nullable<bool> isevolveschool, Nullable<bool> orientation, Nullable<int> districtid, byte[] schoolpicture, byte[] schoollogo, string schooladdresstypes, string schoolstreetnumbers, string schoolstreetnames, string schoolcities, string schoolstates, string schoolcountries, string schoolzipcodes, string schoolcounties, string schoolneighbourhoods, string schoolphones, string schoolphonetypes, string faxnumber, string recordsemail, string staffids, string createdby, Nullable<System.DateTime> createddate)
        {
            var schoolirnParameter = schoolirn != null ?
                new ObjectParameter("schoolirn", schoolirn) :
                new ObjectParameter("schoolirn", typeof(string));
    
            var schoolnameParameter = schoolname != null ?
                new ObjectParameter("schoolname", schoolname) :
                new ObjectParameter("schoolname", typeof(string));
    
            var excludestatereportingParameter = excludestatereporting.HasValue ?
                new ObjectParameter("excludestatereporting", excludestatereporting) :
                new ObjectParameter("excludestatereporting", typeof(bool));
    
            var isevolveschoolParameter = isevolveschool.HasValue ?
                new ObjectParameter("isevolveschool", isevolveschool) :
                new ObjectParameter("isevolveschool", typeof(bool));
    
            var orientationParameter = orientation.HasValue ?
                new ObjectParameter("orientation", orientation) :
                new ObjectParameter("orientation", typeof(bool));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolpictureParameter = schoolpicture != null ?
                new ObjectParameter("schoolpicture", schoolpicture) :
                new ObjectParameter("schoolpicture", typeof(byte[]));
    
            var schoollogoParameter = schoollogo != null ?
                new ObjectParameter("schoollogo", schoollogo) :
                new ObjectParameter("schoollogo", typeof(byte[]));
    
            var schooladdresstypesParameter = schooladdresstypes != null ?
                new ObjectParameter("schooladdresstypes", schooladdresstypes) :
                new ObjectParameter("schooladdresstypes", typeof(string));
    
            var schoolstreetnumbersParameter = schoolstreetnumbers != null ?
                new ObjectParameter("schoolstreetnumbers", schoolstreetnumbers) :
                new ObjectParameter("schoolstreetnumbers", typeof(string));
    
            var schoolstreetnamesParameter = schoolstreetnames != null ?
                new ObjectParameter("schoolstreetnames", schoolstreetnames) :
                new ObjectParameter("schoolstreetnames", typeof(string));
    
            var schoolcitiesParameter = schoolcities != null ?
                new ObjectParameter("schoolcities", schoolcities) :
                new ObjectParameter("schoolcities", typeof(string));
    
            var schoolstatesParameter = schoolstates != null ?
                new ObjectParameter("schoolstates", schoolstates) :
                new ObjectParameter("schoolstates", typeof(string));
    
            var schoolcountriesParameter = schoolcountries != null ?
                new ObjectParameter("schoolcountries", schoolcountries) :
                new ObjectParameter("schoolcountries", typeof(string));
    
            var schoolzipcodesParameter = schoolzipcodes != null ?
                new ObjectParameter("schoolzipcodes", schoolzipcodes) :
                new ObjectParameter("schoolzipcodes", typeof(string));
    
            var schoolcountiesParameter = schoolcounties != null ?
                new ObjectParameter("schoolcounties", schoolcounties) :
                new ObjectParameter("schoolcounties", typeof(string));
    
            var schoolneighbourhoodsParameter = schoolneighbourhoods != null ?
                new ObjectParameter("schoolneighbourhoods", schoolneighbourhoods) :
                new ObjectParameter("schoolneighbourhoods", typeof(string));
    
            var schoolphonesParameter = schoolphones != null ?
                new ObjectParameter("schoolphones", schoolphones) :
                new ObjectParameter("schoolphones", typeof(string));
    
            var schoolphonetypesParameter = schoolphonetypes != null ?
                new ObjectParameter("schoolphonetypes", schoolphonetypes) :
                new ObjectParameter("schoolphonetypes", typeof(string));
    
            var faxnumberParameter = faxnumber != null ?
                new ObjectParameter("faxnumber", faxnumber) :
                new ObjectParameter("faxnumber", typeof(string));
    
            var recordsemailParameter = recordsemail != null ?
                new ObjectParameter("recordsemail", recordsemail) :
                new ObjectParameter("recordsemail", typeof(string));
    
            var staffidsParameter = staffids != null ?
                new ObjectParameter("staffids", staffids) :
                new ObjectParameter("staffids", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchool", schoolirnParameter, schoolnameParameter, excludestatereportingParameter, isevolveschoolParameter, orientationParameter, districtidParameter, schoolpictureParameter, schoollogoParameter, schooladdresstypesParameter, schoolstreetnumbersParameter, schoolstreetnamesParameter, schoolcitiesParameter, schoolstatesParameter, schoolcountriesParameter, schoolzipcodesParameter, schoolcountiesParameter, schoolneighbourhoodsParameter, schoolphonesParameter, schoolphonetypesParameter, faxnumberParameter, recordsemailParameter, staffidsParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolAlert(Nullable<int> schoolId, string lineOneFields, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var lineOneFieldsParameter = lineOneFields != null ?
                new ObjectParameter("lineOneFields", lineOneFields) :
                new ObjectParameter("lineOneFields", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolAlert", schoolIdParameter, lineOneFieldsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolAttendancePatternEvents(Nullable<int> districtAttendancePatternID, Nullable<int> schoolAttendancePatternID, string patternDescription, Nullable<int> calendarEventPL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> hours, string scheduledGradeLevels, string scheduledSchools, Nullable<bool> isStudentDays, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var districtAttendancePatternIDParameter = districtAttendancePatternID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternID", districtAttendancePatternID) :
                new ObjectParameter("DistrictAttendancePatternID", typeof(int));
    
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var calendarEventPLParameter = calendarEventPL.HasValue ?
                new ObjectParameter("CalendarEventPL", calendarEventPL) :
                new ObjectParameter("CalendarEventPL", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var scheduledGradeLevelsParameter = scheduledGradeLevels != null ?
                new ObjectParameter("ScheduledGradeLevels", scheduledGradeLevels) :
                new ObjectParameter("ScheduledGradeLevels", typeof(string));
    
            var scheduledSchoolsParameter = scheduledSchools != null ?
                new ObjectParameter("ScheduledSchools", scheduledSchools) :
                new ObjectParameter("ScheduledSchools", typeof(string));
    
            var isStudentDaysParameter = isStudentDays.HasValue ?
                new ObjectParameter("IsStudentDays", isStudentDays) :
                new ObjectParameter("IsStudentDays", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolAttendancePatternEvents", districtAttendancePatternIDParameter, schoolAttendancePatternIDParameter, patternDescriptionParameter, calendarEventPLParameter, startDateParameter, endDateParameter, hoursParameter, scheduledGradeLevelsParameter, scheduledSchoolsParameter, isStudentDaysParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolAttendanceSettings(Nullable<int> schoolId, Nullable<int> attendanceDayTypeId, Nullable<int> attendanceCalcTypeId, string attendanceCodeIds, string attendanceTypeIds, Nullable<int> homeroomAttendanceType, Nullable<int> defaultAttendanceCodePL, Nullable<bool> tardyIn, Nullable<bool> tardyOut, Nullable<bool> excusedIn, Nullable<bool> excusedOut, Nullable<bool> unExcusedIn, Nullable<bool> unExcusedOut, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifedBy, Nullable<System.DateTime> modifedDate)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var attendanceDayTypeIdParameter = attendanceDayTypeId.HasValue ?
                new ObjectParameter("AttendanceDayTypeId", attendanceDayTypeId) :
                new ObjectParameter("AttendanceDayTypeId", typeof(int));
    
            var attendanceCalcTypeIdParameter = attendanceCalcTypeId.HasValue ?
                new ObjectParameter("AttendanceCalcTypeId", attendanceCalcTypeId) :
                new ObjectParameter("AttendanceCalcTypeId", typeof(int));
    
            var attendanceCodeIdsParameter = attendanceCodeIds != null ?
                new ObjectParameter("AttendanceCodeIds", attendanceCodeIds) :
                new ObjectParameter("AttendanceCodeIds", typeof(string));
    
            var attendanceTypeIdsParameter = attendanceTypeIds != null ?
                new ObjectParameter("AttendanceTypeIds", attendanceTypeIds) :
                new ObjectParameter("AttendanceTypeIds", typeof(string));
    
            var homeroomAttendanceTypeParameter = homeroomAttendanceType.HasValue ?
                new ObjectParameter("HomeroomAttendanceType", homeroomAttendanceType) :
                new ObjectParameter("HomeroomAttendanceType", typeof(int));
    
            var defaultAttendanceCodePLParameter = defaultAttendanceCodePL.HasValue ?
                new ObjectParameter("DefaultAttendanceCodePL", defaultAttendanceCodePL) :
                new ObjectParameter("DefaultAttendanceCodePL", typeof(int));
    
            var tardyInParameter = tardyIn.HasValue ?
                new ObjectParameter("TardyIn", tardyIn) :
                new ObjectParameter("TardyIn", typeof(bool));
    
            var tardyOutParameter = tardyOut.HasValue ?
                new ObjectParameter("TardyOut", tardyOut) :
                new ObjectParameter("TardyOut", typeof(bool));
    
            var excusedInParameter = excusedIn.HasValue ?
                new ObjectParameter("ExcusedIn", excusedIn) :
                new ObjectParameter("ExcusedIn", typeof(bool));
    
            var excusedOutParameter = excusedOut.HasValue ?
                new ObjectParameter("ExcusedOut", excusedOut) :
                new ObjectParameter("ExcusedOut", typeof(bool));
    
            var unExcusedInParameter = unExcusedIn.HasValue ?
                new ObjectParameter("UnExcusedIn", unExcusedIn) :
                new ObjectParameter("UnExcusedIn", typeof(bool));
    
            var unExcusedOutParameter = unExcusedOut.HasValue ?
                new ObjectParameter("UnExcusedOut", unExcusedOut) :
                new ObjectParameter("UnExcusedOut", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifedByParameter = modifedBy.HasValue ?
                new ObjectParameter("modifedBy", modifedBy) :
                new ObjectParameter("modifedBy", typeof(int));
    
            var modifedDateParameter = modifedDate.HasValue ?
                new ObjectParameter("modifedDate", modifedDate) :
                new ObjectParameter("modifedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolAttendanceSettings", schoolIdParameter, attendanceDayTypeIdParameter, attendanceCalcTypeIdParameter, attendanceCodeIdsParameter, attendanceTypeIdsParameter, homeroomAttendanceTypeParameter, defaultAttendanceCodePLParameter, tardyInParameter, tardyOutParameter, excusedInParameter, excusedOutParameter, unExcusedInParameter, unExcusedOutParameter, createdByParameter, createdDateParameter, modifedByParameter, modifedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolComment(Nullable<int> schoolID, string schoolComment, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolCommentParameter = schoolComment != null ?
                new ObjectParameter("SchoolComment", schoolComment) :
                new ObjectParameter("SchoolComment", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolComment", schoolIDParameter, schoolCommentParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolCourseSection(Nullable<int> sectionId, Nullable<int> buildingCourseId, string sectionNumber, Nullable<int> roomId, Nullable<int> defaultMaximunEnrollement, Nullable<int> currentEnrollment, Nullable<int> availableSeats, Nullable<bool> open, Nullable<decimal> creditHours, Nullable<int> termIds, Nullable<System.DateTime> sectionStartDate, Nullable<System.DateTime> sectionEndDate, Nullable<int> gradeScaleId, Nullable<decimal> gPAAddedValue, Nullable<int> stateSubjectCode, Nullable<int> courseLevel, Nullable<int> subjectAreaForCredit, string locationIRN, Nullable<int> deliveryMethodId, Nullable<int> studentPopulationId, Nullable<int> educationalOptionId, Nullable<int> curriculum, Nullable<int> languageIdUsedinTeachingCourse, Nullable<int> creditFlexibilityCode, Nullable<decimal> dualEnrollment, Nullable<int> lengthofScheduledInstruction, Nullable<int> maximunSeats, Nullable<int> cTECollegeCredit, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode, string perioddetails, string staffDetails, Nullable<int> schoolId, Nullable<int> schoolYearId, string buttonName)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var buildingCourseIdParameter = buildingCourseId.HasValue ?
                new ObjectParameter("BuildingCourseId", buildingCourseId) :
                new ObjectParameter("BuildingCourseId", typeof(int));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var defaultMaximunEnrollementParameter = defaultMaximunEnrollement.HasValue ?
                new ObjectParameter("DefaultMaximunEnrollement", defaultMaximunEnrollement) :
                new ObjectParameter("DefaultMaximunEnrollement", typeof(int));
    
            var currentEnrollmentParameter = currentEnrollment.HasValue ?
                new ObjectParameter("CurrentEnrollment", currentEnrollment) :
                new ObjectParameter("CurrentEnrollment", typeof(int));
    
            var availableSeatsParameter = availableSeats.HasValue ?
                new ObjectParameter("AvailableSeats", availableSeats) :
                new ObjectParameter("AvailableSeats", typeof(int));
    
            var openParameter = open.HasValue ?
                new ObjectParameter("Open", open) :
                new ObjectParameter("Open", typeof(bool));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var termIdsParameter = termIds.HasValue ?
                new ObjectParameter("TermIds", termIds) :
                new ObjectParameter("TermIds", typeof(int));
    
            var sectionStartDateParameter = sectionStartDate.HasValue ?
                new ObjectParameter("SectionStartDate", sectionStartDate) :
                new ObjectParameter("SectionStartDate", typeof(System.DateTime));
    
            var sectionEndDateParameter = sectionEndDate.HasValue ?
                new ObjectParameter("SectionEndDate", sectionEndDate) :
                new ObjectParameter("SectionEndDate", typeof(System.DateTime));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var gPAAddedValueParameter = gPAAddedValue.HasValue ?
                new ObjectParameter("GPAAddedValue", gPAAddedValue) :
                new ObjectParameter("GPAAddedValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var deliveryMethodIdParameter = deliveryMethodId.HasValue ?
                new ObjectParameter("DeliveryMethodId", deliveryMethodId) :
                new ObjectParameter("DeliveryMethodId", typeof(int));
    
            var studentPopulationIdParameter = studentPopulationId.HasValue ?
                new ObjectParameter("StudentPopulationId", studentPopulationId) :
                new ObjectParameter("StudentPopulationId", typeof(int));
    
            var educationalOptionIdParameter = educationalOptionId.HasValue ?
                new ObjectParameter("EducationalOptionId", educationalOptionId) :
                new ObjectParameter("EducationalOptionId", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var languageIdUsedinTeachingCourseParameter = languageIdUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageIdUsedinTeachingCourse", languageIdUsedinTeachingCourse) :
                new ObjectParameter("LanguageIdUsedinTeachingCourse", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var dualEnrollmentParameter = dualEnrollment.HasValue ?
                new ObjectParameter("DualEnrollment", dualEnrollment) :
                new ObjectParameter("DualEnrollment", typeof(decimal));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var maximunSeatsParameter = maximunSeats.HasValue ?
                new ObjectParameter("MaximunSeats", maximunSeats) :
                new ObjectParameter("MaximunSeats", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolCourseSection", sectionIdParameter, buildingCourseIdParameter, sectionNumberParameter, roomIdParameter, defaultMaximunEnrollementParameter, currentEnrollmentParameter, availableSeatsParameter, openParameter, creditHoursParameter, termIdsParameter, sectionStartDateParameter, sectionEndDateParameter, gradeScaleIdParameter, gPAAddedValueParameter, stateSubjectCodeParameter, courseLevelParameter, subjectAreaForCreditParameter, locationIRNParameter, deliveryMethodIdParameter, studentPopulationIdParameter, educationalOptionIdParameter, curriculumParameter, languageIdUsedinTeachingCourseParameter, creditFlexibilityCodeParameter, dualEnrollmentParameter, lengthofScheduledInstructionParameter, maximunSeatsParameter, cTECollegeCreditParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter, perioddetailsParameter, staffDetailsParameter, schoolIdParameter, schoolYearIdParameter, buttonNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolCourseSectionsToSchool(string valuesArray, Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolCourseSectionsToSchool", valuesArrayParameter, schoolIDParameter, schoolYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolCTESetup(Nullable<int> cTESetupId, Nullable<int> districtId, Nullable<int> schoolId, string minimumAttendancePercent, Nullable<int> sYForCTEFullYearPL, Nullable<int> sYForCTEMidYearPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var cTESetupIdParameter = cTESetupId.HasValue ?
                new ObjectParameter("CTESetupId", cTESetupId) :
                new ObjectParameter("CTESetupId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var minimumAttendancePercentParameter = minimumAttendancePercent != null ?
                new ObjectParameter("MinimumAttendancePercent", minimumAttendancePercent) :
                new ObjectParameter("MinimumAttendancePercent", typeof(string));
    
            var sYForCTEFullYearPLParameter = sYForCTEFullYearPL.HasValue ?
                new ObjectParameter("SYForCTEFullYearPL", sYForCTEFullYearPL) :
                new ObjectParameter("SYForCTEFullYearPL", typeof(int));
    
            var sYForCTEMidYearPLParameter = sYForCTEMidYearPL.HasValue ?
                new ObjectParameter("SYForCTEMidYearPL", sYForCTEMidYearPL) :
                new ObjectParameter("SYForCTEMidYearPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolCTESetup", cTESetupIdParameter, districtIdParameter, schoolIdParameter, minimumAttendancePercentParameter, sYForCTEFullYearPLParameter, sYForCTEMidYearPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolDay(Nullable<int> schoolID, string schoolDay, string abbreviation, Nullable<int> sort, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolDayParameter = schoolDay != null ?
                new ObjectParameter("SchoolDay", schoolDay) :
                new ObjectParameter("SchoolDay", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolDay", schoolIDParameter, schoolDayParameter, abbreviationParameter, sortParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolDetails(Nullable<int> studentapplicationid, Nullable<int> schooldistrictresidence, Nullable<bool> currentlyenrolledinschool, string resonnotenrolled, string formerschooltype, Nullable<int> lastschoolattended, Nullable<int> formerschooldistrict, Nullable<int> lastschoolattendedrecordrequest, Nullable<int> lastgradestudentcompleted, Nullable<int> gradelevelentering, Nullable<bool> testedgiftedortalented, Nullable<bool> hasgiep, Nullable<bool> evaluatingdisability, Nullable<bool> disabilitysection, Nullable<bool> expulsion, Nullable<int> studentleppreviousschool, Nullable<int> firstlanguagetalk, Nullable<int> languagespeakoftenstudentathome, string studententerninthagrade, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentapplicationidParameter = studentapplicationid.HasValue ?
                new ObjectParameter("studentapplicationid", studentapplicationid) :
                new ObjectParameter("studentapplicationid", typeof(int));
    
            var schooldistrictresidenceParameter = schooldistrictresidence.HasValue ?
                new ObjectParameter("schooldistrictresidence", schooldistrictresidence) :
                new ObjectParameter("schooldistrictresidence", typeof(int));
    
            var currentlyenrolledinschoolParameter = currentlyenrolledinschool.HasValue ?
                new ObjectParameter("currentlyenrolledinschool", currentlyenrolledinschool) :
                new ObjectParameter("currentlyenrolledinschool", typeof(bool));
    
            var resonnotenrolledParameter = resonnotenrolled != null ?
                new ObjectParameter("resonnotenrolled", resonnotenrolled) :
                new ObjectParameter("resonnotenrolled", typeof(string));
    
            var formerschooltypeParameter = formerschooltype != null ?
                new ObjectParameter("formerschooltype", formerschooltype) :
                new ObjectParameter("formerschooltype", typeof(string));
    
            var lastschoolattendedParameter = lastschoolattended.HasValue ?
                new ObjectParameter("lastschoolattended", lastschoolattended) :
                new ObjectParameter("lastschoolattended", typeof(int));
    
            var formerschooldistrictParameter = formerschooldistrict.HasValue ?
                new ObjectParameter("formerschooldistrict", formerschooldistrict) :
                new ObjectParameter("formerschooldistrict", typeof(int));
    
            var lastschoolattendedrecordrequestParameter = lastschoolattendedrecordrequest.HasValue ?
                new ObjectParameter("lastschoolattendedrecordrequest", lastschoolattendedrecordrequest) :
                new ObjectParameter("lastschoolattendedrecordrequest", typeof(int));
    
            var lastgradestudentcompletedParameter = lastgradestudentcompleted.HasValue ?
                new ObjectParameter("lastgradestudentcompleted", lastgradestudentcompleted) :
                new ObjectParameter("lastgradestudentcompleted", typeof(int));
    
            var gradelevelenteringParameter = gradelevelentering.HasValue ?
                new ObjectParameter("gradelevelentering", gradelevelentering) :
                new ObjectParameter("gradelevelentering", typeof(int));
    
            var testedgiftedortalentedParameter = testedgiftedortalented.HasValue ?
                new ObjectParameter("testedgiftedortalented", testedgiftedortalented) :
                new ObjectParameter("testedgiftedortalented", typeof(bool));
    
            var hasgiepParameter = hasgiep.HasValue ?
                new ObjectParameter("hasgiep", hasgiep) :
                new ObjectParameter("hasgiep", typeof(bool));
    
            var evaluatingdisabilityParameter = evaluatingdisability.HasValue ?
                new ObjectParameter("evaluatingdisability", evaluatingdisability) :
                new ObjectParameter("evaluatingdisability", typeof(bool));
    
            var disabilitysectionParameter = disabilitysection.HasValue ?
                new ObjectParameter("disabilitysection", disabilitysection) :
                new ObjectParameter("disabilitysection", typeof(bool));
    
            var expulsionParameter = expulsion.HasValue ?
                new ObjectParameter("expulsion", expulsion) :
                new ObjectParameter("expulsion", typeof(bool));
    
            var studentleppreviousschoolParameter = studentleppreviousschool.HasValue ?
                new ObjectParameter("studentleppreviousschool", studentleppreviousschool) :
                new ObjectParameter("studentleppreviousschool", typeof(int));
    
            var firstlanguagetalkParameter = firstlanguagetalk.HasValue ?
                new ObjectParameter("firstlanguagetalk", firstlanguagetalk) :
                new ObjectParameter("firstlanguagetalk", typeof(int));
    
            var languagespeakoftenstudentathomeParameter = languagespeakoftenstudentathome.HasValue ?
                new ObjectParameter("languagespeakoftenstudentathome", languagespeakoftenstudentathome) :
                new ObjectParameter("languagespeakoftenstudentathome", typeof(int));
    
            var studententerninthagradeParameter = studententerninthagrade != null ?
                new ObjectParameter("studententerninthagrade", studententerninthagrade) :
                new ObjectParameter("studententerninthagrade", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolDetails", studentapplicationidParameter, schooldistrictresidenceParameter, currentlyenrolledinschoolParameter, resonnotenrolledParameter, formerschooltypeParameter, lastschoolattendedParameter, formerschooldistrictParameter, lastschoolattendedrecordrequestParameter, lastgradestudentcompletedParameter, gradelevelenteringParameter, testedgiftedortalentedParameter, hasgiepParameter, evaluatingdisabilityParameter, disabilitysectionParameter, expulsionParameter, studentleppreviousschoolParameter, firstlanguagetalkParameter, languagespeakoftenstudentathomeParameter, studententerninthagradeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolEvents(Nullable<int> calendarID, Nullable<int> schoolID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string eventDescription, Nullable<int> days, Nullable<int> createdBy)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolEvents", calendarIDParameter, schoolIDParameter, startDateParameter, endDateParameter, eventDescriptionParameter, daysParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolGPA(Nullable<int> schoolID, string gPAName, string gPAFormula, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var gPANameParameter = gPAName != null ?
                new ObjectParameter("GPAName", gPAName) :
                new ObjectParameter("GPAName", typeof(string));
    
            var gPAFormulaParameter = gPAFormula != null ?
                new ObjectParameter("GPAFormula", gPAFormula) :
                new ObjectParameter("GPAFormula", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolGPA", schoolIDParameter, gPANameParameter, gPAFormulaParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolGradebookComment(Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<int> commentTypePL, string commentDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var commentTypePLParameter = commentTypePL.HasValue ?
                new ObjectParameter("CommentTypePL", commentTypePL) :
                new ObjectParameter("CommentTypePL", typeof(int));
    
            var commentDescriptionParameter = commentDescription != null ?
                new ObjectParameter("CommentDescription", commentDescription) :
                new ObjectParameter("CommentDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolGradebookComment", schoolIDParameter, schoolYearPLParameter, commentTypePLParameter, commentDescriptionParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolGradebookPreference(Nullable<int> schoolID, Nullable<int> schoolYearPL, string assignmentCategoryPLs, string gradeReasonTypePLs, Nullable<bool> isMissingScore, Nullable<int> roundToDecimalPL, string districtCommentPLs, Nullable<bool> isSchoolCreateNewComments, string assignmentCategoryColorCode, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var assignmentCategoryPLsParameter = assignmentCategoryPLs != null ?
                new ObjectParameter("AssignmentCategoryPLs", assignmentCategoryPLs) :
                new ObjectParameter("AssignmentCategoryPLs", typeof(string));
    
            var gradeReasonTypePLsParameter = gradeReasonTypePLs != null ?
                new ObjectParameter("GradeReasonTypePLs", gradeReasonTypePLs) :
                new ObjectParameter("GradeReasonTypePLs", typeof(string));
    
            var isMissingScoreParameter = isMissingScore.HasValue ?
                new ObjectParameter("IsMissingScore", isMissingScore) :
                new ObjectParameter("IsMissingScore", typeof(bool));
    
            var roundToDecimalPLParameter = roundToDecimalPL.HasValue ?
                new ObjectParameter("RoundToDecimalPL", roundToDecimalPL) :
                new ObjectParameter("RoundToDecimalPL", typeof(int));
    
            var districtCommentPLsParameter = districtCommentPLs != null ?
                new ObjectParameter("DistrictCommentPLs", districtCommentPLs) :
                new ObjectParameter("DistrictCommentPLs", typeof(string));
    
            var isSchoolCreateNewCommentsParameter = isSchoolCreateNewComments.HasValue ?
                new ObjectParameter("IsSchoolCreateNewComments", isSchoolCreateNewComments) :
                new ObjectParameter("IsSchoolCreateNewComments", typeof(bool));
    
            var assignmentCategoryColorCodeParameter = assignmentCategoryColorCode != null ?
                new ObjectParameter("AssignmentCategoryColorCode", assignmentCategoryColorCode) :
                new ObjectParameter("AssignmentCategoryColorCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolGradebookPreference", schoolIDParameter, schoolYearPLParameter, assignmentCategoryPLsParameter, gradeReasonTypePLsParameter, isMissingScoreParameter, roundToDecimalPLParameter, districtCommentPLsParameter, isSchoolCreateNewCommentsParameter, assignmentCategoryColorCodeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolGradeLevel(Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> gradeLevelPL, Nullable<bool> isDefaultHours, Nullable<decimal> defaultHours, Nullable<decimal> hoursInSession, Nullable<int> nextGradeLevelPL, Nullable<int> nextSchoolID, string startDate, string endDate, Nullable<decimal> minimumCreditHours, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var gradeLevelPLParameter = gradeLevelPL.HasValue ?
                new ObjectParameter("GradeLevelPL", gradeLevelPL) :
                new ObjectParameter("GradeLevelPL", typeof(int));
    
            var isDefaultHoursParameter = isDefaultHours.HasValue ?
                new ObjectParameter("IsDefaultHours", isDefaultHours) :
                new ObjectParameter("IsDefaultHours", typeof(bool));
    
            var defaultHoursParameter = defaultHours.HasValue ?
                new ObjectParameter("DefaultHours", defaultHours) :
                new ObjectParameter("DefaultHours", typeof(decimal));
    
            var hoursInSessionParameter = hoursInSession.HasValue ?
                new ObjectParameter("HoursInSession", hoursInSession) :
                new ObjectParameter("HoursInSession", typeof(decimal));
    
            var nextGradeLevelPLParameter = nextGradeLevelPL.HasValue ?
                new ObjectParameter("NextGradeLevelPL", nextGradeLevelPL) :
                new ObjectParameter("NextGradeLevelPL", typeof(int));
    
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var minimumCreditHoursParameter = minimumCreditHours.HasValue ?
                new ObjectParameter("MinimumCreditHours", minimumCreditHours) :
                new ObjectParameter("MinimumCreditHours", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolGradeLevel", schoolIDParameter, schoolYearIDParameter, gradeLevelPLParameter, isDefaultHoursParameter, defaultHoursParameter, hoursInSessionParameter, nextGradeLevelPLParameter, nextSchoolIDParameter, startDateParameter, endDateParameter, minimumCreditHoursParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolPortal(string sPortalString, Nullable<int> districtPortalID, Nullable<int> schoolID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var sPortalStringParameter = sPortalString != null ?
                new ObjectParameter("SPortalString", sPortalString) :
                new ObjectParameter("SPortalString", typeof(string));
    
            var districtPortalIDParameter = districtPortalID.HasValue ?
                new ObjectParameter("DistrictPortalID", districtPortalID) :
                new ObjectParameter("DistrictPortalID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolPortal", sPortalStringParameter, districtPortalIDParameter, schoolIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolReportingPeriod(Nullable<int> schoolCourseTermID, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolCourseTermIDParameter = schoolCourseTermID.HasValue ?
                new ObjectParameter("SchoolCourseTermID", schoolCourseTermID) :
                new ObjectParameter("SchoolCourseTermID", typeof(int));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolReportingPeriod", schoolCourseTermIDParameter, valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertSchoolSemester(string semester, Nullable<int> schoolid, Nullable<System.DateTime> firstdayofsemester, Nullable<System.DateTime> lastdayofsemester, string description, string createdby, Nullable<System.DateTime> createddate)
        {
            var semesterParameter = semester != null ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var firstdayofsemesterParameter = firstdayofsemester.HasValue ?
                new ObjectParameter("firstdayofsemester", firstdayofsemester) :
                new ObjectParameter("firstdayofsemester", typeof(System.DateTime));
    
            var lastdayofsemesterParameter = lastdayofsemester.HasValue ?
                new ObjectParameter("lastdayofsemester", lastdayofsemester) :
                new ObjectParameter("lastdayofsemester", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolSemester", semesterParameter, schoolidParameter, firstdayofsemesterParameter, lastdayofsemesterParameter, descriptionParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolStudentBanner(Nullable<int> schoolId, string lineOneFields, string lineTwoFields, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var lineOneFieldsParameter = lineOneFields != null ?
                new ObjectParameter("lineOneFields", lineOneFields) :
                new ObjectParameter("lineOneFields", typeof(string));
    
            var lineTwoFieldsParameter = lineTwoFields != null ?
                new ObjectParameter("lineTwoFields", lineTwoFields) :
                new ObjectParameter("lineTwoFields", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolStudentBanner", schoolIdParameter, lineOneFieldsParameter, lineTwoFieldsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertSchoolTrimesters(string trimester, string description, Nullable<System.DateTime> firstDayofTrimester, Nullable<System.DateTime> lastDayofTrimester, Nullable<int> schoolID, string createdBy, Nullable<System.DateTime> createdDate)
        {
            var trimesterParameter = trimester != null ?
                new ObjectParameter("trimester", trimester) :
                new ObjectParameter("trimester", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var firstDayofTrimesterParameter = firstDayofTrimester.HasValue ?
                new ObjectParameter("firstDayofTrimester", firstDayofTrimester) :
                new ObjectParameter("firstDayofTrimester", typeof(System.DateTime));
    
            var lastDayofTrimesterParameter = lastDayofTrimester.HasValue ?
                new ObjectParameter("lastDayofTrimester", lastDayofTrimester) :
                new ObjectParameter("lastDayofTrimester", typeof(System.DateTime));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("schoolID", schoolID) :
                new ObjectParameter("schoolID", typeof(int));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolTrimesters", trimesterParameter, descriptionParameter, firstDayofTrimesterParameter, lastDayofTrimesterParameter, schoolIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSchoolYear(Nullable<int> schoolID, Nullable<int> schoolYear, string abbrivation, Nullable<bool> isDefault, Nullable<System.DateTime> firstDayofSchool, Nullable<System.DateTime> lastdayofSchool, string schoolYearTerms, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var abbrivationParameter = abbrivation != null ?
                new ObjectParameter("Abbrivation", abbrivation) :
                new ObjectParameter("Abbrivation", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var firstDayofSchoolParameter = firstDayofSchool.HasValue ?
                new ObjectParameter("FirstDayofSchool", firstDayofSchool) :
                new ObjectParameter("FirstDayofSchool", typeof(System.DateTime));
    
            var lastdayofSchoolParameter = lastdayofSchool.HasValue ?
                new ObjectParameter("LastdayofSchool", lastdayofSchool) :
                new ObjectParameter("LastdayofSchool", typeof(System.DateTime));
    
            var schoolYearTermsParameter = schoolYearTerms != null ?
                new ObjectParameter("SchoolYearTerms", schoolYearTerms) :
                new ObjectParameter("SchoolYearTerms", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("createdDate", createdDate) :
                new ObjectParameter("createdDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSchoolYear", schoolIDParameter, schoolYearParameter, abbrivationParameter, isDefaultParameter, firstDayofSchoolParameter, lastdayofSchoolParameter, schoolYearTermsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertSchoolYearDetails(string schoolyear, Nullable<int> schoolid, Nullable<System.DateTime> firstdayofschool, Nullable<System.DateTime> lastdayofschool, string description, string semestertype, string createdby, Nullable<System.DateTime> createddate)
        {
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var firstdayofschoolParameter = firstdayofschool.HasValue ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(System.DateTime));
    
            var lastdayofschoolParameter = lastdayofschool.HasValue ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolYearDetails", schoolyearParameter, schoolidParameter, firstdayofschoolParameter, lastdayofschoolParameter, descriptionParameter, semestertypeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertSchoolYearQuarters(string schoolyear, Nullable<int> schoolid, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string quarterone, string quarteronedescription, string firstdayofquarterone, string lastdayofquarterone, string quartertwo, string quartertwodescription, string firstdayofquartertwo, string lastdayofquartertwo, string quarterthree, string quarterthreedescription, string firstdayofquarterthree, string lastdayofquarterthree, string quarterfour, string quarterfourdescription, string firstdayofquarterfour, string lastdayofquarterfour, Nullable<bool> isdefault, string createdby, Nullable<System.DateTime> createddate)
        {
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var quarteroneParameter = quarterone != null ?
                new ObjectParameter("quarterone", quarterone) :
                new ObjectParameter("quarterone", typeof(string));
    
            var quarteronedescriptionParameter = quarteronedescription != null ?
                new ObjectParameter("quarteronedescription", quarteronedescription) :
                new ObjectParameter("quarteronedescription", typeof(string));
    
            var firstdayofquarteroneParameter = firstdayofquarterone != null ?
                new ObjectParameter("firstdayofquarterone", firstdayofquarterone) :
                new ObjectParameter("firstdayofquarterone", typeof(string));
    
            var lastdayofquarteroneParameter = lastdayofquarterone != null ?
                new ObjectParameter("lastdayofquarterone", lastdayofquarterone) :
                new ObjectParameter("lastdayofquarterone", typeof(string));
    
            var quartertwoParameter = quartertwo != null ?
                new ObjectParameter("quartertwo", quartertwo) :
                new ObjectParameter("quartertwo", typeof(string));
    
            var quartertwodescriptionParameter = quartertwodescription != null ?
                new ObjectParameter("quartertwodescription", quartertwodescription) :
                new ObjectParameter("quartertwodescription", typeof(string));
    
            var firstdayofquartertwoParameter = firstdayofquartertwo != null ?
                new ObjectParameter("firstdayofquartertwo", firstdayofquartertwo) :
                new ObjectParameter("firstdayofquartertwo", typeof(string));
    
            var lastdayofquartertwoParameter = lastdayofquartertwo != null ?
                new ObjectParameter("lastdayofquartertwo", lastdayofquartertwo) :
                new ObjectParameter("lastdayofquartertwo", typeof(string));
    
            var quarterthreeParameter = quarterthree != null ?
                new ObjectParameter("quarterthree", quarterthree) :
                new ObjectParameter("quarterthree", typeof(string));
    
            var quarterthreedescriptionParameter = quarterthreedescription != null ?
                new ObjectParameter("quarterthreedescription", quarterthreedescription) :
                new ObjectParameter("quarterthreedescription", typeof(string));
    
            var firstdayofquarterthreeParameter = firstdayofquarterthree != null ?
                new ObjectParameter("firstdayofquarterthree", firstdayofquarterthree) :
                new ObjectParameter("firstdayofquarterthree", typeof(string));
    
            var lastdayofquarterthreeParameter = lastdayofquarterthree != null ?
                new ObjectParameter("lastdayofquarterthree", lastdayofquarterthree) :
                new ObjectParameter("lastdayofquarterthree", typeof(string));
    
            var quarterfourParameter = quarterfour != null ?
                new ObjectParameter("quarterfour", quarterfour) :
                new ObjectParameter("quarterfour", typeof(string));
    
            var quarterfourdescriptionParameter = quarterfourdescription != null ?
                new ObjectParameter("quarterfourdescription", quarterfourdescription) :
                new ObjectParameter("quarterfourdescription", typeof(string));
    
            var firstdayofquarterfourParameter = firstdayofquarterfour != null ?
                new ObjectParameter("firstdayofquarterfour", firstdayofquarterfour) :
                new ObjectParameter("firstdayofquarterfour", typeof(string));
    
            var lastdayofquarterfourParameter = lastdayofquarterfour != null ?
                new ObjectParameter("lastdayofquarterfour", lastdayofquarterfour) :
                new ObjectParameter("lastdayofquarterfour", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolYearQuarters", schoolyearParameter, schoolidParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, quarteroneParameter, quarteronedescriptionParameter, firstdayofquarteroneParameter, lastdayofquarteroneParameter, quartertwoParameter, quartertwodescriptionParameter, firstdayofquartertwoParameter, lastdayofquartertwoParameter, quarterthreeParameter, quarterthreedescriptionParameter, firstdayofquarterthreeParameter, lastdayofquarterthreeParameter, quarterfourParameter, quarterfourdescriptionParameter, firstdayofquarterfourParameter, lastdayofquarterfourParameter, isdefaultParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertSchoolYearSemester(string schoolyear, Nullable<int> schoolid, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string semesterone, string firstdayofsemesterone, string lastdayofsemesterone, string semesteronedescription, string semquarterone, string semquarteronedescription, string firstdayofsemquarterone, string lastdayofsemquarterone, string semquartertwo, string semquartertwodescription, string firstdayofsemquartertwo, string lastdayofsemquartertwo, string semestertwo, string firstdayofsemestertwo, string lastdayofsemestertwo, string semestertwodescription, string semquarterthree, string semquarterthreedescription, string firstdayofsemquarterthree, string lastdayofsemquarterthree, string semquarterfour, string semquarterfourdescription, string firstdayofsemquarterfour, string lastdayofsemquarterfour, Nullable<bool> isdefault, string createdby, Nullable<System.DateTime> createddate)
        {
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var semesteroneParameter = semesterone != null ?
                new ObjectParameter("semesterone", semesterone) :
                new ObjectParameter("semesterone", typeof(string));
    
            var firstdayofsemesteroneParameter = firstdayofsemesterone != null ?
                new ObjectParameter("firstdayofsemesterone", firstdayofsemesterone) :
                new ObjectParameter("firstdayofsemesterone", typeof(string));
    
            var lastdayofsemesteroneParameter = lastdayofsemesterone != null ?
                new ObjectParameter("lastdayofsemesterone", lastdayofsemesterone) :
                new ObjectParameter("lastdayofsemesterone", typeof(string));
    
            var semesteronedescriptionParameter = semesteronedescription != null ?
                new ObjectParameter("semesteronedescription", semesteronedescription) :
                new ObjectParameter("semesteronedescription", typeof(string));
    
            var semquarteroneParameter = semquarterone != null ?
                new ObjectParameter("semquarterone", semquarterone) :
                new ObjectParameter("semquarterone", typeof(string));
    
            var semquarteronedescriptionParameter = semquarteronedescription != null ?
                new ObjectParameter("semquarteronedescription", semquarteronedescription) :
                new ObjectParameter("semquarteronedescription", typeof(string));
    
            var firstdayofsemquarteroneParameter = firstdayofsemquarterone != null ?
                new ObjectParameter("firstdayofsemquarterone", firstdayofsemquarterone) :
                new ObjectParameter("firstdayofsemquarterone", typeof(string));
    
            var lastdayofsemquarteroneParameter = lastdayofsemquarterone != null ?
                new ObjectParameter("lastdayofsemquarterone", lastdayofsemquarterone) :
                new ObjectParameter("lastdayofsemquarterone", typeof(string));
    
            var semquartertwoParameter = semquartertwo != null ?
                new ObjectParameter("semquartertwo", semquartertwo) :
                new ObjectParameter("semquartertwo", typeof(string));
    
            var semquartertwodescriptionParameter = semquartertwodescription != null ?
                new ObjectParameter("semquartertwodescription", semquartertwodescription) :
                new ObjectParameter("semquartertwodescription", typeof(string));
    
            var firstdayofsemquartertwoParameter = firstdayofsemquartertwo != null ?
                new ObjectParameter("firstdayofsemquartertwo", firstdayofsemquartertwo) :
                new ObjectParameter("firstdayofsemquartertwo", typeof(string));
    
            var lastdayofsemquartertwoParameter = lastdayofsemquartertwo != null ?
                new ObjectParameter("lastdayofsemquartertwo", lastdayofsemquartertwo) :
                new ObjectParameter("lastdayofsemquartertwo", typeof(string));
    
            var semestertwoParameter = semestertwo != null ?
                new ObjectParameter("semestertwo", semestertwo) :
                new ObjectParameter("semestertwo", typeof(string));
    
            var firstdayofsemestertwoParameter = firstdayofsemestertwo != null ?
                new ObjectParameter("firstdayofsemestertwo", firstdayofsemestertwo) :
                new ObjectParameter("firstdayofsemestertwo", typeof(string));
    
            var lastdayofsemestertwoParameter = lastdayofsemestertwo != null ?
                new ObjectParameter("lastdayofsemestertwo", lastdayofsemestertwo) :
                new ObjectParameter("lastdayofsemestertwo", typeof(string));
    
            var semestertwodescriptionParameter = semestertwodescription != null ?
                new ObjectParameter("semestertwodescription", semestertwodescription) :
                new ObjectParameter("semestertwodescription", typeof(string));
    
            var semquarterthreeParameter = semquarterthree != null ?
                new ObjectParameter("semquarterthree", semquarterthree) :
                new ObjectParameter("semquarterthree", typeof(string));
    
            var semquarterthreedescriptionParameter = semquarterthreedescription != null ?
                new ObjectParameter("semquarterthreedescription", semquarterthreedescription) :
                new ObjectParameter("semquarterthreedescription", typeof(string));
    
            var firstdayofsemquarterthreeParameter = firstdayofsemquarterthree != null ?
                new ObjectParameter("firstdayofsemquarterthree", firstdayofsemquarterthree) :
                new ObjectParameter("firstdayofsemquarterthree", typeof(string));
    
            var lastdayofsemquarterthreeParameter = lastdayofsemquarterthree != null ?
                new ObjectParameter("lastdayofsemquarterthree", lastdayofsemquarterthree) :
                new ObjectParameter("lastdayofsemquarterthree", typeof(string));
    
            var semquarterfourParameter = semquarterfour != null ?
                new ObjectParameter("semquarterfour", semquarterfour) :
                new ObjectParameter("semquarterfour", typeof(string));
    
            var semquarterfourdescriptionParameter = semquarterfourdescription != null ?
                new ObjectParameter("semquarterfourdescription", semquarterfourdescription) :
                new ObjectParameter("semquarterfourdescription", typeof(string));
    
            var firstdayofsemquarterfourParameter = firstdayofsemquarterfour != null ?
                new ObjectParameter("firstdayofsemquarterfour", firstdayofsemquarterfour) :
                new ObjectParameter("firstdayofsemquarterfour", typeof(string));
    
            var lastdayofsemquarterfourParameter = lastdayofsemquarterfour != null ?
                new ObjectParameter("lastdayofsemquarterfour", lastdayofsemquarterfour) :
                new ObjectParameter("lastdayofsemquarterfour", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolYearSemester", schoolyearParameter, schoolidParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, semesteroneParameter, firstdayofsemesteroneParameter, lastdayofsemesteroneParameter, semesteronedescriptionParameter, semquarteroneParameter, semquarteronedescriptionParameter, firstdayofsemquarteroneParameter, lastdayofsemquarteroneParameter, semquartertwoParameter, semquartertwodescriptionParameter, firstdayofsemquartertwoParameter, lastdayofsemquartertwoParameter, semestertwoParameter, firstdayofsemestertwoParameter, lastdayofsemestertwoParameter, semestertwodescriptionParameter, semquarterthreeParameter, semquarterthreedescriptionParameter, firstdayofsemquarterthreeParameter, lastdayofsemquarterthreeParameter, semquarterfourParameter, semquarterfourdescriptionParameter, firstdayofsemquarterfourParameter, lastdayofsemquarterfourParameter, isdefaultParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertSchoolYearTrimester(string schoolyear, Nullable<int> schoolid, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string trimesterone, string trimesteronedescription, string firstdayoftrimesterone, string lastdayoftrimesterone, string trisemtermone, string trisemtermonedescription, string firstdayoftrisemtermone, string lastdayoftrisemtermone, string trisemtermtwo, string trisemtermtwodescription, string firstdayoftrisemtermtwo, string lastdayoftrisemtermtwo, string trimestertwo, string trimestertwodescription, string firstdayoftrimestertwo, string lastdayoftrimestertwo, string trisemtermthree, string trisemtermthreedescription, string firstdayoftrisemtermthree, string lastdayoftrisemtermthree, string trisemtermfour, string trisemtermfourdescription, string firstdayoftrisemtermfour, string lastdayoftrisemtermfour, string trimesterthree, string trimesterthreedescription, string firstdayoftrimesterthree, string lastdayoftrimesterthree, string trisemtermfive, string trisemtermfivedescription, string firstdayoftrisemtermfive, string lastdayoftrisemtermfive, string trisemtermsix, string trisemtermsixdescription, string firstdayoftrisemtermsix, string lastdayoftrisemtermsix, Nullable<bool> isdefault, string createdby, Nullable<System.DateTime> createddate)
        {
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var trimesteroneParameter = trimesterone != null ?
                new ObjectParameter("trimesterone", trimesterone) :
                new ObjectParameter("trimesterone", typeof(string));
    
            var trimesteronedescriptionParameter = trimesteronedescription != null ?
                new ObjectParameter("trimesteronedescription", trimesteronedescription) :
                new ObjectParameter("trimesteronedescription", typeof(string));
    
            var firstdayoftrimesteroneParameter = firstdayoftrimesterone != null ?
                new ObjectParameter("firstdayoftrimesterone", firstdayoftrimesterone) :
                new ObjectParameter("firstdayoftrimesterone", typeof(string));
    
            var lastdayoftrimesteroneParameter = lastdayoftrimesterone != null ?
                new ObjectParameter("lastdayoftrimesterone", lastdayoftrimesterone) :
                new ObjectParameter("lastdayoftrimesterone", typeof(string));
    
            var trisemtermoneParameter = trisemtermone != null ?
                new ObjectParameter("trisemtermone", trisemtermone) :
                new ObjectParameter("trisemtermone", typeof(string));
    
            var trisemtermonedescriptionParameter = trisemtermonedescription != null ?
                new ObjectParameter("trisemtermonedescription", trisemtermonedescription) :
                new ObjectParameter("trisemtermonedescription", typeof(string));
    
            var firstdayoftrisemtermoneParameter = firstdayoftrisemtermone != null ?
                new ObjectParameter("firstdayoftrisemtermone", firstdayoftrisemtermone) :
                new ObjectParameter("firstdayoftrisemtermone", typeof(string));
    
            var lastdayoftrisemtermoneParameter = lastdayoftrisemtermone != null ?
                new ObjectParameter("lastdayoftrisemtermone", lastdayoftrisemtermone) :
                new ObjectParameter("lastdayoftrisemtermone", typeof(string));
    
            var trisemtermtwoParameter = trisemtermtwo != null ?
                new ObjectParameter("trisemtermtwo", trisemtermtwo) :
                new ObjectParameter("trisemtermtwo", typeof(string));
    
            var trisemtermtwodescriptionParameter = trisemtermtwodescription != null ?
                new ObjectParameter("trisemtermtwodescription", trisemtermtwodescription) :
                new ObjectParameter("trisemtermtwodescription", typeof(string));
    
            var firstdayoftrisemtermtwoParameter = firstdayoftrisemtermtwo != null ?
                new ObjectParameter("firstdayoftrisemtermtwo", firstdayoftrisemtermtwo) :
                new ObjectParameter("firstdayoftrisemtermtwo", typeof(string));
    
            var lastdayoftrisemtermtwoParameter = lastdayoftrisemtermtwo != null ?
                new ObjectParameter("lastdayoftrisemtermtwo", lastdayoftrisemtermtwo) :
                new ObjectParameter("lastdayoftrisemtermtwo", typeof(string));
    
            var trimestertwoParameter = trimestertwo != null ?
                new ObjectParameter("trimestertwo", trimestertwo) :
                new ObjectParameter("trimestertwo", typeof(string));
    
            var trimestertwodescriptionParameter = trimestertwodescription != null ?
                new ObjectParameter("trimestertwodescription", trimestertwodescription) :
                new ObjectParameter("trimestertwodescription", typeof(string));
    
            var firstdayoftrimestertwoParameter = firstdayoftrimestertwo != null ?
                new ObjectParameter("firstdayoftrimestertwo", firstdayoftrimestertwo) :
                new ObjectParameter("firstdayoftrimestertwo", typeof(string));
    
            var lastdayoftrimestertwoParameter = lastdayoftrimestertwo != null ?
                new ObjectParameter("lastdayoftrimestertwo", lastdayoftrimestertwo) :
                new ObjectParameter("lastdayoftrimestertwo", typeof(string));
    
            var trisemtermthreeParameter = trisemtermthree != null ?
                new ObjectParameter("trisemtermthree", trisemtermthree) :
                new ObjectParameter("trisemtermthree", typeof(string));
    
            var trisemtermthreedescriptionParameter = trisemtermthreedescription != null ?
                new ObjectParameter("trisemtermthreedescription", trisemtermthreedescription) :
                new ObjectParameter("trisemtermthreedescription", typeof(string));
    
            var firstdayoftrisemtermthreeParameter = firstdayoftrisemtermthree != null ?
                new ObjectParameter("firstdayoftrisemtermthree", firstdayoftrisemtermthree) :
                new ObjectParameter("firstdayoftrisemtermthree", typeof(string));
    
            var lastdayoftrisemtermthreeParameter = lastdayoftrisemtermthree != null ?
                new ObjectParameter("lastdayoftrisemtermthree", lastdayoftrisemtermthree) :
                new ObjectParameter("lastdayoftrisemtermthree", typeof(string));
    
            var trisemtermfourParameter = trisemtermfour != null ?
                new ObjectParameter("trisemtermfour", trisemtermfour) :
                new ObjectParameter("trisemtermfour", typeof(string));
    
            var trisemtermfourdescriptionParameter = trisemtermfourdescription != null ?
                new ObjectParameter("trisemtermfourdescription", trisemtermfourdescription) :
                new ObjectParameter("trisemtermfourdescription", typeof(string));
    
            var firstdayoftrisemtermfourParameter = firstdayoftrisemtermfour != null ?
                new ObjectParameter("firstdayoftrisemtermfour", firstdayoftrisemtermfour) :
                new ObjectParameter("firstdayoftrisemtermfour", typeof(string));
    
            var lastdayoftrisemtermfourParameter = lastdayoftrisemtermfour != null ?
                new ObjectParameter("lastdayoftrisemtermfour", lastdayoftrisemtermfour) :
                new ObjectParameter("lastdayoftrisemtermfour", typeof(string));
    
            var trimesterthreeParameter = trimesterthree != null ?
                new ObjectParameter("trimesterthree", trimesterthree) :
                new ObjectParameter("trimesterthree", typeof(string));
    
            var trimesterthreedescriptionParameter = trimesterthreedescription != null ?
                new ObjectParameter("trimesterthreedescription", trimesterthreedescription) :
                new ObjectParameter("trimesterthreedescription", typeof(string));
    
            var firstdayoftrimesterthreeParameter = firstdayoftrimesterthree != null ?
                new ObjectParameter("firstdayoftrimesterthree", firstdayoftrimesterthree) :
                new ObjectParameter("firstdayoftrimesterthree", typeof(string));
    
            var lastdayoftrimesterthreeParameter = lastdayoftrimesterthree != null ?
                new ObjectParameter("lastdayoftrimesterthree", lastdayoftrimesterthree) :
                new ObjectParameter("lastdayoftrimesterthree", typeof(string));
    
            var trisemtermfiveParameter = trisemtermfive != null ?
                new ObjectParameter("trisemtermfive", trisemtermfive) :
                new ObjectParameter("trisemtermfive", typeof(string));
    
            var trisemtermfivedescriptionParameter = trisemtermfivedescription != null ?
                new ObjectParameter("trisemtermfivedescription", trisemtermfivedescription) :
                new ObjectParameter("trisemtermfivedescription", typeof(string));
    
            var firstdayoftrisemtermfiveParameter = firstdayoftrisemtermfive != null ?
                new ObjectParameter("firstdayoftrisemtermfive", firstdayoftrisemtermfive) :
                new ObjectParameter("firstdayoftrisemtermfive", typeof(string));
    
            var lastdayoftrisemtermfiveParameter = lastdayoftrisemtermfive != null ?
                new ObjectParameter("lastdayoftrisemtermfive", lastdayoftrisemtermfive) :
                new ObjectParameter("lastdayoftrisemtermfive", typeof(string));
    
            var trisemtermsixParameter = trisemtermsix != null ?
                new ObjectParameter("trisemtermsix", trisemtermsix) :
                new ObjectParameter("trisemtermsix", typeof(string));
    
            var trisemtermsixdescriptionParameter = trisemtermsixdescription != null ?
                new ObjectParameter("trisemtermsixdescription", trisemtermsixdescription) :
                new ObjectParameter("trisemtermsixdescription", typeof(string));
    
            var firstdayoftrisemtermsixParameter = firstdayoftrisemtermsix != null ?
                new ObjectParameter("firstdayoftrisemtermsix", firstdayoftrisemtermsix) :
                new ObjectParameter("firstdayoftrisemtermsix", typeof(string));
    
            var lastdayoftrisemtermsixParameter = lastdayoftrisemtermsix != null ?
                new ObjectParameter("lastdayoftrisemtermsix", lastdayoftrisemtermsix) :
                new ObjectParameter("lastdayoftrisemtermsix", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSchoolYearTrimester", schoolyearParameter, schoolidParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, trimesteroneParameter, trimesteronedescriptionParameter, firstdayoftrimesteroneParameter, lastdayoftrimesteroneParameter, trisemtermoneParameter, trisemtermonedescriptionParameter, firstdayoftrisemtermoneParameter, lastdayoftrisemtermoneParameter, trisemtermtwoParameter, trisemtermtwodescriptionParameter, firstdayoftrisemtermtwoParameter, lastdayoftrisemtermtwoParameter, trimestertwoParameter, trimestertwodescriptionParameter, firstdayoftrimestertwoParameter, lastdayoftrimestertwoParameter, trisemtermthreeParameter, trisemtermthreedescriptionParameter, firstdayoftrisemtermthreeParameter, lastdayoftrisemtermthreeParameter, trisemtermfourParameter, trisemtermfourdescriptionParameter, firstdayoftrisemtermfourParameter, lastdayoftrisemtermfourParameter, trimesterthreeParameter, trimesterthreedescriptionParameter, firstdayoftrimesterthreeParameter, lastdayoftrimesterthreeParameter, trisemtermfiveParameter, trisemtermfivedescriptionParameter, firstdayoftrisemtermfiveParameter, lastdayoftrisemtermfiveParameter, trisemtermsixParameter, trisemtermsixdescriptionParameter, firstdayoftrisemtermsixParameter, lastdayoftrisemtermsixParameter, isdefaultParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertSectionPeriods(Nullable<int> sectionId, string perioddetails, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSectionPeriods", sectionIdParameter, perioddetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertSectionStaff(Nullable<int> sectionId, string staffDetails, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertSectionStaff", sectionIdParameter, staffDetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSectionStudentsGrade(string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSectionStudentsGrade", valuesArrayParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspInsertStaffAddresses(Nullable<int> staffid, string streetnumbers, string streetnames, string zipcodes, string states, string cities, string counties, string countries, string neighbourhoods)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var streetnumbersParameter = streetnumbers != null ?
                new ObjectParameter("streetnumbers", streetnumbers) :
                new ObjectParameter("streetnumbers", typeof(string));
    
            var streetnamesParameter = streetnames != null ?
                new ObjectParameter("streetnames", streetnames) :
                new ObjectParameter("streetnames", typeof(string));
    
            var zipcodesParameter = zipcodes != null ?
                new ObjectParameter("zipcodes", zipcodes) :
                new ObjectParameter("zipcodes", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("states", states) :
                new ObjectParameter("states", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("cities", cities) :
                new ObjectParameter("cities", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("counties", counties) :
                new ObjectParameter("counties", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("countries", countries) :
                new ObjectParameter("countries", typeof(string));
    
            var neighbourhoodsParameter = neighbourhoods != null ?
                new ObjectParameter("neighbourhoods", neighbourhoods) :
                new ObjectParameter("neighbourhoods", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStaffAddresses", staffidParameter, streetnumbersParameter, streetnamesParameter, zipcodesParameter, statesParameter, citiesParameter, countiesParameter, countriesParameter, neighbourhoodsParameter);
        }
    
        public virtual int uspInsertStaffPhones(Nullable<int> staffid, string phonenumbers, string phonetypes)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var phonenumbersParameter = phonenumbers != null ?
                new ObjectParameter("phonenumbers", phonenumbers) :
                new ObjectParameter("phonenumbers", typeof(string));
    
            var phonetypesParameter = phonetypes != null ?
                new ObjectParameter("phonetypes", phonetypes) :
                new ObjectParameter("phonetypes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStaffPhones", staffidParameter, phonenumbersParameter, phonetypesParameter);
        }
    
        public virtual int uspInsertStateSubjectCodesHistory(string districtCourseName, string districtCourseNumber, Nullable<int> stateSubjectCode, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStateSubjectCodesHistory", districtCourseNameParameter, districtCourseNumberParameter, stateSubjectCodeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int uspInsertStudentAccommodationInformation(string accommodationTypeIds, string valuesArray, Nullable<int> studentId, Nullable<int> accommodationType)
        {
            var accommodationTypeIdsParameter = accommodationTypeIds != null ?
                new ObjectParameter("AccommodationTypeIds", accommodationTypeIds) :
                new ObjectParameter("AccommodationTypeIds", typeof(string));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var accommodationTypeParameter = accommodationType.HasValue ?
                new ObjectParameter("AccommodationType", accommodationType) :
                new ObjectParameter("AccommodationType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentAccommodationInformation", accommodationTypeIdsParameter, valuesArrayParameter, studentIdParameter, accommodationTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAddresses(Nullable<int> applicationid, string primarystreetnumber, string primarystreetname, string primarycity, string primarystate, string primaryzipcode, string primarycountry, string primaryneighbourhood, string primarycounty, string primaryapartment, string primarylot, string primaryother, string secondarystreetnumber, string secondarystreetname, string secondarycity, string secondarystate, string secondaryzipcode, string secondarycountry, string secondaryneighbourhood, string secondarycounty, string secondaryapartment, string secondarylot, string secondaryother, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var primarystreetnumberParameter = primarystreetnumber != null ?
                new ObjectParameter("primarystreetnumber", primarystreetnumber) :
                new ObjectParameter("primarystreetnumber", typeof(string));
    
            var primarystreetnameParameter = primarystreetname != null ?
                new ObjectParameter("primarystreetname", primarystreetname) :
                new ObjectParameter("primarystreetname", typeof(string));
    
            var primarycityParameter = primarycity != null ?
                new ObjectParameter("primarycity", primarycity) :
                new ObjectParameter("primarycity", typeof(string));
    
            var primarystateParameter = primarystate != null ?
                new ObjectParameter("primarystate", primarystate) :
                new ObjectParameter("primarystate", typeof(string));
    
            var primaryzipcodeParameter = primaryzipcode != null ?
                new ObjectParameter("primaryzipcode", primaryzipcode) :
                new ObjectParameter("primaryzipcode", typeof(string));
    
            var primarycountryParameter = primarycountry != null ?
                new ObjectParameter("primarycountry", primarycountry) :
                new ObjectParameter("primarycountry", typeof(string));
    
            var primaryneighbourhoodParameter = primaryneighbourhood != null ?
                new ObjectParameter("primaryneighbourhood", primaryneighbourhood) :
                new ObjectParameter("primaryneighbourhood", typeof(string));
    
            var primarycountyParameter = primarycounty != null ?
                new ObjectParameter("primarycounty", primarycounty) :
                new ObjectParameter("primarycounty", typeof(string));
    
            var primaryapartmentParameter = primaryapartment != null ?
                new ObjectParameter("primaryapartment", primaryapartment) :
                new ObjectParameter("primaryapartment", typeof(string));
    
            var primarylotParameter = primarylot != null ?
                new ObjectParameter("primarylot", primarylot) :
                new ObjectParameter("primarylot", typeof(string));
    
            var primaryotherParameter = primaryother != null ?
                new ObjectParameter("primaryother", primaryother) :
                new ObjectParameter("primaryother", typeof(string));
    
            var secondarystreetnumberParameter = secondarystreetnumber != null ?
                new ObjectParameter("secondarystreetnumber", secondarystreetnumber) :
                new ObjectParameter("secondarystreetnumber", typeof(string));
    
            var secondarystreetnameParameter = secondarystreetname != null ?
                new ObjectParameter("secondarystreetname", secondarystreetname) :
                new ObjectParameter("secondarystreetname", typeof(string));
    
            var secondarycityParameter = secondarycity != null ?
                new ObjectParameter("secondarycity", secondarycity) :
                new ObjectParameter("secondarycity", typeof(string));
    
            var secondarystateParameter = secondarystate != null ?
                new ObjectParameter("secondarystate", secondarystate) :
                new ObjectParameter("secondarystate", typeof(string));
    
            var secondaryzipcodeParameter = secondaryzipcode != null ?
                new ObjectParameter("secondaryzipcode", secondaryzipcode) :
                new ObjectParameter("secondaryzipcode", typeof(string));
    
            var secondarycountryParameter = secondarycountry != null ?
                new ObjectParameter("secondarycountry", secondarycountry) :
                new ObjectParameter("secondarycountry", typeof(string));
    
            var secondaryneighbourhoodParameter = secondaryneighbourhood != null ?
                new ObjectParameter("secondaryneighbourhood", secondaryneighbourhood) :
                new ObjectParameter("secondaryneighbourhood", typeof(string));
    
            var secondarycountyParameter = secondarycounty != null ?
                new ObjectParameter("secondarycounty", secondarycounty) :
                new ObjectParameter("secondarycounty", typeof(string));
    
            var secondaryapartmentParameter = secondaryapartment != null ?
                new ObjectParameter("secondaryapartment", secondaryapartment) :
                new ObjectParameter("secondaryapartment", typeof(string));
    
            var secondarylotParameter = secondarylot != null ?
                new ObjectParameter("secondarylot", secondarylot) :
                new ObjectParameter("secondarylot", typeof(string));
    
            var secondaryotherParameter = secondaryother != null ?
                new ObjectParameter("secondaryother", secondaryother) :
                new ObjectParameter("secondaryother", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAddresses", applicationidParameter, primarystreetnumberParameter, primarystreetnameParameter, primarycityParameter, primarystateParameter, primaryzipcodeParameter, primarycountryParameter, primaryneighbourhoodParameter, primarycountyParameter, primaryapartmentParameter, primarylotParameter, primaryotherParameter, secondarystreetnumberParameter, secondarystreetnameParameter, secondarycityParameter, secondarystateParameter, secondaryzipcodeParameter, secondarycountryParameter, secondaryneighbourhoodParameter, secondarycountyParameter, secondaryapartmentParameter, secondarylotParameter, secondaryotherParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAlert(Nullable<int> studentID, string healthtext, Nullable<System.DateTime> healthstartdate, Nullable<System.DateTime> healthenddate, string parenttext, Nullable<System.DateTime> parentstartdate, Nullable<System.DateTime> parentenddate, string openenrollmenttext, Nullable<System.DateTime> openenrollmentstartdate, Nullable<System.DateTime> openenrollmentenddate, string disciplinetext, Nullable<System.DateTime> disciplinestartdate, Nullable<System.DateTime> disciplineenddate, string misctext, Nullable<System.DateTime> miscstartdate, Nullable<System.DateTime> miscenddate, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var healthtextParameter = healthtext != null ?
                new ObjectParameter("healthtext", healthtext) :
                new ObjectParameter("healthtext", typeof(string));
    
            var healthstartdateParameter = healthstartdate.HasValue ?
                new ObjectParameter("healthstartdate", healthstartdate) :
                new ObjectParameter("healthstartdate", typeof(System.DateTime));
    
            var healthenddateParameter = healthenddate.HasValue ?
                new ObjectParameter("healthenddate", healthenddate) :
                new ObjectParameter("healthenddate", typeof(System.DateTime));
    
            var parenttextParameter = parenttext != null ?
                new ObjectParameter("parenttext", parenttext) :
                new ObjectParameter("parenttext", typeof(string));
    
            var parentstartdateParameter = parentstartdate.HasValue ?
                new ObjectParameter("parentstartdate", parentstartdate) :
                new ObjectParameter("parentstartdate", typeof(System.DateTime));
    
            var parentenddateParameter = parentenddate.HasValue ?
                new ObjectParameter("parentenddate", parentenddate) :
                new ObjectParameter("parentenddate", typeof(System.DateTime));
    
            var openenrollmenttextParameter = openenrollmenttext != null ?
                new ObjectParameter("openenrollmenttext", openenrollmenttext) :
                new ObjectParameter("openenrollmenttext", typeof(string));
    
            var openenrollmentstartdateParameter = openenrollmentstartdate.HasValue ?
                new ObjectParameter("openenrollmentstartdate", openenrollmentstartdate) :
                new ObjectParameter("openenrollmentstartdate", typeof(System.DateTime));
    
            var openenrollmentenddateParameter = openenrollmentenddate.HasValue ?
                new ObjectParameter("openenrollmentenddate", openenrollmentenddate) :
                new ObjectParameter("openenrollmentenddate", typeof(System.DateTime));
    
            var disciplinetextParameter = disciplinetext != null ?
                new ObjectParameter("disciplinetext", disciplinetext) :
                new ObjectParameter("disciplinetext", typeof(string));
    
            var disciplinestartdateParameter = disciplinestartdate.HasValue ?
                new ObjectParameter("disciplinestartdate", disciplinestartdate) :
                new ObjectParameter("disciplinestartdate", typeof(System.DateTime));
    
            var disciplineenddateParameter = disciplineenddate.HasValue ?
                new ObjectParameter("disciplineenddate", disciplineenddate) :
                new ObjectParameter("disciplineenddate", typeof(System.DateTime));
    
            var misctextParameter = misctext != null ?
                new ObjectParameter("misctext", misctext) :
                new ObjectParameter("misctext", typeof(string));
    
            var miscstartdateParameter = miscstartdate.HasValue ?
                new ObjectParameter("miscstartdate", miscstartdate) :
                new ObjectParameter("miscstartdate", typeof(System.DateTime));
    
            var miscenddateParameter = miscenddate.HasValue ?
                new ObjectParameter("miscenddate", miscenddate) :
                new ObjectParameter("miscenddate", typeof(System.DateTime));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAlert", studentIDParameter, healthtextParameter, healthstartdateParameter, healthenddateParameter, parenttextParameter, parentstartdateParameter, parentenddateParameter, openenrollmenttextParameter, openenrollmentstartdateParameter, openenrollmentenddateParameter, disciplinetextParameter, disciplinestartdateParameter, disciplineenddateParameter, misctextParameter, miscstartdateParameter, miscenddateParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAssessment(Nullable<int> assessmentPL, Nullable<int> test, Nullable<int> sTU, Nullable<int> districtId, Nullable<int> schoolId, Nullable<System.DateTime> assessmentDate, string arrayProgramCodes, Nullable<int> studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("Test", test) :
                new ObjectParameter("Test", typeof(int));
    
            var sTUParameter = sTU.HasValue ?
                new ObjectParameter("STU", sTU) :
                new ObjectParameter("STU", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var arrayProgramCodesParameter = arrayProgramCodes != null ?
                new ObjectParameter("ArrayProgramCodes", arrayProgramCodes) :
                new ObjectParameter("ArrayProgramCodes", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAssessment", assessmentPLParameter, testParameter, sTUParameter, districtIdParameter, schoolIdParameter, assessmentDateParameter, arrayProgramCodesParameter, studentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAssessmentAccommodations(Nullable<int> assessmentPL, string assessmentAreaCodeArray, Nullable<int> studentID, Nullable<System.DateTime> iEPDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentAreaCodeArrayParameter = assessmentAreaCodeArray != null ?
                new ObjectParameter("AssessmentAreaCodeArray", assessmentAreaCodeArray) :
                new ObjectParameter("AssessmentAreaCodeArray", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAssessmentAccommodations", assessmentPLParameter, assessmentAreaCodeArrayParameter, studentIDParameter, iEPDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspInsertStudentAssignmentGradeHistory(Nullable<int> assignmentStudentID, Nullable<decimal> grade, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var assignmentStudentIDParameter = assignmentStudentID.HasValue ?
                new ObjectParameter("AssignmentStudentID", assignmentStudentID) :
                new ObjectParameter("AssignmentStudentID", typeof(int));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentAssignmentGradeHistory", assignmentStudentIDParameter, gradeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAssignmentStatusAndComments(Nullable<int> studentID, Nullable<int> assignmentID, Nullable<int> assignmentStatusPL, string comments, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            var assignmentStatusPLParameter = assignmentStatusPL.HasValue ?
                new ObjectParameter("AssignmentStatusPL", assignmentStatusPL) :
                new ObjectParameter("AssignmentStatusPL", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAssignmentStatusAndComments", studentIDParameter, assignmentIDParameter, assignmentStatusPLParameter, commentsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentAttendacePatternForNextYear(Nullable<int> studentID, Nullable<int> schoolAttendancePatternId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolAttendancePatternIdParameter = schoolAttendancePatternId.HasValue ?
                new ObjectParameter("SchoolAttendancePatternId", schoolAttendancePatternId) :
                new ObjectParameter("SchoolAttendancePatternId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentAttendacePatternForNextYear", studentIDParameter, schoolAttendancePatternIdParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertStudentAttendanceInfo(string calendarYear, string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, Nullable<System.DateTime> attendanceDate)
        {
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentAttendanceInfo", calendarYearParameter, studentAttendanceValuesArrayParameter, attendanceTakenByParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentContactDetails(Nullable<int> applicationid, string contactnumbers, string phonetypes, string isprivatetypes, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var contactnumbersParameter = contactnumbers != null ?
                new ObjectParameter("contactnumbers", contactnumbers) :
                new ObjectParameter("contactnumbers", typeof(string));
    
            var phonetypesParameter = phonetypes != null ?
                new ObjectParameter("phonetypes", phonetypes) :
                new ObjectParameter("phonetypes", typeof(string));
    
            var isprivatetypesParameter = isprivatetypes != null ?
                new ObjectParameter("isprivatetypes", isprivatetypes) :
                new ObjectParameter("isprivatetypes", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentContactDetails", applicationidParameter, contactnumbersParameter, phonetypesParameter, isprivatetypesParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentCourseRequest(Nullable<int> studentID, string schoolCourseID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolCourseIDParameter = schoolCourseID != null ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentCourseRequest", studentIDParameter, schoolCourseIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentCTESetupRequest(Nullable<int> studentId, Nullable<int> cTEProgramOptionPL, Nullable<int> cTEStudentProgramStatusPL, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var cTEProgramOptionPLParameter = cTEProgramOptionPL.HasValue ?
                new ObjectParameter("CTEProgramOptionPL", cTEProgramOptionPL) :
                new ObjectParameter("CTEProgramOptionPL", typeof(int));
    
            var cTEStudentProgramStatusPLParameter = cTEStudentProgramStatusPL.HasValue ?
                new ObjectParameter("CTEStudentProgramStatusPL", cTEStudentProgramStatusPL) :
                new ObjectParameter("CTEStudentProgramStatusPL", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentCTESetupRequest", studentIdParameter, cTEProgramOptionPLParameter, cTEStudentProgramStatusPLParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentDashboardItems(string dashboardString, Nullable<int> portalAccountID, Nullable<int> studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var dashboardStringParameter = dashboardString != null ?
                new ObjectParameter("DashboardString", dashboardString) :
                new ObjectParameter("DashboardString", typeof(string));
    
            var portalAccountIDParameter = portalAccountID.HasValue ?
                new ObjectParameter("PortalAccountID", portalAccountID) :
                new ObjectParameter("PortalAccountID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentDashboardItems", dashboardStringParameter, portalAccountIDParameter, studentIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertStudentDayAttendanceInfo(string calendarYear, string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, string classIds, Nullable<System.DateTime> attendanceDate)
        {
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentDayAttendanceInfo", calendarYearParameter, studentAttendanceValuesArrayParameter, attendanceTakenByParameter, classIdsParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentDisciplineIncident(Nullable<int> studentID, Nullable<System.DateTime> incidentDate, string incidentTime, Nullable<int> schoolID, Nullable<int> incidentSchoolID, Nullable<int> disciplineReason1, Nullable<int> disciplineReason2, Nullable<int> disciplineReason3, Nullable<int> disciplineReason4, Nullable<int> disciplineReason5, Nullable<int> typeOfDisciplineAction, Nullable<System.DateTime> startDate, Nullable<decimal> length, Nullable<int> modifiedPL, Nullable<int> referToAltEdService, string incidentDescription, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var incidentDateParameter = incidentDate.HasValue ?
                new ObjectParameter("IncidentDate", incidentDate) :
                new ObjectParameter("IncidentDate", typeof(System.DateTime));
    
            var incidentTimeParameter = incidentTime != null ?
                new ObjectParameter("IncidentTime", incidentTime) :
                new ObjectParameter("IncidentTime", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var incidentSchoolIDParameter = incidentSchoolID.HasValue ?
                new ObjectParameter("IncidentSchoolID", incidentSchoolID) :
                new ObjectParameter("IncidentSchoolID", typeof(int));
    
            var disciplineReason1Parameter = disciplineReason1.HasValue ?
                new ObjectParameter("DisciplineReason1", disciplineReason1) :
                new ObjectParameter("DisciplineReason1", typeof(int));
    
            var disciplineReason2Parameter = disciplineReason2.HasValue ?
                new ObjectParameter("DisciplineReason2", disciplineReason2) :
                new ObjectParameter("DisciplineReason2", typeof(int));
    
            var disciplineReason3Parameter = disciplineReason3.HasValue ?
                new ObjectParameter("DisciplineReason3", disciplineReason3) :
                new ObjectParameter("DisciplineReason3", typeof(int));
    
            var disciplineReason4Parameter = disciplineReason4.HasValue ?
                new ObjectParameter("DisciplineReason4", disciplineReason4) :
                new ObjectParameter("DisciplineReason4", typeof(int));
    
            var disciplineReason5Parameter = disciplineReason5.HasValue ?
                new ObjectParameter("DisciplineReason5", disciplineReason5) :
                new ObjectParameter("DisciplineReason5", typeof(int));
    
            var typeOfDisciplineActionParameter = typeOfDisciplineAction.HasValue ?
                new ObjectParameter("TypeOfDisciplineAction", typeOfDisciplineAction) :
                new ObjectParameter("TypeOfDisciplineAction", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(decimal));
    
            var modifiedPLParameter = modifiedPL.HasValue ?
                new ObjectParameter("ModifiedPL", modifiedPL) :
                new ObjectParameter("ModifiedPL", typeof(int));
    
            var referToAltEdServiceParameter = referToAltEdService.HasValue ?
                new ObjectParameter("ReferToAltEdService", referToAltEdService) :
                new ObjectParameter("ReferToAltEdService", typeof(int));
    
            var incidentDescriptionParameter = incidentDescription != null ?
                new ObjectParameter("IncidentDescription", incidentDescription) :
                new ObjectParameter("IncidentDescription", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentDisciplineIncident", studentIDParameter, incidentDateParameter, incidentTimeParameter, schoolIDParameter, incidentSchoolIDParameter, disciplineReason1Parameter, disciplineReason2Parameter, disciplineReason3Parameter, disciplineReason4Parameter, disciplineReason5Parameter, typeOfDisciplineActionParameter, startDateParameter, lengthParameter, modifiedPLParameter, referToAltEdServiceParameter, incidentDescriptionParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentDynamicContacts(Nullable<int> studentID, string studentContactIDs, string childliveswith, string prefixes, string suffixes, string contactFirstnames, string contactMiddlenames, string contactLastnames, string relationshipwithStudents, string isContactLegalCustodians, string isContactLegalGuardians, string addressSameAsStudents, string priorityOrders, string streetNumbers, string streetNames, string cities, string apartments, string lots, string others, string states, string zipcodes, string counties, string countries, string subdivisions, string emailTypes, string emailAddresses, string phoneSameAsStudentPhones, string contactPhoneNumbers, string contactPhoneTypes, string contactPhoneExtensions, string contactPhonePrivates, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentContactIDsParameter = studentContactIDs != null ?
                new ObjectParameter("StudentContactIDs", studentContactIDs) :
                new ObjectParameter("StudentContactIDs", typeof(string));
    
            var childliveswithParameter = childliveswith != null ?
                new ObjectParameter("Childliveswith", childliveswith) :
                new ObjectParameter("Childliveswith", typeof(string));
    
            var prefixesParameter = prefixes != null ?
                new ObjectParameter("Prefixes", prefixes) :
                new ObjectParameter("Prefixes", typeof(string));
    
            var suffixesParameter = suffixes != null ?
                new ObjectParameter("Suffixes", suffixes) :
                new ObjectParameter("Suffixes", typeof(string));
    
            var contactFirstnamesParameter = contactFirstnames != null ?
                new ObjectParameter("ContactFirstnames", contactFirstnames) :
                new ObjectParameter("ContactFirstnames", typeof(string));
    
            var contactMiddlenamesParameter = contactMiddlenames != null ?
                new ObjectParameter("ContactMiddlenames", contactMiddlenames) :
                new ObjectParameter("ContactMiddlenames", typeof(string));
    
            var contactLastnamesParameter = contactLastnames != null ?
                new ObjectParameter("ContactLastnames", contactLastnames) :
                new ObjectParameter("ContactLastnames", typeof(string));
    
            var relationshipwithStudentsParameter = relationshipwithStudents != null ?
                new ObjectParameter("RelationshipwithStudents", relationshipwithStudents) :
                new ObjectParameter("RelationshipwithStudents", typeof(string));
    
            var isContactLegalCustodiansParameter = isContactLegalCustodians != null ?
                new ObjectParameter("IsContactLegalCustodians", isContactLegalCustodians) :
                new ObjectParameter("IsContactLegalCustodians", typeof(string));
    
            var isContactLegalGuardiansParameter = isContactLegalGuardians != null ?
                new ObjectParameter("IsContactLegalGuardians", isContactLegalGuardians) :
                new ObjectParameter("IsContactLegalGuardians", typeof(string));
    
            var addressSameAsStudentsParameter = addressSameAsStudents != null ?
                new ObjectParameter("AddressSameAsStudents", addressSameAsStudents) :
                new ObjectParameter("AddressSameAsStudents", typeof(string));
    
            var priorityOrdersParameter = priorityOrders != null ?
                new ObjectParameter("PriorityOrders", priorityOrders) :
                new ObjectParameter("PriorityOrders", typeof(string));
    
            var streetNumbersParameter = streetNumbers != null ?
                new ObjectParameter("StreetNumbers", streetNumbers) :
                new ObjectParameter("StreetNumbers", typeof(string));
    
            var streetNamesParameter = streetNames != null ?
                new ObjectParameter("StreetNames", streetNames) :
                new ObjectParameter("StreetNames", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("Cities", cities) :
                new ObjectParameter("Cities", typeof(string));
    
            var apartmentsParameter = apartments != null ?
                new ObjectParameter("Apartments", apartments) :
                new ObjectParameter("Apartments", typeof(string));
    
            var lotsParameter = lots != null ?
                new ObjectParameter("Lots", lots) :
                new ObjectParameter("Lots", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("Others", others) :
                new ObjectParameter("Others", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("States", states) :
                new ObjectParameter("States", typeof(string));
    
            var zipcodesParameter = zipcodes != null ?
                new ObjectParameter("Zipcodes", zipcodes) :
                new ObjectParameter("Zipcodes", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("Countries", countries) :
                new ObjectParameter("Countries", typeof(string));
    
            var subdivisionsParameter = subdivisions != null ?
                new ObjectParameter("Subdivisions", subdivisions) :
                new ObjectParameter("Subdivisions", typeof(string));
    
            var emailTypesParameter = emailTypes != null ?
                new ObjectParameter("EmailTypes", emailTypes) :
                new ObjectParameter("EmailTypes", typeof(string));
    
            var emailAddressesParameter = emailAddresses != null ?
                new ObjectParameter("EmailAddresses", emailAddresses) :
                new ObjectParameter("EmailAddresses", typeof(string));
    
            var phoneSameAsStudentPhonesParameter = phoneSameAsStudentPhones != null ?
                new ObjectParameter("PhoneSameAsStudentPhones", phoneSameAsStudentPhones) :
                new ObjectParameter("PhoneSameAsStudentPhones", typeof(string));
    
            var contactPhoneNumbersParameter = contactPhoneNumbers != null ?
                new ObjectParameter("ContactPhoneNumbers", contactPhoneNumbers) :
                new ObjectParameter("ContactPhoneNumbers", typeof(string));
    
            var contactPhoneTypesParameter = contactPhoneTypes != null ?
                new ObjectParameter("ContactPhoneTypes", contactPhoneTypes) :
                new ObjectParameter("ContactPhoneTypes", typeof(string));
    
            var contactPhoneExtensionsParameter = contactPhoneExtensions != null ?
                new ObjectParameter("ContactPhoneExtensions", contactPhoneExtensions) :
                new ObjectParameter("ContactPhoneExtensions", typeof(string));
    
            var contactPhonePrivatesParameter = contactPhonePrivates != null ?
                new ObjectParameter("ContactPhonePrivates", contactPhonePrivates) :
                new ObjectParameter("ContactPhonePrivates", typeof(string));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentDynamicContacts", studentIDParameter, studentContactIDsParameter, childliveswithParameter, prefixesParameter, suffixesParameter, contactFirstnamesParameter, contactMiddlenamesParameter, contactLastnamesParameter, relationshipwithStudentsParameter, isContactLegalCustodiansParameter, isContactLegalGuardiansParameter, addressSameAsStudentsParameter, priorityOrdersParameter, streetNumbersParameter, streetNamesParameter, citiesParameter, apartmentsParameter, lotsParameter, othersParameter, statesParameter, zipcodesParameter, countiesParameter, countriesParameter, subdivisionsParameter, emailTypesParameter, emailAddressesParameter, phoneSameAsStudentPhonesParameter, contactPhoneNumbersParameter, contactPhoneTypesParameter, contactPhoneExtensionsParameter, contactPhonePrivatesParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentEnrollments(Nullable<int> studentID, string enrollmentDate, Nullable<int> enrollmentCode, string enrollmentDescription, Nullable<int> admittedFromDistrict, Nullable<int> districtOfResidence, string districtResidenceIRN, Nullable<int> relationshipTypeCode, Nullable<int> formerSchoolDistrict, Nullable<int> formerSchoolAttended, Nullable<int> formerSchoolType, Nullable<int> enrolledSchoolID, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var enrollmentDateParameter = enrollmentDate != null ?
                new ObjectParameter("EnrollmentDate", enrollmentDate) :
                new ObjectParameter("EnrollmentDate", typeof(string));
    
            var enrollmentCodeParameter = enrollmentCode.HasValue ?
                new ObjectParameter("EnrollmentCode", enrollmentCode) :
                new ObjectParameter("EnrollmentCode", typeof(int));
    
            var enrollmentDescriptionParameter = enrollmentDescription != null ?
                new ObjectParameter("EnrollmentDescription", enrollmentDescription) :
                new ObjectParameter("EnrollmentDescription", typeof(string));
    
            var admittedFromDistrictParameter = admittedFromDistrict.HasValue ?
                new ObjectParameter("AdmittedFromDistrict", admittedFromDistrict) :
                new ObjectParameter("AdmittedFromDistrict", typeof(int));
    
            var districtOfResidenceParameter = districtOfResidence.HasValue ?
                new ObjectParameter("DistrictOfResidence", districtOfResidence) :
                new ObjectParameter("DistrictOfResidence", typeof(int));
    
            var districtResidenceIRNParameter = districtResidenceIRN != null ?
                new ObjectParameter("DistrictResidenceIRN", districtResidenceIRN) :
                new ObjectParameter("DistrictResidenceIRN", typeof(string));
    
            var relationshipTypeCodeParameter = relationshipTypeCode.HasValue ?
                new ObjectParameter("RelationshipTypeCode", relationshipTypeCode) :
                new ObjectParameter("RelationshipTypeCode", typeof(int));
    
            var formerSchoolDistrictParameter = formerSchoolDistrict.HasValue ?
                new ObjectParameter("FormerSchoolDistrict", formerSchoolDistrict) :
                new ObjectParameter("FormerSchoolDistrict", typeof(int));
    
            var formerSchoolAttendedParameter = formerSchoolAttended.HasValue ?
                new ObjectParameter("FormerSchoolAttended", formerSchoolAttended) :
                new ObjectParameter("FormerSchoolAttended", typeof(int));
    
            var formerSchoolTypeParameter = formerSchoolType.HasValue ?
                new ObjectParameter("FormerSchoolType", formerSchoolType) :
                new ObjectParameter("FormerSchoolType", typeof(int));
    
            var enrolledSchoolIDParameter = enrolledSchoolID.HasValue ?
                new ObjectParameter("EnrolledSchoolID", enrolledSchoolID) :
                new ObjectParameter("EnrolledSchoolID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentEnrollments", studentIDParameter, enrollmentDateParameter, enrollmentCodeParameter, enrollmentDescriptionParameter, admittedFromDistrictParameter, districtOfResidenceParameter, districtResidenceIRNParameter, relationshipTypeCodeParameter, formerSchoolDistrictParameter, formerSchoolAttendedParameter, formerSchoolTypeParameter, enrolledSchoolIDParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentExcessiveHabitualAbsDetails(Nullable<int> absenceEventPL, Nullable<int> hoursOfAbsencePL, Nullable<int> absenceTypePL, Nullable<int> categoryOfHoursPL, Nullable<int> typeofNoticePL, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> noticeDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string studentID)
        {
            var absenceEventPLParameter = absenceEventPL.HasValue ?
                new ObjectParameter("AbsenceEventPL", absenceEventPL) :
                new ObjectParameter("AbsenceEventPL", typeof(int));
    
            var hoursOfAbsencePLParameter = hoursOfAbsencePL.HasValue ?
                new ObjectParameter("HoursOfAbsencePL", hoursOfAbsencePL) :
                new ObjectParameter("HoursOfAbsencePL", typeof(int));
    
            var absenceTypePLParameter = absenceTypePL.HasValue ?
                new ObjectParameter("AbsenceTypePL", absenceTypePL) :
                new ObjectParameter("AbsenceTypePL", typeof(int));
    
            var categoryOfHoursPLParameter = categoryOfHoursPL.HasValue ?
                new ObjectParameter("CategoryOfHoursPL", categoryOfHoursPL) :
                new ObjectParameter("CategoryOfHoursPL", typeof(int));
    
            var typeofNoticePLParameter = typeofNoticePL.HasValue ?
                new ObjectParameter("TypeofNoticePL", typeofNoticePL) :
                new ObjectParameter("TypeofNoticePL", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var noticeDateParameter = noticeDate.HasValue ?
                new ObjectParameter("NoticeDate", noticeDate) :
                new ObjectParameter("NoticeDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var studentIDParameter = studentID != null ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentExcessiveHabitualAbsDetails", absenceEventPLParameter, hoursOfAbsencePLParameter, absenceTypePLParameter, categoryOfHoursPLParameter, typeofNoticePLParameter, eventDateParameter, noticeDateParameter, createdByParameter, createdDateParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentGPA(Nullable<int> studentID, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentGPA", studentIDParameter, valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentGrade(Nullable<int> studentId, string courseNumber, string courseName, string sectionNumber, string termName, Nullable<int> finalGradePercentage, string finalGradeAlpha, Nullable<decimal> creditAttempted, Nullable<decimal> creditEarned, string districtName, string schoolName, string schoolYear, string teacherName, Nullable<int> studentGradeLevelId, Nullable<int> subjectAreaForCreditId, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> isHistorical, string schoolCourseEndYear)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var termNameParameter = termName != null ?
                new ObjectParameter("TermName", termName) :
                new ObjectParameter("TermName", typeof(string));
    
            var finalGradePercentageParameter = finalGradePercentage.HasValue ?
                new ObjectParameter("FinalGradePercentage", finalGradePercentage) :
                new ObjectParameter("FinalGradePercentage", typeof(int));
    
            var finalGradeAlphaParameter = finalGradeAlpha != null ?
                new ObjectParameter("FinalGradeAlpha", finalGradeAlpha) :
                new ObjectParameter("FinalGradeAlpha", typeof(string));
    
            var creditAttemptedParameter = creditAttempted.HasValue ?
                new ObjectParameter("CreditAttempted", creditAttempted) :
                new ObjectParameter("CreditAttempted", typeof(decimal));
    
            var creditEarnedParameter = creditEarned.HasValue ?
                new ObjectParameter("CreditEarned", creditEarned) :
                new ObjectParameter("CreditEarned", typeof(decimal));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var studentGradeLevelIdParameter = studentGradeLevelId.HasValue ?
                new ObjectParameter("StudentGradeLevelId", studentGradeLevelId) :
                new ObjectParameter("StudentGradeLevelId", typeof(int));
    
            var subjectAreaForCreditIdParameter = subjectAreaForCreditId.HasValue ?
                new ObjectParameter("SubjectAreaForCreditId", subjectAreaForCreditId) :
                new ObjectParameter("SubjectAreaForCreditId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isHistoricalParameter = isHistorical.HasValue ?
                new ObjectParameter("isHistorical", isHistorical) :
                new ObjectParameter("isHistorical", typeof(bool));
    
            var schoolCourseEndYearParameter = schoolCourseEndYear != null ?
                new ObjectParameter("SchoolCourseEndYear", schoolCourseEndYear) :
                new ObjectParameter("SchoolCourseEndYear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentGrade", studentIdParameter, courseNumberParameter, courseNameParameter, sectionNumberParameter, termNameParameter, finalGradePercentageParameter, finalGradeAlphaParameter, creditAttemptedParameter, creditEarnedParameter, districtNameParameter, schoolNameParameter, schoolYearParameter, teacherNameParameter, studentGradeLevelIdParameter, subjectAreaForCreditIdParameter, createdByParameter, createdDateParameter, isHistoricalParameter, schoolCourseEndYearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentGradRequirements(Nullable<int> studentId, Nullable<System.DateTime> iEPDate, Nullable<int> iEPDateTypePL, Nullable<int> assessmentTypePL, string assessmentAreaPL, Nullable<int> exemptionFlagPL, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var iEPDateTypePLParameter = iEPDateTypePL.HasValue ?
                new ObjectParameter("IEPDateTypePL", iEPDateTypePL) :
                new ObjectParameter("IEPDateTypePL", typeof(int));
    
            var assessmentTypePLParameter = assessmentTypePL.HasValue ?
                new ObjectParameter("AssessmentTypePL", assessmentTypePL) :
                new ObjectParameter("AssessmentTypePL", typeof(int));
    
            var assessmentAreaPLParameter = assessmentAreaPL != null ?
                new ObjectParameter("AssessmentAreaPL", assessmentAreaPL) :
                new ObjectParameter("AssessmentAreaPL", typeof(string));
    
            var exemptionFlagPLParameter = exemptionFlagPL.HasValue ?
                new ObjectParameter("ExemptionFlagPL", exemptionFlagPL) :
                new ObjectParameter("ExemptionFlagPL", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentGradRequirements", studentIdParameter, iEPDateParameter, iEPDateTypePLParameter, assessmentTypePLParameter, assessmentAreaPLParameter, exemptionFlagPLParameter, isActiveParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentHistoricaGrade(Nullable<int> studentId, string schoolYear, string districtName, string schoolName, Nullable<int> studentGradeLevelId, string courseName, Nullable<int> subjectAreaForCreditId, string courseComments, Nullable<int> coreAreaCode, Nullable<bool> isHighSchoolCredit, Nullable<bool> iSGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintOnTranscript, Nullable<bool> isPrintOnReportCard, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<bool> isHistorical, Nullable<int> studentGradReqDetailId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var studentGradeLevelIdParameter = studentGradeLevelId.HasValue ?
                new ObjectParameter("StudentGradeLevelId", studentGradeLevelId) :
                new ObjectParameter("StudentGradeLevelId", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var subjectAreaForCreditIdParameter = subjectAreaForCreditId.HasValue ?
                new ObjectParameter("SubjectAreaForCreditId", subjectAreaForCreditId) :
                new ObjectParameter("SubjectAreaForCreditId", typeof(int));
    
            var courseCommentsParameter = courseComments != null ?
                new ObjectParameter("CourseComments", courseComments) :
                new ObjectParameter("CourseComments", typeof(string));
    
            var coreAreaCodeParameter = coreAreaCode.HasValue ?
                new ObjectParameter("CoreAreaCode", coreAreaCode) :
                new ObjectParameter("CoreAreaCode", typeof(int));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var iSGPAParameter = iSGPA.HasValue ?
                new ObjectParameter("ISGPA", iSGPA) :
                new ObjectParameter("ISGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintOnTranscriptParameter = isPrintOnTranscript.HasValue ?
                new ObjectParameter("IsPrintOnTranscript", isPrintOnTranscript) :
                new ObjectParameter("IsPrintOnTranscript", typeof(bool));
    
            var isPrintOnReportCardParameter = isPrintOnReportCard.HasValue ?
                new ObjectParameter("IsPrintOnReportCard", isPrintOnReportCard) :
                new ObjectParameter("IsPrintOnReportCard", typeof(bool));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var isHistoricalParameter = isHistorical.HasValue ?
                new ObjectParameter("isHistorical", isHistorical) :
                new ObjectParameter("isHistorical", typeof(bool));
    
            var studentGradReqDetailIdParameter = studentGradReqDetailId.HasValue ?
                new ObjectParameter("StudentGradReqDetailId", studentGradReqDetailId) :
                new ObjectParameter("StudentGradReqDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentHistoricaGrade", studentIdParameter, schoolYearParameter, districtNameParameter, schoolNameParameter, studentGradeLevelIdParameter, courseNameParameter, subjectAreaForCreditIdParameter, courseCommentsParameter, coreAreaCodeParameter, isHighSchoolCreditParameter, iSGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintOnTranscriptParameter, isPrintOnReportCardParameter, valuesArrayParameter, createdByParameter, createdDateParameter, isHistoricalParameter, studentGradReqDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentHomeroomAttendanceForMultipleDays(Nullable<int> studentID, Nullable<int> schoolYearID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string attendanceDates, Nullable<int> attendanceCodePL, Nullable<int> reasonPL, Nullable<System.TimeSpan> timeIn, Nullable<System.TimeSpan> timeOut, string studentAttendanceValuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var attendanceDatesParameter = attendanceDates != null ?
                new ObjectParameter("AttendanceDates", attendanceDates) :
                new ObjectParameter("AttendanceDates", typeof(string));
    
            var attendanceCodePLParameter = attendanceCodePL.HasValue ?
                new ObjectParameter("AttendanceCodePL", attendanceCodePL) :
                new ObjectParameter("AttendanceCodePL", typeof(int));
    
            var reasonPLParameter = reasonPL.HasValue ?
                new ObjectParameter("ReasonPL", reasonPL) :
                new ObjectParameter("ReasonPL", typeof(int));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.TimeSpan));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.TimeSpan));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentHomeroomAttendanceForMultipleDays", studentIDParameter, schoolYearIDParameter, startDateParameter, endDateParameter, attendanceDatesParameter, attendanceCodePLParameter, reasonPLParameter, timeInParameter, timeOutParameter, studentAttendanceValuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentHomeRoomAttendanceInfo(Nullable<int> schoolYearID, string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, Nullable<System.DateTime> attendanceDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentHomeRoomAttendanceInfo", schoolYearIDParameter, studentAttendanceValuesArrayParameter, attendanceTakenByParameter, attendanceDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentInterventionStaff(Nullable<int> studentId, Nullable<int> scheduleId, string staffDetails, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentInterventionStaff", studentIdParameter, scheduleIdParameter, staffDetailsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentNextYearFileData(Nullable<int> schoolID, Nullable<bool> deleteFlag, Nullable<System.DateTime> mostRescentDate, Nullable<bool> enrolledFlag, Nullable<bool> withdrawlFlag, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var deleteFlagParameter = deleteFlag.HasValue ?
                new ObjectParameter("DeleteFlag", deleteFlag) :
                new ObjectParameter("DeleteFlag", typeof(bool));
    
            var mostRescentDateParameter = mostRescentDate.HasValue ?
                new ObjectParameter("MostRescentDate", mostRescentDate) :
                new ObjectParameter("MostRescentDate", typeof(System.DateTime));
    
            var enrolledFlagParameter = enrolledFlag.HasValue ?
                new ObjectParameter("EnrolledFlag", enrolledFlag) :
                new ObjectParameter("EnrolledFlag", typeof(bool));
    
            var withdrawlFlagParameter = withdrawlFlag.HasValue ?
                new ObjectParameter("WithdrawlFlag", withdrawlFlag) :
                new ObjectParameter("WithdrawlFlag", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentNextYearFileData", schoolIDParameter, deleteFlagParameter, mostRescentDateParameter, enrolledFlagParameter, withdrawlFlagParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentNextYearFileDataNewlyEnrolledStudents(Nullable<int> schoolID, Nullable<System.DateTime> mostRescentDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var mostRescentDateParameter = mostRescentDate.HasValue ?
                new ObjectParameter("MostRescentDate", mostRescentDate) :
                new ObjectParameter("MostRescentDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentNextYearFileDataNewlyEnrolledStudents", schoolIDParameter, mostRescentDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentNextYearGradeLevelsForNextYearData(Nullable<int> nextSchoolID, string students, string nextGradeLevels, string nextStateGradeLevels, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var studentsParameter = students != null ?
                new ObjectParameter("Students", students) :
                new ObjectParameter("Students", typeof(string));
    
            var nextGradeLevelsParameter = nextGradeLevels != null ?
                new ObjectParameter("NextGradeLevels", nextGradeLevels) :
                new ObjectParameter("NextGradeLevels", typeof(string));
    
            var nextStateGradeLevelsParameter = nextStateGradeLevels != null ?
                new ObjectParameter("NextStateGradeLevels", nextStateGradeLevels) :
                new ObjectParameter("NextStateGradeLevels", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentNextYearGradeLevelsForNextYearData", nextSchoolIDParameter, studentsParameter, nextGradeLevelsParameter, nextStateGradeLevelsParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentNextYearHomeRoomData(Nullable<int> nextSchoolID, string students, string homeRoomIDS, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var studentsParameter = students != null ?
                new ObjectParameter("Students", students) :
                new ObjectParameter("Students", typeof(string));
    
            var homeRoomIDSParameter = homeRoomIDS != null ?
                new ObjectParameter("HomeRoomIDS", homeRoomIDS) :
                new ObjectParameter("HomeRoomIDS", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentNextYearHomeRoomData", nextSchoolIDParameter, studentsParameter, homeRoomIDSParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<string> uspInsertStudentNote(string studentIds, Nullable<System.DateTime> openDate, Nullable<int> categoryId, Nullable<int> subjectId, Nullable<int> methodId, Nullable<bool> followUp, string followUpDate, Nullable<int> staffId, string closedDate, string description, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdsParameter = studentIds != null ?
                new ObjectParameter("StudentIds", studentIds) :
                new ObjectParameter("StudentIds", typeof(string));
    
            var openDateParameter = openDate.HasValue ?
                new ObjectParameter("openDate", openDate) :
                new ObjectParameter("openDate", typeof(System.DateTime));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var methodIdParameter = methodId.HasValue ?
                new ObjectParameter("MethodId", methodId) :
                new ObjectParameter("MethodId", typeof(int));
    
            var followUpParameter = followUp.HasValue ?
                new ObjectParameter("FollowUp", followUp) :
                new ObjectParameter("FollowUp", typeof(bool));
    
            var followUpDateParameter = followUpDate != null ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(string));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var closedDateParameter = closedDate != null ?
                new ObjectParameter("ClosedDate", closedDate) :
                new ObjectParameter("ClosedDate", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspInsertStudentNote", studentIdsParameter, openDateParameter, categoryIdParameter, subjectIdParameter, methodIdParameter, followUpParameter, followUpDateParameter, staffIdParameter, closedDateParameter, descriptionParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentOrientationDetails(string orientationdate, string orientationtime, Nullable<int> orientationtypepl, Nullable<int> counselorid, Nullable<int> location, Nullable<int> room, Nullable<int> studentid, Nullable<int> schoolid, Nullable<int> applicationid, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var orientationdateParameter = orientationdate != null ?
                new ObjectParameter("orientationdate", orientationdate) :
                new ObjectParameter("orientationdate", typeof(string));
    
            var orientationtimeParameter = orientationtime != null ?
                new ObjectParameter("orientationtime", orientationtime) :
                new ObjectParameter("orientationtime", typeof(string));
    
            var orientationtypeplParameter = orientationtypepl.HasValue ?
                new ObjectParameter("orientationtypepl", orientationtypepl) :
                new ObjectParameter("orientationtypepl", typeof(int));
    
            var counseloridParameter = counselorid.HasValue ?
                new ObjectParameter("counselorid", counselorid) :
                new ObjectParameter("counselorid", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var roomParameter = room.HasValue ?
                new ObjectParameter("room", room) :
                new ObjectParameter("room", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentOrientationDetails", orientationdateParameter, orientationtimeParameter, orientationtypeplParameter, counseloridParameter, locationParameter, roomParameter, studentidParameter, schoolidParameter, applicationidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentPeriodAttendanceInfo(Nullable<int> schoolYearID, string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, Nullable<int> schoolCourseSectionID, Nullable<System.DateTime> attendanceDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentPeriodAttendanceInfo", schoolYearIDParameter, studentAttendanceValuesArrayParameter, attendanceTakenByParameter, schoolCourseSectionIDParameter, attendanceDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentPhoto(Nullable<int> studentID, byte[] photoFile, string photosize, string photoname, string phototype, string createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(int));
    
            var photoFileParameter = photoFile != null ?
                new ObjectParameter("photoFile", photoFile) :
                new ObjectParameter("photoFile", typeof(byte[]));
    
            var photosizeParameter = photosize != null ?
                new ObjectParameter("photosize", photosize) :
                new ObjectParameter("photosize", typeof(string));
    
            var photonameParameter = photoname != null ?
                new ObjectParameter("photoname", photoname) :
                new ObjectParameter("photoname", typeof(string));
    
            var phototypeParameter = phototype != null ?
                new ObjectParameter("phototype", phototype) :
                new ObjectParameter("phototype", typeof(string));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentPhoto", studentIDParameter, photoFileParameter, photosizeParameter, photonameParameter, phototypeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertStudentProgramHistory(Nullable<int> studentProgramID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentProgramIDParameter = studentProgramID.HasValue ?
                new ObjectParameter("StudentProgramID", studentProgramID) :
                new ObjectParameter("StudentProgramID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentProgramHistory", studentProgramIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsAssignmentsGrade(string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsAssignmentsGrade", valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspInsertStudentsAttendanceInfo(string calendarYear, string studentsAttendanceValuesArray, Nullable<long> attendanceTakenBy, Nullable<System.DateTime> attendanceDate)
        {
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var studentsAttendanceValuesArrayParameter = studentsAttendanceValuesArray != null ?
                new ObjectParameter("StudentsAttendanceValuesArray", studentsAttendanceValuesArray) :
                new ObjectParameter("StudentsAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentsAttendanceInfo", calendarYearParameter, studentsAttendanceValuesArrayParameter, attendanceTakenByParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsETRInformation(Nullable<int> studentsETRID, Nullable<int> specialEducationTypePL, Nullable<int> eTREventTypeId, Nullable<System.DateTime> eTREventDate, Nullable<int> eTRDisabilityConditionId, Nullable<int> eTRNonComplainceId, Nullable<int> eTROutcomeId, Nullable<System.DateTime> eTROutcomeBeginDate, Nullable<System.DateTime> eTROutcomeEndDate, Nullable<int> eTRFundingCodeTypeId, Nullable<int> studentId, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentsETRIDParameter = studentsETRID.HasValue ?
                new ObjectParameter("StudentsETRID", studentsETRID) :
                new ObjectParameter("StudentsETRID", typeof(int));
    
            var specialEducationTypePLParameter = specialEducationTypePL.HasValue ?
                new ObjectParameter("SpecialEducationTypePL", specialEducationTypePL) :
                new ObjectParameter("SpecialEducationTypePL", typeof(int));
    
            var eTREventTypeIdParameter = eTREventTypeId.HasValue ?
                new ObjectParameter("ETREventTypeId", eTREventTypeId) :
                new ObjectParameter("ETREventTypeId", typeof(int));
    
            var eTREventDateParameter = eTREventDate.HasValue ?
                new ObjectParameter("ETREventDate", eTREventDate) :
                new ObjectParameter("ETREventDate", typeof(System.DateTime));
    
            var eTRDisabilityConditionIdParameter = eTRDisabilityConditionId.HasValue ?
                new ObjectParameter("ETRDisabilityConditionId", eTRDisabilityConditionId) :
                new ObjectParameter("ETRDisabilityConditionId", typeof(int));
    
            var eTRNonComplainceIdParameter = eTRNonComplainceId.HasValue ?
                new ObjectParameter("ETRNonComplainceId", eTRNonComplainceId) :
                new ObjectParameter("ETRNonComplainceId", typeof(int));
    
            var eTROutcomeIdParameter = eTROutcomeId.HasValue ?
                new ObjectParameter("ETROutcomeId", eTROutcomeId) :
                new ObjectParameter("ETROutcomeId", typeof(int));
    
            var eTROutcomeBeginDateParameter = eTROutcomeBeginDate.HasValue ?
                new ObjectParameter("ETROutcomeBeginDate", eTROutcomeBeginDate) :
                new ObjectParameter("ETROutcomeBeginDate", typeof(System.DateTime));
    
            var eTROutcomeEndDateParameter = eTROutcomeEndDate.HasValue ?
                new ObjectParameter("ETROutcomeEndDate", eTROutcomeEndDate) :
                new ObjectParameter("ETROutcomeEndDate", typeof(System.DateTime));
    
            var eTRFundingCodeTypeIdParameter = eTRFundingCodeTypeId.HasValue ?
                new ObjectParameter("ETRFundingCodeTypeId", eTRFundingCodeTypeId) :
                new ObjectParameter("ETRFundingCodeTypeId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsETRInformation", studentsETRIDParameter, specialEducationTypePLParameter, eTREventTypeIdParameter, eTREventDateParameter, eTRDisabilityConditionIdParameter, eTRNonComplainceIdParameter, eTROutcomeIdParameter, eTROutcomeBeginDateParameter, eTROutcomeEndDateParameter, eTRFundingCodeTypeIdParameter, studentIdParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsIEPInformation(Nullable<int> studentIEPID, Nullable<int> iEPEventTypeId, Nullable<System.DateTime> iEPEventDate, Nullable<int> iEPNonComplainceId, Nullable<int> iEPOutcomeId, Nullable<System.DateTime> iEPOutcomeBeginDate, Nullable<System.DateTime> iEPOutcomeEndDate, Nullable<int> iEPTestTypeId, Nullable<int> iEPSecondaryPlanningId, Nullable<int> studentId, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIEPIDParameter = studentIEPID.HasValue ?
                new ObjectParameter("StudentIEPID", studentIEPID) :
                new ObjectParameter("StudentIEPID", typeof(int));
    
            var iEPEventTypeIdParameter = iEPEventTypeId.HasValue ?
                new ObjectParameter("IEPEventTypeId", iEPEventTypeId) :
                new ObjectParameter("IEPEventTypeId", typeof(int));
    
            var iEPEventDateParameter = iEPEventDate.HasValue ?
                new ObjectParameter("IEPEventDate", iEPEventDate) :
                new ObjectParameter("IEPEventDate", typeof(System.DateTime));
    
            var iEPNonComplainceIdParameter = iEPNonComplainceId.HasValue ?
                new ObjectParameter("IEPNonComplainceId", iEPNonComplainceId) :
                new ObjectParameter("IEPNonComplainceId", typeof(int));
    
            var iEPOutcomeIdParameter = iEPOutcomeId.HasValue ?
                new ObjectParameter("IEPOutcomeId", iEPOutcomeId) :
                new ObjectParameter("IEPOutcomeId", typeof(int));
    
            var iEPOutcomeBeginDateParameter = iEPOutcomeBeginDate.HasValue ?
                new ObjectParameter("IEPOutcomeBeginDate", iEPOutcomeBeginDate) :
                new ObjectParameter("IEPOutcomeBeginDate", typeof(System.DateTime));
    
            var iEPOutcomeEndDateParameter = iEPOutcomeEndDate.HasValue ?
                new ObjectParameter("IEPOutcomeEndDate", iEPOutcomeEndDate) :
                new ObjectParameter("IEPOutcomeEndDate", typeof(System.DateTime));
    
            var iEPTestTypeIdParameter = iEPTestTypeId.HasValue ?
                new ObjectParameter("IEPTestTypeId", iEPTestTypeId) :
                new ObjectParameter("IEPTestTypeId", typeof(int));
    
            var iEPSecondaryPlanningIdParameter = iEPSecondaryPlanningId.HasValue ?
                new ObjectParameter("IEPSecondaryPlanningId", iEPSecondaryPlanningId) :
                new ObjectParameter("IEPSecondaryPlanningId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsIEPInformation", studentIEPIDParameter, iEPEventTypeIdParameter, iEPEventDateParameter, iEPNonComplainceIdParameter, iEPOutcomeIdParameter, iEPOutcomeBeginDateParameter, iEPOutcomeEndDateParameter, iEPTestTypeIdParameter, iEPSecondaryPlanningIdParameter, studentIdParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentSPEDGoals(Nullable<int> studentId, Nullable<System.DateTime> iEPDate, string sPEDGoalsPL, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var sPEDGoalsPLParameter = sPEDGoalsPL != null ?
                new ObjectParameter("SPEDGoalsPL", sPEDGoalsPL) :
                new ObjectParameter("SPEDGoalsPL", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentSPEDGoals", studentIdParameter, iEPDateParameter, sPEDGoalsPLParameter, isActiveParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsProgramsInformation(Nullable<int> programType, Nullable<int> studentId, Nullable<System.DateTime> entryDate, Nullable<System.DateTime> exitDate, string company, string therapist, string contactPhone, string contactEmail, Nullable<decimal> amountOfTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode)
        {
            var programTypeParameter = programType.HasValue ?
                new ObjectParameter("ProgramType", programType) :
                new ObjectParameter("ProgramType", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var exitDateParameter = exitDate.HasValue ?
                new ObjectParameter("ExitDate", exitDate) :
                new ObjectParameter("ExitDate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var therapistParameter = therapist != null ?
                new ObjectParameter("Therapist", therapist) :
                new ObjectParameter("Therapist", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var amountOfTimeParameter = amountOfTime.HasValue ?
                new ObjectParameter("AmountOfTime", amountOfTime) :
                new ObjectParameter("AmountOfTime", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsProgramsInformation", programTypeParameter, studentIdParameter, entryDateParameter, exitDateParameter, companyParameter, therapistParameter, contactPhoneParameter, contactEmailParameter, amountOfTimeParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsProgramsInformation_OLD(Nullable<int> programType, Nullable<int> studentId, Nullable<System.DateTime> entryDate, Nullable<System.DateTime> exitDate, string company, string therapist, string contactPhone, string contactEmail, Nullable<decimal> amountOfTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode)
        {
            var programTypeParameter = programType.HasValue ?
                new ObjectParameter("ProgramType", programType) :
                new ObjectParameter("ProgramType", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var exitDateParameter = exitDate.HasValue ?
                new ObjectParameter("ExitDate", exitDate) :
                new ObjectParameter("ExitDate", typeof(System.DateTime));
    
            var companyParameter = company != null ?
                new ObjectParameter("Company", company) :
                new ObjectParameter("Company", typeof(string));
    
            var therapistParameter = therapist != null ?
                new ObjectParameter("Therapist", therapist) :
                new ObjectParameter("Therapist", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var amountOfTimeParameter = amountOfTime.HasValue ?
                new ObjectParameter("AmountOfTime", amountOfTime) :
                new ObjectParameter("AmountOfTime", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsProgramsInformation_OLD", programTypeParameter, studentIdParameter, entryDateParameter, exitDateParameter, companyParameter, therapistParameter, contactPhoneParameter, contactEmailParameter, amountOfTimeParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentsTransferOfRightsInformation(Nullable<int> studentId, Nullable<System.DateTime> sentReightsOfStudent, Nullable<System.DateTime> transferOfRights, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var sentReightsOfStudentParameter = sentReightsOfStudent.HasValue ?
                new ObjectParameter("SentReightsOfStudent", sentReightsOfStudent) :
                new ObjectParameter("SentReightsOfStudent", typeof(System.DateTime));
    
            var transferOfRightsParameter = transferOfRights.HasValue ?
                new ObjectParameter("TransferOfRights", transferOfRights) :
                new ObjectParameter("TransferOfRights", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentsTransferOfRightsInformation", studentIdParameter, sentReightsOfStudentParameter, transferOfRightsParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentTime(Nullable<int> studentTimeId, Nullable<int> studentID, Nullable<int> schoolCourseID, Nullable<int> schoolCourseSectionID, Nullable<int> status, Nullable<int> activity, string description, Nullable<System.DateTime> date, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string totalTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentTimeIdParameter = studentTimeId.HasValue ?
                new ObjectParameter("StudentTimeId", studentTimeId) :
                new ObjectParameter("StudentTimeId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var activityParameter = activity.HasValue ?
                new ObjectParameter("Activity", activity) :
                new ObjectParameter("Activity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var totalTimeParameter = totalTime != null ?
                new ObjectParameter("TotalTime", totalTime) :
                new ObjectParameter("TotalTime", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentTime", studentTimeIdParameter, studentIDParameter, schoolCourseIDParameter, schoolCourseSectionIDParameter, statusParameter, activityParameter, descriptionParameter, dateParameter, startTimeParameter, endTimeParameter, totalTimeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentTimeByCourse(Nullable<int> schoolCourseID, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentTimeByCourse", schoolCourseIDParameter, valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentTimeByCourseTest(Nullable<int> schoolCourseID, string studentString)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var studentStringParameter = studentString != null ?
                new ObjectParameter("StudentString", studentString) :
                new ObjectParameter("StudentString", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentTimeByCourseTest", schoolCourseIDParameter, studentStringParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentTimeByStudent(Nullable<int> studentID, string valuesArray, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentTimeByStudent", studentIDParameter, valuesArrayParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentTimeDetailsForStudents(Nullable<int> schoolCourseID, Nullable<int> statusPL, Nullable<int> activityPL, string description, Nullable<System.DateTime> date, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, string totalTime, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, string studentIDs)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var statusPLParameter = statusPL.HasValue ?
                new ObjectParameter("StatusPL", statusPL) :
                new ObjectParameter("StatusPL", typeof(int));
    
            var activityPLParameter = activityPL.HasValue ?
                new ObjectParameter("ActivityPL", activityPL) :
                new ObjectParameter("ActivityPL", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var totalTimeParameter = totalTime != null ?
                new ObjectParameter("TotalTime", totalTime) :
                new ObjectParameter("TotalTime", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var studentIDsParameter = studentIDs != null ?
                new ObjectParameter("StudentIDs", studentIDs) :
                new ObjectParameter("StudentIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentTimeDetailsForStudents", schoolCourseIDParameter, statusPLParameter, activityPLParameter, descriptionParameter, dateParameter, startTimeParameter, endTimeParameter, totalTimeParameter, createdByParameter, createdDateParameter, studentIDsParameter);
        }
    
        public virtual int uspInsertStudentWeekAttendanceInfo(string calendarYear, string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, string classIds, string attendanceDates)
        {
            var calendarYearParameter = calendarYear != null ?
                new ObjectParameter("CalendarYear", calendarYear) :
                new ObjectParameter("CalendarYear", typeof(string));
    
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var classIdsParameter = classIds != null ?
                new ObjectParameter("ClassIds", classIds) :
                new ObjectParameter("ClassIds", typeof(string));
    
            var attendanceDatesParameter = attendanceDates != null ?
                new ObjectParameter("AttendanceDates", attendanceDates) :
                new ObjectParameter("AttendanceDates", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertStudentWeekAttendanceInfo", calendarYearParameter, studentAttendanceValuesArrayParameter, attendanceTakenByParameter, classIdsParameter, attendanceDatesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertStudentWithdrawls(Nullable<int> studentID, string withdrawlDate, Nullable<int> withdrawlCode, string withdrawlDescription, Nullable<int> plansToAttendDistrict, Nullable<int> graduationYear, string dIplomaDate, Nullable<int> diplomaType, Nullable<int> withdrawalSchoolID, Nullable<System.DateTime> dateCourseCompleted, Nullable<int> districtCourseCompleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var withdrawlDateParameter = withdrawlDate != null ?
                new ObjectParameter("WithdrawlDate", withdrawlDate) :
                new ObjectParameter("WithdrawlDate", typeof(string));
    
            var withdrawlCodeParameter = withdrawlCode.HasValue ?
                new ObjectParameter("WithdrawlCode", withdrawlCode) :
                new ObjectParameter("WithdrawlCode", typeof(int));
    
            var withdrawlDescriptionParameter = withdrawlDescription != null ?
                new ObjectParameter("WithdrawlDescription", withdrawlDescription) :
                new ObjectParameter("WithdrawlDescription", typeof(string));
    
            var plansToAttendDistrictParameter = plansToAttendDistrict.HasValue ?
                new ObjectParameter("PlansToAttendDistrict", plansToAttendDistrict) :
                new ObjectParameter("PlansToAttendDistrict", typeof(int));
    
            var graduationYearParameter = graduationYear.HasValue ?
                new ObjectParameter("GraduationYear", graduationYear) :
                new ObjectParameter("GraduationYear", typeof(int));
    
            var dIplomaDateParameter = dIplomaDate != null ?
                new ObjectParameter("DIplomaDate", dIplomaDate) :
                new ObjectParameter("DIplomaDate", typeof(string));
    
            var diplomaTypeParameter = diplomaType.HasValue ?
                new ObjectParameter("DiplomaType", diplomaType) :
                new ObjectParameter("DiplomaType", typeof(int));
    
            var withdrawalSchoolIDParameter = withdrawalSchoolID.HasValue ?
                new ObjectParameter("WithdrawalSchoolID", withdrawalSchoolID) :
                new ObjectParameter("WithdrawalSchoolID", typeof(int));
    
            var dateCourseCompletedParameter = dateCourseCompleted.HasValue ?
                new ObjectParameter("DateCourseCompleted", dateCourseCompleted) :
                new ObjectParameter("DateCourseCompleted", typeof(System.DateTime));
    
            var districtCourseCompletedParameter = districtCourseCompleted.HasValue ?
                new ObjectParameter("DistrictCourseCompleted", districtCourseCompleted) :
                new ObjectParameter("DistrictCourseCompleted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertStudentWithdrawls", studentIDParameter, withdrawlDateParameter, withdrawlCodeParameter, withdrawlDescriptionParameter, plansToAttendDistrictParameter, graduationYearParameter, dIplomaDateParameter, diplomaTypeParameter, withdrawalSchoolIDParameter, dateCourseCompletedParameter, districtCourseCompletedParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertSurveyQuestions(Nullable<int> applicationid, string howdidyouhearabouttreca, string mainreasonforselectingtreca, string haveyoueverattendedtreca)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var howdidyouhearabouttrecaParameter = howdidyouhearabouttreca != null ?
                new ObjectParameter("howdidyouhearabouttreca", howdidyouhearabouttreca) :
                new ObjectParameter("howdidyouhearabouttreca", typeof(string));
    
            var mainreasonforselectingtrecaParameter = mainreasonforselectingtreca != null ?
                new ObjectParameter("mainreasonforselectingtreca", mainreasonforselectingtreca) :
                new ObjectParameter("mainreasonforselectingtreca", typeof(string));
    
            var haveyoueverattendedtrecaParameter = haveyoueverattendedtreca != null ?
                new ObjectParameter("haveyoueverattendedtreca", haveyoueverattendedtreca) :
                new ObjectParameter("haveyoueverattendedtreca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertSurveyQuestions", applicationidParameter, howdidyouhearabouttrecaParameter, mainreasonforselectingtrecaParameter, haveyoueverattendedtrecaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertTechnologyDetails(Nullable<int> applicationid, Nullable<bool> doesthestudentneedapcpackage, Nullable<bool> doesthestudentneedaprinter, Nullable<bool> doyoucurrentlyhaveainternetserviceathome, Nullable<int> whattypeofinternetservicedoyoucurrentlyhave)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var doesthestudentneedapcpackageParameter = doesthestudentneedapcpackage.HasValue ?
                new ObjectParameter("doesthestudentneedapcpackage", doesthestudentneedapcpackage) :
                new ObjectParameter("doesthestudentneedapcpackage", typeof(bool));
    
            var doesthestudentneedaprinterParameter = doesthestudentneedaprinter.HasValue ?
                new ObjectParameter("doesthestudentneedaprinter", doesthestudentneedaprinter) :
                new ObjectParameter("doesthestudentneedaprinter", typeof(bool));
    
            var doyoucurrentlyhaveainternetserviceathomeParameter = doyoucurrentlyhaveainternetserviceathome.HasValue ?
                new ObjectParameter("doyoucurrentlyhaveainternetserviceathome", doyoucurrentlyhaveainternetserviceathome) :
                new ObjectParameter("doyoucurrentlyhaveainternetserviceathome", typeof(bool));
    
            var whattypeofinternetservicedoyoucurrentlyhaveParameter = whattypeofinternetservicedoyoucurrentlyhave.HasValue ?
                new ObjectParameter("whattypeofinternetservicedoyoucurrentlyhave", whattypeofinternetservicedoyoucurrentlyhave) :
                new ObjectParameter("whattypeofinternetservicedoyoucurrentlyhave", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertTechnologyDetails", applicationidParameter, doesthestudentneedapcpackageParameter, doesthestudentneedaprinterParameter, doyoucurrentlyhaveainternetserviceathomeParameter, whattypeofinternetservicedoyoucurrentlyhaveParameter);
        }
    
        public virtual int uspInsertUpdateDemographics(Nullable<int> id, string lastName, string firstName, string middleName, string suffix, string nickName, string mothersMaidenName, string homeAddress1, string homeAddress2, string homeAddress3, string homeState, string homeCity, string homeCountry, string homeZipCode, string homePhoneNumber, string alternatePhoneNumber, Nullable<bool> mailingAddressSameAsHomeAddress, string mailingAddress1, string mailingAddress2, string mailingAddress3, string mailingState, string mailingCity, string mailingZipCode, Nullable<System.DateTime> dateofBirth, Nullable<bool> areYouHispanic, string raceCheckAllThatApply1, string raceCheckAllThatApply2, string raceCheckAllThatApply3, string raceCheckAllThatApply4, string raceCheckAllThatApply5, string gender, string schoolDistrictOfResidence, string currentlyEnrolledInSchool, string reasonNotEnrolledPreviously, string formerSchoolType, string lastSchoolAttended, string state, string city, string formerSchoolDistrict, string selectLastSchoolAttended, string lastGradeStudentCompleted, string gradeLevelEntering, Nullable<bool> testedGiftedorTalented, Nullable<bool> hasGIEP, Nullable<bool> evaluatingDisablity, Nullable<bool> disablilityUnderSection, Nullable<bool> expulsion, Nullable<bool> expulsionExplanation, string childLivesWith, Nullable<bool> isConstactLegalCustodianOfStudent, Nullable<bool> specialCustodialCourt, string primaryContactLastName, string primaryContactFirstName, string primaryContactRelationshipWithStudent, Nullable<bool> isConstactLegalCustodianOfStudent1, Nullable<bool> primarySameAsStudentAddress, string primaryContactAddress1, string primaryContactAddress2, string primaryContactAddress3, string primaryContactState, string primaryContactCity, string primaryContactZipCode, string emailAddress, Nullable<bool> primaryPhoneSameasStudentPhone, string primaryContactPhoneNumber, string primaryContactAlternatePhoneNumber, string secondaryContactLastName, string secondaryContactFirstName, string secondaryContactRelationshipWithStudent, Nullable<bool> isTheContactTheLegalCustodianOfTheStudent, string secondaryAddressSameAsStudentAddress, string secondaryContactAddress1, string secondaryContactAddress2, string secondaryContactState, string secondaryContactCity, string secondaryContactZipCode, Nullable<bool> secondaryContactPhoneAsStudentPhone, string secondaryContactPhoneNumber, string secondaryContactAlternatePhoneNumber, string studentLEPPreviousSchool, Nullable<bool> speakingWrtingUnderstandingEnglish, string firstLanguageTalk, string languageMostOftenSpeakAtHome, Nullable<System.DateTime> firstAttendedSchoolYear, Nullable<bool> languageSpokenAtTheStudentsHome, Nullable<bool> doesTheStudentNeedPcPackage, Nullable<bool> doesTheStudentNeedPrinter, Nullable<bool> currentlyInternetServiceAtHome, string typeOfInternetServiceCurrently, string howdidyouHearAboutTreca, string mainReasonForSelectingTreca, Nullable<bool> haveYouEverAttendedTreca, Nullable<System.DateTime> dateStudentEnterNinthGrade, string birthPlaceState, string birthPlaceCity, string isConsidered, string countryofBirth, Nullable<bool> migrantOrFormWorker, Nullable<bool> regularAndAdequateNightTimeResidence, string kindergartenExperience, string tenativeCourseSchedule)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var nickNameParameter = nickName != null ?
                new ObjectParameter("NickName", nickName) :
                new ObjectParameter("NickName", typeof(string));
    
            var mothersMaidenNameParameter = mothersMaidenName != null ?
                new ObjectParameter("MothersMaidenName", mothersMaidenName) :
                new ObjectParameter("MothersMaidenName", typeof(string));
    
            var homeAddress1Parameter = homeAddress1 != null ?
                new ObjectParameter("HomeAddress1", homeAddress1) :
                new ObjectParameter("HomeAddress1", typeof(string));
    
            var homeAddress2Parameter = homeAddress2 != null ?
                new ObjectParameter("HomeAddress2", homeAddress2) :
                new ObjectParameter("HomeAddress2", typeof(string));
    
            var homeAddress3Parameter = homeAddress3 != null ?
                new ObjectParameter("HomeAddress3", homeAddress3) :
                new ObjectParameter("HomeAddress3", typeof(string));
    
            var homeStateParameter = homeState != null ?
                new ObjectParameter("HomeState", homeState) :
                new ObjectParameter("HomeState", typeof(string));
    
            var homeCityParameter = homeCity != null ?
                new ObjectParameter("HomeCity", homeCity) :
                new ObjectParameter("HomeCity", typeof(string));
    
            var homeCountryParameter = homeCountry != null ?
                new ObjectParameter("HomeCountry", homeCountry) :
                new ObjectParameter("HomeCountry", typeof(string));
    
            var homeZipCodeParameter = homeZipCode != null ?
                new ObjectParameter("HomeZipCode", homeZipCode) :
                new ObjectParameter("HomeZipCode", typeof(string));
    
            var homePhoneNumberParameter = homePhoneNumber != null ?
                new ObjectParameter("HomePhoneNumber", homePhoneNumber) :
                new ObjectParameter("HomePhoneNumber", typeof(string));
    
            var alternatePhoneNumberParameter = alternatePhoneNumber != null ?
                new ObjectParameter("AlternatePhoneNumber", alternatePhoneNumber) :
                new ObjectParameter("AlternatePhoneNumber", typeof(string));
    
            var mailingAddressSameAsHomeAddressParameter = mailingAddressSameAsHomeAddress.HasValue ?
                new ObjectParameter("MailingAddressSameAsHomeAddress", mailingAddressSameAsHomeAddress) :
                new ObjectParameter("MailingAddressSameAsHomeAddress", typeof(bool));
    
            var mailingAddress1Parameter = mailingAddress1 != null ?
                new ObjectParameter("MailingAddress1", mailingAddress1) :
                new ObjectParameter("MailingAddress1", typeof(string));
    
            var mailingAddress2Parameter = mailingAddress2 != null ?
                new ObjectParameter("MailingAddress2", mailingAddress2) :
                new ObjectParameter("MailingAddress2", typeof(string));
    
            var mailingAddress3Parameter = mailingAddress3 != null ?
                new ObjectParameter("MailingAddress3", mailingAddress3) :
                new ObjectParameter("MailingAddress3", typeof(string));
    
            var mailingStateParameter = mailingState != null ?
                new ObjectParameter("MailingState", mailingState) :
                new ObjectParameter("MailingState", typeof(string));
    
            var mailingCityParameter = mailingCity != null ?
                new ObjectParameter("MailingCity", mailingCity) :
                new ObjectParameter("MailingCity", typeof(string));
    
            var mailingZipCodeParameter = mailingZipCode != null ?
                new ObjectParameter("MailingZipCode", mailingZipCode) :
                new ObjectParameter("MailingZipCode", typeof(string));
    
            var dateofBirthParameter = dateofBirth.HasValue ?
                new ObjectParameter("DateofBirth", dateofBirth) :
                new ObjectParameter("DateofBirth", typeof(System.DateTime));
    
            var areYouHispanicParameter = areYouHispanic.HasValue ?
                new ObjectParameter("AreYouHispanic", areYouHispanic) :
                new ObjectParameter("AreYouHispanic", typeof(bool));
    
            var raceCheckAllThatApply1Parameter = raceCheckAllThatApply1 != null ?
                new ObjectParameter("RaceCheckAllThatApply1", raceCheckAllThatApply1) :
                new ObjectParameter("RaceCheckAllThatApply1", typeof(string));
    
            var raceCheckAllThatApply2Parameter = raceCheckAllThatApply2 != null ?
                new ObjectParameter("RaceCheckAllThatApply2", raceCheckAllThatApply2) :
                new ObjectParameter("RaceCheckAllThatApply2", typeof(string));
    
            var raceCheckAllThatApply3Parameter = raceCheckAllThatApply3 != null ?
                new ObjectParameter("RaceCheckAllThatApply3", raceCheckAllThatApply3) :
                new ObjectParameter("RaceCheckAllThatApply3", typeof(string));
    
            var raceCheckAllThatApply4Parameter = raceCheckAllThatApply4 != null ?
                new ObjectParameter("RaceCheckAllThatApply4", raceCheckAllThatApply4) :
                new ObjectParameter("RaceCheckAllThatApply4", typeof(string));
    
            var raceCheckAllThatApply5Parameter = raceCheckAllThatApply5 != null ?
                new ObjectParameter("RaceCheckAllThatApply5", raceCheckAllThatApply5) :
                new ObjectParameter("RaceCheckAllThatApply5", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var schoolDistrictOfResidenceParameter = schoolDistrictOfResidence != null ?
                new ObjectParameter("SchoolDistrictOfResidence", schoolDistrictOfResidence) :
                new ObjectParameter("SchoolDistrictOfResidence", typeof(string));
    
            var currentlyEnrolledInSchoolParameter = currentlyEnrolledInSchool != null ?
                new ObjectParameter("CurrentlyEnrolledInSchool", currentlyEnrolledInSchool) :
                new ObjectParameter("CurrentlyEnrolledInSchool", typeof(string));
    
            var reasonNotEnrolledPreviouslyParameter = reasonNotEnrolledPreviously != null ?
                new ObjectParameter("ReasonNotEnrolledPreviously", reasonNotEnrolledPreviously) :
                new ObjectParameter("ReasonNotEnrolledPreviously", typeof(string));
    
            var formerSchoolTypeParameter = formerSchoolType != null ?
                new ObjectParameter("FormerSchoolType", formerSchoolType) :
                new ObjectParameter("FormerSchoolType", typeof(string));
    
            var lastSchoolAttendedParameter = lastSchoolAttended != null ?
                new ObjectParameter("LastSchoolAttended", lastSchoolAttended) :
                new ObjectParameter("LastSchoolAttended", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var formerSchoolDistrictParameter = formerSchoolDistrict != null ?
                new ObjectParameter("FormerSchoolDistrict", formerSchoolDistrict) :
                new ObjectParameter("FormerSchoolDistrict", typeof(string));
    
            var selectLastSchoolAttendedParameter = selectLastSchoolAttended != null ?
                new ObjectParameter("SelectLastSchoolAttended", selectLastSchoolAttended) :
                new ObjectParameter("SelectLastSchoolAttended", typeof(string));
    
            var lastGradeStudentCompletedParameter = lastGradeStudentCompleted != null ?
                new ObjectParameter("LastGradeStudentCompleted", lastGradeStudentCompleted) :
                new ObjectParameter("LastGradeStudentCompleted", typeof(string));
    
            var gradeLevelEnteringParameter = gradeLevelEntering != null ?
                new ObjectParameter("GradeLevelEntering", gradeLevelEntering) :
                new ObjectParameter("GradeLevelEntering", typeof(string));
    
            var testedGiftedorTalentedParameter = testedGiftedorTalented.HasValue ?
                new ObjectParameter("TestedGiftedorTalented", testedGiftedorTalented) :
                new ObjectParameter("TestedGiftedorTalented", typeof(bool));
    
            var hasGIEPParameter = hasGIEP.HasValue ?
                new ObjectParameter("HasGIEP", hasGIEP) :
                new ObjectParameter("HasGIEP", typeof(bool));
    
            var evaluatingDisablityParameter = evaluatingDisablity.HasValue ?
                new ObjectParameter("EvaluatingDisablity", evaluatingDisablity) :
                new ObjectParameter("EvaluatingDisablity", typeof(bool));
    
            var disablilityUnderSectionParameter = disablilityUnderSection.HasValue ?
                new ObjectParameter("DisablilityUnderSection", disablilityUnderSection) :
                new ObjectParameter("DisablilityUnderSection", typeof(bool));
    
            var expulsionParameter = expulsion.HasValue ?
                new ObjectParameter("Expulsion", expulsion) :
                new ObjectParameter("Expulsion", typeof(bool));
    
            var expulsionExplanationParameter = expulsionExplanation.HasValue ?
                new ObjectParameter("ExpulsionExplanation", expulsionExplanation) :
                new ObjectParameter("ExpulsionExplanation", typeof(bool));
    
            var childLivesWithParameter = childLivesWith != null ?
                new ObjectParameter("ChildLivesWith", childLivesWith) :
                new ObjectParameter("ChildLivesWith", typeof(string));
    
            var isConstactLegalCustodianOfStudentParameter = isConstactLegalCustodianOfStudent.HasValue ?
                new ObjectParameter("IsConstactLegalCustodianOfStudent", isConstactLegalCustodianOfStudent) :
                new ObjectParameter("IsConstactLegalCustodianOfStudent", typeof(bool));
    
            var specialCustodialCourtParameter = specialCustodialCourt.HasValue ?
                new ObjectParameter("SpecialCustodialCourt", specialCustodialCourt) :
                new ObjectParameter("SpecialCustodialCourt", typeof(bool));
    
            var primaryContactLastNameParameter = primaryContactLastName != null ?
                new ObjectParameter("PrimaryContactLastName", primaryContactLastName) :
                new ObjectParameter("PrimaryContactLastName", typeof(string));
    
            var primaryContactFirstNameParameter = primaryContactFirstName != null ?
                new ObjectParameter("PrimaryContactFirstName", primaryContactFirstName) :
                new ObjectParameter("PrimaryContactFirstName", typeof(string));
    
            var primaryContactRelationshipWithStudentParameter = primaryContactRelationshipWithStudent != null ?
                new ObjectParameter("PrimaryContactRelationshipWithStudent", primaryContactRelationshipWithStudent) :
                new ObjectParameter("PrimaryContactRelationshipWithStudent", typeof(string));
    
            var isConstactLegalCustodianOfStudent1Parameter = isConstactLegalCustodianOfStudent1.HasValue ?
                new ObjectParameter("IsConstactLegalCustodianOfStudent1", isConstactLegalCustodianOfStudent1) :
                new ObjectParameter("IsConstactLegalCustodianOfStudent1", typeof(bool));
    
            var primarySameAsStudentAddressParameter = primarySameAsStudentAddress.HasValue ?
                new ObjectParameter("PrimarySameAsStudentAddress", primarySameAsStudentAddress) :
                new ObjectParameter("PrimarySameAsStudentAddress", typeof(bool));
    
            var primaryContactAddress1Parameter = primaryContactAddress1 != null ?
                new ObjectParameter("PrimaryContactAddress1", primaryContactAddress1) :
                new ObjectParameter("PrimaryContactAddress1", typeof(string));
    
            var primaryContactAddress2Parameter = primaryContactAddress2 != null ?
                new ObjectParameter("PrimaryContactAddress2", primaryContactAddress2) :
                new ObjectParameter("PrimaryContactAddress2", typeof(string));
    
            var primaryContactAddress3Parameter = primaryContactAddress3 != null ?
                new ObjectParameter("PrimaryContactAddress3", primaryContactAddress3) :
                new ObjectParameter("PrimaryContactAddress3", typeof(string));
    
            var primaryContactStateParameter = primaryContactState != null ?
                new ObjectParameter("PrimaryContactState", primaryContactState) :
                new ObjectParameter("PrimaryContactState", typeof(string));
    
            var primaryContactCityParameter = primaryContactCity != null ?
                new ObjectParameter("PrimaryContactCity", primaryContactCity) :
                new ObjectParameter("PrimaryContactCity", typeof(string));
    
            var primaryContactZipCodeParameter = primaryContactZipCode != null ?
                new ObjectParameter("PrimaryContactZipCode", primaryContactZipCode) :
                new ObjectParameter("PrimaryContactZipCode", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var primaryPhoneSameasStudentPhoneParameter = primaryPhoneSameasStudentPhone.HasValue ?
                new ObjectParameter("PrimaryPhoneSameasStudentPhone", primaryPhoneSameasStudentPhone) :
                new ObjectParameter("PrimaryPhoneSameasStudentPhone", typeof(bool));
    
            var primaryContactPhoneNumberParameter = primaryContactPhoneNumber != null ?
                new ObjectParameter("PrimaryContactPhoneNumber", primaryContactPhoneNumber) :
                new ObjectParameter("PrimaryContactPhoneNumber", typeof(string));
    
            var primaryContactAlternatePhoneNumberParameter = primaryContactAlternatePhoneNumber != null ?
                new ObjectParameter("PrimaryContactAlternatePhoneNumber", primaryContactAlternatePhoneNumber) :
                new ObjectParameter("PrimaryContactAlternatePhoneNumber", typeof(string));
    
            var secondaryContactLastNameParameter = secondaryContactLastName != null ?
                new ObjectParameter("SecondaryContactLastName", secondaryContactLastName) :
                new ObjectParameter("SecondaryContactLastName", typeof(string));
    
            var secondaryContactFirstNameParameter = secondaryContactFirstName != null ?
                new ObjectParameter("SecondaryContactFirstName", secondaryContactFirstName) :
                new ObjectParameter("SecondaryContactFirstName", typeof(string));
    
            var secondaryContactRelationshipWithStudentParameter = secondaryContactRelationshipWithStudent != null ?
                new ObjectParameter("SecondaryContactRelationshipWithStudent", secondaryContactRelationshipWithStudent) :
                new ObjectParameter("SecondaryContactRelationshipWithStudent", typeof(string));
    
            var isTheContactTheLegalCustodianOfTheStudentParameter = isTheContactTheLegalCustodianOfTheStudent.HasValue ?
                new ObjectParameter("IsTheContactTheLegalCustodianOfTheStudent", isTheContactTheLegalCustodianOfTheStudent) :
                new ObjectParameter("IsTheContactTheLegalCustodianOfTheStudent", typeof(bool));
    
            var secondaryAddressSameAsStudentAddressParameter = secondaryAddressSameAsStudentAddress != null ?
                new ObjectParameter("SecondaryAddressSameAsStudentAddress", secondaryAddressSameAsStudentAddress) :
                new ObjectParameter("SecondaryAddressSameAsStudentAddress", typeof(string));
    
            var secondaryContactAddress1Parameter = secondaryContactAddress1 != null ?
                new ObjectParameter("SecondaryContactAddress1", secondaryContactAddress1) :
                new ObjectParameter("SecondaryContactAddress1", typeof(string));
    
            var secondaryContactAddress2Parameter = secondaryContactAddress2 != null ?
                new ObjectParameter("SecondaryContactAddress2", secondaryContactAddress2) :
                new ObjectParameter("SecondaryContactAddress2", typeof(string));
    
            var secondaryContactStateParameter = secondaryContactState != null ?
                new ObjectParameter("SecondaryContactState", secondaryContactState) :
                new ObjectParameter("SecondaryContactState", typeof(string));
    
            var secondaryContactCityParameter = secondaryContactCity != null ?
                new ObjectParameter("SecondaryContactCity", secondaryContactCity) :
                new ObjectParameter("SecondaryContactCity", typeof(string));
    
            var secondaryContactZipCodeParameter = secondaryContactZipCode != null ?
                new ObjectParameter("SecondaryContactZipCode", secondaryContactZipCode) :
                new ObjectParameter("SecondaryContactZipCode", typeof(string));
    
            var secondaryContactPhoneAsStudentPhoneParameter = secondaryContactPhoneAsStudentPhone.HasValue ?
                new ObjectParameter("SecondaryContactPhoneAsStudentPhone", secondaryContactPhoneAsStudentPhone) :
                new ObjectParameter("SecondaryContactPhoneAsStudentPhone", typeof(bool));
    
            var secondaryContactPhoneNumberParameter = secondaryContactPhoneNumber != null ?
                new ObjectParameter("SecondaryContactPhoneNumber", secondaryContactPhoneNumber) :
                new ObjectParameter("SecondaryContactPhoneNumber", typeof(string));
    
            var secondaryContactAlternatePhoneNumberParameter = secondaryContactAlternatePhoneNumber != null ?
                new ObjectParameter("SecondaryContactAlternatePhoneNumber", secondaryContactAlternatePhoneNumber) :
                new ObjectParameter("SecondaryContactAlternatePhoneNumber", typeof(string));
    
            var studentLEPPreviousSchoolParameter = studentLEPPreviousSchool != null ?
                new ObjectParameter("StudentLEPPreviousSchool", studentLEPPreviousSchool) :
                new ObjectParameter("StudentLEPPreviousSchool", typeof(string));
    
            var speakingWrtingUnderstandingEnglishParameter = speakingWrtingUnderstandingEnglish.HasValue ?
                new ObjectParameter("SpeakingWrtingUnderstandingEnglish", speakingWrtingUnderstandingEnglish) :
                new ObjectParameter("SpeakingWrtingUnderstandingEnglish", typeof(bool));
    
            var firstLanguageTalkParameter = firstLanguageTalk != null ?
                new ObjectParameter("FirstLanguageTalk", firstLanguageTalk) :
                new ObjectParameter("FirstLanguageTalk", typeof(string));
    
            var languageMostOftenSpeakAtHomeParameter = languageMostOftenSpeakAtHome != null ?
                new ObjectParameter("LanguageMostOftenSpeakAtHome", languageMostOftenSpeakAtHome) :
                new ObjectParameter("LanguageMostOftenSpeakAtHome", typeof(string));
    
            var firstAttendedSchoolYearParameter = firstAttendedSchoolYear.HasValue ?
                new ObjectParameter("FirstAttendedSchoolYear", firstAttendedSchoolYear) :
                new ObjectParameter("FirstAttendedSchoolYear", typeof(System.DateTime));
    
            var languageSpokenAtTheStudentsHomeParameter = languageSpokenAtTheStudentsHome.HasValue ?
                new ObjectParameter("LanguageSpokenAtTheStudentsHome", languageSpokenAtTheStudentsHome) :
                new ObjectParameter("LanguageSpokenAtTheStudentsHome", typeof(bool));
    
            var doesTheStudentNeedPcPackageParameter = doesTheStudentNeedPcPackage.HasValue ?
                new ObjectParameter("DoesTheStudentNeedPcPackage", doesTheStudentNeedPcPackage) :
                new ObjectParameter("DoesTheStudentNeedPcPackage", typeof(bool));
    
            var doesTheStudentNeedPrinterParameter = doesTheStudentNeedPrinter.HasValue ?
                new ObjectParameter("DoesTheStudentNeedPrinter", doesTheStudentNeedPrinter) :
                new ObjectParameter("DoesTheStudentNeedPrinter", typeof(bool));
    
            var currentlyInternetServiceAtHomeParameter = currentlyInternetServiceAtHome.HasValue ?
                new ObjectParameter("CurrentlyInternetServiceAtHome", currentlyInternetServiceAtHome) :
                new ObjectParameter("CurrentlyInternetServiceAtHome", typeof(bool));
    
            var typeOfInternetServiceCurrentlyParameter = typeOfInternetServiceCurrently != null ?
                new ObjectParameter("TypeOfInternetServiceCurrently", typeOfInternetServiceCurrently) :
                new ObjectParameter("TypeOfInternetServiceCurrently", typeof(string));
    
            var howdidyouHearAboutTrecaParameter = howdidyouHearAboutTreca != null ?
                new ObjectParameter("HowdidyouHearAboutTreca", howdidyouHearAboutTreca) :
                new ObjectParameter("HowdidyouHearAboutTreca", typeof(string));
    
            var mainReasonForSelectingTrecaParameter = mainReasonForSelectingTreca != null ?
                new ObjectParameter("MainReasonForSelectingTreca", mainReasonForSelectingTreca) :
                new ObjectParameter("MainReasonForSelectingTreca", typeof(string));
    
            var haveYouEverAttendedTrecaParameter = haveYouEverAttendedTreca.HasValue ?
                new ObjectParameter("HaveYouEverAttendedTreca", haveYouEverAttendedTreca) :
                new ObjectParameter("HaveYouEverAttendedTreca", typeof(bool));
    
            var dateStudentEnterNinthGradeParameter = dateStudentEnterNinthGrade.HasValue ?
                new ObjectParameter("DateStudentEnterNinthGrade", dateStudentEnterNinthGrade) :
                new ObjectParameter("DateStudentEnterNinthGrade", typeof(System.DateTime));
    
            var birthPlaceStateParameter = birthPlaceState != null ?
                new ObjectParameter("BirthPlaceState", birthPlaceState) :
                new ObjectParameter("BirthPlaceState", typeof(string));
    
            var birthPlaceCityParameter = birthPlaceCity != null ?
                new ObjectParameter("BirthPlaceCity", birthPlaceCity) :
                new ObjectParameter("BirthPlaceCity", typeof(string));
    
            var isConsideredParameter = isConsidered != null ?
                new ObjectParameter("IsConsidered", isConsidered) :
                new ObjectParameter("IsConsidered", typeof(string));
    
            var countryofBirthParameter = countryofBirth != null ?
                new ObjectParameter("CountryofBirth", countryofBirth) :
                new ObjectParameter("CountryofBirth", typeof(string));
    
            var migrantOrFormWorkerParameter = migrantOrFormWorker.HasValue ?
                new ObjectParameter("MigrantOrFormWorker", migrantOrFormWorker) :
                new ObjectParameter("MigrantOrFormWorker", typeof(bool));
    
            var regularAndAdequateNightTimeResidenceParameter = regularAndAdequateNightTimeResidence.HasValue ?
                new ObjectParameter("RegularAndAdequateNightTimeResidence", regularAndAdequateNightTimeResidence) :
                new ObjectParameter("RegularAndAdequateNightTimeResidence", typeof(bool));
    
            var kindergartenExperienceParameter = kindergartenExperience != null ?
                new ObjectParameter("KindergartenExperience", kindergartenExperience) :
                new ObjectParameter("KindergartenExperience", typeof(string));
    
            var tenativeCourseScheduleParameter = tenativeCourseSchedule != null ?
                new ObjectParameter("TenativeCourseSchedule", tenativeCourseSchedule) :
                new ObjectParameter("TenativeCourseSchedule", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateDemographics", idParameter, lastNameParameter, firstNameParameter, middleNameParameter, suffixParameter, nickNameParameter, mothersMaidenNameParameter, homeAddress1Parameter, homeAddress2Parameter, homeAddress3Parameter, homeStateParameter, homeCityParameter, homeCountryParameter, homeZipCodeParameter, homePhoneNumberParameter, alternatePhoneNumberParameter, mailingAddressSameAsHomeAddressParameter, mailingAddress1Parameter, mailingAddress2Parameter, mailingAddress3Parameter, mailingStateParameter, mailingCityParameter, mailingZipCodeParameter, dateofBirthParameter, areYouHispanicParameter, raceCheckAllThatApply1Parameter, raceCheckAllThatApply2Parameter, raceCheckAllThatApply3Parameter, raceCheckAllThatApply4Parameter, raceCheckAllThatApply5Parameter, genderParameter, schoolDistrictOfResidenceParameter, currentlyEnrolledInSchoolParameter, reasonNotEnrolledPreviouslyParameter, formerSchoolTypeParameter, lastSchoolAttendedParameter, stateParameter, cityParameter, formerSchoolDistrictParameter, selectLastSchoolAttendedParameter, lastGradeStudentCompletedParameter, gradeLevelEnteringParameter, testedGiftedorTalentedParameter, hasGIEPParameter, evaluatingDisablityParameter, disablilityUnderSectionParameter, expulsionParameter, expulsionExplanationParameter, childLivesWithParameter, isConstactLegalCustodianOfStudentParameter, specialCustodialCourtParameter, primaryContactLastNameParameter, primaryContactFirstNameParameter, primaryContactRelationshipWithStudentParameter, isConstactLegalCustodianOfStudent1Parameter, primarySameAsStudentAddressParameter, primaryContactAddress1Parameter, primaryContactAddress2Parameter, primaryContactAddress3Parameter, primaryContactStateParameter, primaryContactCityParameter, primaryContactZipCodeParameter, emailAddressParameter, primaryPhoneSameasStudentPhoneParameter, primaryContactPhoneNumberParameter, primaryContactAlternatePhoneNumberParameter, secondaryContactLastNameParameter, secondaryContactFirstNameParameter, secondaryContactRelationshipWithStudentParameter, isTheContactTheLegalCustodianOfTheStudentParameter, secondaryAddressSameAsStudentAddressParameter, secondaryContactAddress1Parameter, secondaryContactAddress2Parameter, secondaryContactStateParameter, secondaryContactCityParameter, secondaryContactZipCodeParameter, secondaryContactPhoneAsStudentPhoneParameter, secondaryContactPhoneNumberParameter, secondaryContactAlternatePhoneNumberParameter, studentLEPPreviousSchoolParameter, speakingWrtingUnderstandingEnglishParameter, firstLanguageTalkParameter, languageMostOftenSpeakAtHomeParameter, firstAttendedSchoolYearParameter, languageSpokenAtTheStudentsHomeParameter, doesTheStudentNeedPcPackageParameter, doesTheStudentNeedPrinterParameter, currentlyInternetServiceAtHomeParameter, typeOfInternetServiceCurrentlyParameter, howdidyouHearAboutTrecaParameter, mainReasonForSelectingTrecaParameter, haveYouEverAttendedTrecaParameter, dateStudentEnterNinthGradeParameter, birthPlaceStateParameter, birthPlaceCityParameter, isConsideredParameter, countryofBirthParameter, migrantOrFormWorkerParameter, regularAndAdequateNightTimeResidenceParameter, kindergartenExperienceParameter, tenativeCourseScheduleParameter);
        }
    
        public virtual int uspInsertUpdateDepartment(Nullable<int> districtId, Nullable<int> schoolID, string deptName)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var deptNameParameter = deptName != null ?
                new ObjectParameter("DeptName", deptName) :
                new ObjectParameter("DeptName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateDepartment", districtIdParameter, schoolIDParameter, deptNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpdateDistrictStaffDetails(Nullable<int> staffid, Nullable<int> districtId, string schools, Nullable<int> defaultschoolid, Nullable<int> roleid, string username, Nullable<int> stafftype, Nullable<int> prefix, string firstname, string lastname, string middlename, Nullable<int> salutation, Nullable<int> gender, Nullable<System.DateTime> dob, string staffmedicalalert, string password, string addresstypes, string streetnumbers, string streetnames, string zipcodes, string states, string cities, string counties, string countries, string neighbourhoods, string apartments, string poboxes, string others, string phonenumbers, string phonetypes, string extensions, string unlisted, byte[] photo, string phototype, string photoname, string socialtypes, string socialvalues, string assignmentschools, string departments, string rooms, string startdates, string enddates, string licnumber, Nullable<int> hqtpl, string region, Nullable<bool> isdistrictdefault, Nullable<bool> isschooldefault, Nullable<bool> teacherStatus, Nullable<bool> homeRoomAdvisorStatus, Nullable<bool> counselorStatus, Nullable<bool> managesAttendanceStatus, Nullable<bool> stateReportingStatus, Nullable<bool> activeStatus, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var defaultschoolidParameter = defaultschoolid.HasValue ?
                new ObjectParameter("defaultschoolid", defaultschoolid) :
                new ObjectParameter("defaultschoolid", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var stafftypeParameter = stafftype.HasValue ?
                new ObjectParameter("stafftype", stafftype) :
                new ObjectParameter("stafftype", typeof(int));
    
            var prefixParameter = prefix.HasValue ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var salutationParameter = salutation.HasValue ?
                new ObjectParameter("salutation", salutation) :
                new ObjectParameter("salutation", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var staffmedicalalertParameter = staffmedicalalert != null ?
                new ObjectParameter("staffmedicalalert", staffmedicalalert) :
                new ObjectParameter("staffmedicalalert", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addresstypesParameter = addresstypes != null ?
                new ObjectParameter("addresstypes", addresstypes) :
                new ObjectParameter("addresstypes", typeof(string));
    
            var streetnumbersParameter = streetnumbers != null ?
                new ObjectParameter("streetnumbers", streetnumbers) :
                new ObjectParameter("streetnumbers", typeof(string));
    
            var streetnamesParameter = streetnames != null ?
                new ObjectParameter("streetnames", streetnames) :
                new ObjectParameter("streetnames", typeof(string));
    
            var zipcodesParameter = zipcodes != null ?
                new ObjectParameter("zipcodes", zipcodes) :
                new ObjectParameter("zipcodes", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("states", states) :
                new ObjectParameter("states", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("cities", cities) :
                new ObjectParameter("cities", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("counties", counties) :
                new ObjectParameter("counties", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("countries", countries) :
                new ObjectParameter("countries", typeof(string));
    
            var neighbourhoodsParameter = neighbourhoods != null ?
                new ObjectParameter("neighbourhoods", neighbourhoods) :
                new ObjectParameter("neighbourhoods", typeof(string));
    
            var apartmentsParameter = apartments != null ?
                new ObjectParameter("apartments", apartments) :
                new ObjectParameter("apartments", typeof(string));
    
            var poboxesParameter = poboxes != null ?
                new ObjectParameter("poboxes", poboxes) :
                new ObjectParameter("poboxes", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("others", others) :
                new ObjectParameter("others", typeof(string));
    
            var phonenumbersParameter = phonenumbers != null ?
                new ObjectParameter("phonenumbers", phonenumbers) :
                new ObjectParameter("phonenumbers", typeof(string));
    
            var phonetypesParameter = phonetypes != null ?
                new ObjectParameter("phonetypes", phonetypes) :
                new ObjectParameter("phonetypes", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("extensions", extensions) :
                new ObjectParameter("extensions", typeof(string));
    
            var unlistedParameter = unlisted != null ?
                new ObjectParameter("unlisted", unlisted) :
                new ObjectParameter("unlisted", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var phototypeParameter = phototype != null ?
                new ObjectParameter("phototype", phototype) :
                new ObjectParameter("phototype", typeof(string));
    
            var photonameParameter = photoname != null ?
                new ObjectParameter("photoname", photoname) :
                new ObjectParameter("photoname", typeof(string));
    
            var socialtypesParameter = socialtypes != null ?
                new ObjectParameter("socialtypes", socialtypes) :
                new ObjectParameter("socialtypes", typeof(string));
    
            var socialvaluesParameter = socialvalues != null ?
                new ObjectParameter("socialvalues", socialvalues) :
                new ObjectParameter("socialvalues", typeof(string));
    
            var assignmentschoolsParameter = assignmentschools != null ?
                new ObjectParameter("assignmentschools", assignmentschools) :
                new ObjectParameter("assignmentschools", typeof(string));
    
            var departmentsParameter = departments != null ?
                new ObjectParameter("departments", departments) :
                new ObjectParameter("departments", typeof(string));
    
            var roomsParameter = rooms != null ?
                new ObjectParameter("rooms", rooms) :
                new ObjectParameter("rooms", typeof(string));
    
            var startdatesParameter = startdates != null ?
                new ObjectParameter("startdates", startdates) :
                new ObjectParameter("startdates", typeof(string));
    
            var enddatesParameter = enddates != null ?
                new ObjectParameter("enddates", enddates) :
                new ObjectParameter("enddates", typeof(string));
    
            var licnumberParameter = licnumber != null ?
                new ObjectParameter("licnumber", licnumber) :
                new ObjectParameter("licnumber", typeof(string));
    
            var hqtplParameter = hqtpl.HasValue ?
                new ObjectParameter("hqtpl", hqtpl) :
                new ObjectParameter("hqtpl", typeof(int));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var isdistrictdefaultParameter = isdistrictdefault.HasValue ?
                new ObjectParameter("isdistrictdefault", isdistrictdefault) :
                new ObjectParameter("isdistrictdefault", typeof(bool));
    
            var isschooldefaultParameter = isschooldefault.HasValue ?
                new ObjectParameter("isschooldefault", isschooldefault) :
                new ObjectParameter("isschooldefault", typeof(bool));
    
            var teacherStatusParameter = teacherStatus.HasValue ?
                new ObjectParameter("TeacherStatus", teacherStatus) :
                new ObjectParameter("TeacherStatus", typeof(bool));
    
            var homeRoomAdvisorStatusParameter = homeRoomAdvisorStatus.HasValue ?
                new ObjectParameter("HomeRoomAdvisorStatus", homeRoomAdvisorStatus) :
                new ObjectParameter("HomeRoomAdvisorStatus", typeof(bool));
    
            var counselorStatusParameter = counselorStatus.HasValue ?
                new ObjectParameter("CounselorStatus", counselorStatus) :
                new ObjectParameter("CounselorStatus", typeof(bool));
    
            var managesAttendanceStatusParameter = managesAttendanceStatus.HasValue ?
                new ObjectParameter("ManagesAttendanceStatus", managesAttendanceStatus) :
                new ObjectParameter("ManagesAttendanceStatus", typeof(bool));
    
            var stateReportingStatusParameter = stateReportingStatus.HasValue ?
                new ObjectParameter("StateReportingStatus", stateReportingStatus) :
                new ObjectParameter("StateReportingStatus", typeof(bool));
    
            var activeStatusParameter = activeStatus.HasValue ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpdateDistrictStaffDetails", staffidParameter, districtIdParameter, schoolsParameter, defaultschoolidParameter, roleidParameter, usernameParameter, stafftypeParameter, prefixParameter, firstnameParameter, lastnameParameter, middlenameParameter, salutationParameter, genderParameter, dobParameter, staffmedicalalertParameter, passwordParameter, addresstypesParameter, streetnumbersParameter, streetnamesParameter, zipcodesParameter, statesParameter, citiesParameter, countiesParameter, countriesParameter, neighbourhoodsParameter, apartmentsParameter, poboxesParameter, othersParameter, phonenumbersParameter, phonetypesParameter, extensionsParameter, unlistedParameter, photoParameter, phototypeParameter, photonameParameter, socialtypesParameter, socialvaluesParameter, assignmentschoolsParameter, departmentsParameter, roomsParameter, startdatesParameter, enddatesParameter, licnumberParameter, hqtplParameter, regionParameter, isdistrictdefaultParameter, isschooldefaultParameter, teacherStatusParameter, homeRoomAdvisorStatusParameter, counselorStatusParameter, managesAttendanceStatusParameter, stateReportingStatusParameter, activeStatusParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertUpdateProfessionalDevelopment(Nullable<short> staffid, Nullable<short> districtId, string iRN, string schoolName, string lpdcname, string lpdcchaiperson, string address1, string address2, string state, string county, string city, string zipcode, string lpdcchairphone, string phoneextn, string lpdcchairemail, Nullable<System.DateTime> iPDPApprovalDt, string grade, string subject, string title, Nullable<double> contacthours, Nullable<double> cEUHours, string schoolID)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("Staffid", staffid) :
                new ObjectParameter("Staffid", typeof(short));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(short));
    
            var iRNParameter = iRN != null ?
                new ObjectParameter("IRN", iRN) :
                new ObjectParameter("IRN", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var lpdcnameParameter = lpdcname != null ?
                new ObjectParameter("lpdcname", lpdcname) :
                new ObjectParameter("lpdcname", typeof(string));
    
            var lpdcchaipersonParameter = lpdcchaiperson != null ?
                new ObjectParameter("lpdcchaiperson", lpdcchaiperson) :
                new ObjectParameter("lpdcchaiperson", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("county", county) :
                new ObjectParameter("county", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var lpdcchairphoneParameter = lpdcchairphone != null ?
                new ObjectParameter("lpdcchairphone", lpdcchairphone) :
                new ObjectParameter("lpdcchairphone", typeof(string));
    
            var phoneextnParameter = phoneextn != null ?
                new ObjectParameter("phoneextn", phoneextn) :
                new ObjectParameter("phoneextn", typeof(string));
    
            var lpdcchairemailParameter = lpdcchairemail != null ?
                new ObjectParameter("lpdcchairemail", lpdcchairemail) :
                new ObjectParameter("lpdcchairemail", typeof(string));
    
            var iPDPApprovalDtParameter = iPDPApprovalDt.HasValue ?
                new ObjectParameter("IPDPApprovalDt", iPDPApprovalDt) :
                new ObjectParameter("IPDPApprovalDt", typeof(System.DateTime));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var contacthoursParameter = contacthours.HasValue ?
                new ObjectParameter("Contacthours", contacthours) :
                new ObjectParameter("Contacthours", typeof(double));
    
            var cEUHoursParameter = cEUHours.HasValue ?
                new ObjectParameter("CEUHours", cEUHours) :
                new ObjectParameter("CEUHours", typeof(double));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateProfessionalDevelopment", staffidParameter, districtIdParameter, iRNParameter, schoolNameParameter, lpdcnameParameter, lpdcchaipersonParameter, address1Parameter, address2Parameter, stateParameter, countyParameter, cityParameter, zipcodeParameter, lpdcchairphoneParameter, phoneextnParameter, lpdcchairemailParameter, iPDPApprovalDtParameter, gradeParameter, subjectParameter, titleParameter, contacthoursParameter, cEUHoursParameter, schoolIDParameter);
        }
    
        public virtual int uspInsertUpdatePublicSchoolDistricts(Nullable<int> id, string districtName, string contactPerson, string contactEmail, string contactPhone, string contactFax, string county, Nullable<int> irn)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactEmailParameter = contactEmail != null ?
                new ObjectParameter("ContactEmail", contactEmail) :
                new ObjectParameter("ContactEmail", typeof(string));
    
            var contactPhoneParameter = contactPhone != null ?
                new ObjectParameter("ContactPhone", contactPhone) :
                new ObjectParameter("ContactPhone", typeof(string));
    
            var contactFaxParameter = contactFax != null ?
                new ObjectParameter("ContactFax", contactFax) :
                new ObjectParameter("ContactFax", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var irnParameter = irn.HasValue ?
                new ObjectParameter("Irn", irn) :
                new ObjectParameter("Irn", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdatePublicSchoolDistricts", idParameter, districtNameParameter, contactPersonParameter, contactEmailParameter, contactPhoneParameter, contactFaxParameter, countyParameter, irnParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpdateRequiredDocuments(Nullable<int> studentID, string birthCertificate, string birthCertificationSubmitDate, string proofofResidence, string proofofResidenceSubmitDate, string immunization, string immuniaztionSubmitDate, string custody, string custodySubmitDate, string lastGradeCard, string lastGradeCardSubmitDate, string transcript, string transcriptSubmitDate, string testingOGT, string testingOGTSubmitDate, string testingOAA, string testingOAASubmitDate, string testingPARCC, string testingPARCCSubmitDate, string testingACT, string testingACTSubmitDate, string recordRequestSent, string schoolRequestSentDate, Nullable<int> schoolRequestSentTo, string recordReceived, string recordRequestReceivedDate, Nullable<int> schoolRequestReceivedFrom, string recordSent, string recordSentDate, string emergencyMedical, string emergencyMedicalSubmitDate, string enrollmentPolicy, string enrollmentPolicySubmitDate, string financialResponsibilityPolicy, string financialResponsibilityPolicySubmitDate, string acceptableUsePolicy, string acceptableUsePolicySubmitDate, string publicityPolicy, string publicityPolicySubmitDate, string studentParentContract, string studentParentContractSubmitDate, string incomeInformation, string incomeInformationSubmitDate, string medicaidContract, string medicaidContractSubmitDate, string releaseInformation, string releaseInformationSubmitDate, string eTR, string eTRSubmitDate, string iEP, string iEPSubmitDate, string fiveZeroFour, string fiveZeroFourSubmitDate, string districtNotifiedSent, string districtNotifiedSentSubmitDate, Nullable<int> districtNotified, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var birthCertificateParameter = birthCertificate != null ?
                new ObjectParameter("BirthCertificate", birthCertificate) :
                new ObjectParameter("BirthCertificate", typeof(string));
    
            var birthCertificationSubmitDateParameter = birthCertificationSubmitDate != null ?
                new ObjectParameter("BirthCertificationSubmitDate", birthCertificationSubmitDate) :
                new ObjectParameter("BirthCertificationSubmitDate", typeof(string));
    
            var proofofResidenceParameter = proofofResidence != null ?
                new ObjectParameter("ProofofResidence", proofofResidence) :
                new ObjectParameter("ProofofResidence", typeof(string));
    
            var proofofResidenceSubmitDateParameter = proofofResidenceSubmitDate != null ?
                new ObjectParameter("ProofofResidenceSubmitDate", proofofResidenceSubmitDate) :
                new ObjectParameter("ProofofResidenceSubmitDate", typeof(string));
    
            var immunizationParameter = immunization != null ?
                new ObjectParameter("Immunization", immunization) :
                new ObjectParameter("Immunization", typeof(string));
    
            var immuniaztionSubmitDateParameter = immuniaztionSubmitDate != null ?
                new ObjectParameter("ImmuniaztionSubmitDate", immuniaztionSubmitDate) :
                new ObjectParameter("ImmuniaztionSubmitDate", typeof(string));
    
            var custodyParameter = custody != null ?
                new ObjectParameter("Custody", custody) :
                new ObjectParameter("Custody", typeof(string));
    
            var custodySubmitDateParameter = custodySubmitDate != null ?
                new ObjectParameter("CustodySubmitDate", custodySubmitDate) :
                new ObjectParameter("CustodySubmitDate", typeof(string));
    
            var lastGradeCardParameter = lastGradeCard != null ?
                new ObjectParameter("LastGradeCard", lastGradeCard) :
                new ObjectParameter("LastGradeCard", typeof(string));
    
            var lastGradeCardSubmitDateParameter = lastGradeCardSubmitDate != null ?
                new ObjectParameter("LastGradeCardSubmitDate", lastGradeCardSubmitDate) :
                new ObjectParameter("LastGradeCardSubmitDate", typeof(string));
    
            var transcriptParameter = transcript != null ?
                new ObjectParameter("Transcript", transcript) :
                new ObjectParameter("Transcript", typeof(string));
    
            var transcriptSubmitDateParameter = transcriptSubmitDate != null ?
                new ObjectParameter("TranscriptSubmitDate", transcriptSubmitDate) :
                new ObjectParameter("TranscriptSubmitDate", typeof(string));
    
            var testingOGTParameter = testingOGT != null ?
                new ObjectParameter("TestingOGT", testingOGT) :
                new ObjectParameter("TestingOGT", typeof(string));
    
            var testingOGTSubmitDateParameter = testingOGTSubmitDate != null ?
                new ObjectParameter("TestingOGTSubmitDate", testingOGTSubmitDate) :
                new ObjectParameter("TestingOGTSubmitDate", typeof(string));
    
            var testingOAAParameter = testingOAA != null ?
                new ObjectParameter("TestingOAA", testingOAA) :
                new ObjectParameter("TestingOAA", typeof(string));
    
            var testingOAASubmitDateParameter = testingOAASubmitDate != null ?
                new ObjectParameter("TestingOAASubmitDate", testingOAASubmitDate) :
                new ObjectParameter("TestingOAASubmitDate", typeof(string));
    
            var testingPARCCParameter = testingPARCC != null ?
                new ObjectParameter("TestingPARCC", testingPARCC) :
                new ObjectParameter("TestingPARCC", typeof(string));
    
            var testingPARCCSubmitDateParameter = testingPARCCSubmitDate != null ?
                new ObjectParameter("TestingPARCCSubmitDate", testingPARCCSubmitDate) :
                new ObjectParameter("TestingPARCCSubmitDate", typeof(string));
    
            var testingACTParameter = testingACT != null ?
                new ObjectParameter("TestingACT", testingACT) :
                new ObjectParameter("TestingACT", typeof(string));
    
            var testingACTSubmitDateParameter = testingACTSubmitDate != null ?
                new ObjectParameter("TestingACTSubmitDate", testingACTSubmitDate) :
                new ObjectParameter("TestingACTSubmitDate", typeof(string));
    
            var recordRequestSentParameter = recordRequestSent != null ?
                new ObjectParameter("RecordRequestSent", recordRequestSent) :
                new ObjectParameter("RecordRequestSent", typeof(string));
    
            var schoolRequestSentDateParameter = schoolRequestSentDate != null ?
                new ObjectParameter("SchoolRequestSentDate", schoolRequestSentDate) :
                new ObjectParameter("SchoolRequestSentDate", typeof(string));
    
            var schoolRequestSentToParameter = schoolRequestSentTo.HasValue ?
                new ObjectParameter("SchoolRequestSentTo", schoolRequestSentTo) :
                new ObjectParameter("SchoolRequestSentTo", typeof(int));
    
            var recordReceivedParameter = recordReceived != null ?
                new ObjectParameter("RecordReceived", recordReceived) :
                new ObjectParameter("RecordReceived", typeof(string));
    
            var recordRequestReceivedDateParameter = recordRequestReceivedDate != null ?
                new ObjectParameter("RecordRequestReceivedDate", recordRequestReceivedDate) :
                new ObjectParameter("RecordRequestReceivedDate", typeof(string));
    
            var schoolRequestReceivedFromParameter = schoolRequestReceivedFrom.HasValue ?
                new ObjectParameter("SchoolRequestReceivedFrom", schoolRequestReceivedFrom) :
                new ObjectParameter("SchoolRequestReceivedFrom", typeof(int));
    
            var recordSentParameter = recordSent != null ?
                new ObjectParameter("RecordSent", recordSent) :
                new ObjectParameter("RecordSent", typeof(string));
    
            var recordSentDateParameter = recordSentDate != null ?
                new ObjectParameter("RecordSentDate", recordSentDate) :
                new ObjectParameter("RecordSentDate", typeof(string));
    
            var emergencyMedicalParameter = emergencyMedical != null ?
                new ObjectParameter("EmergencyMedical", emergencyMedical) :
                new ObjectParameter("EmergencyMedical", typeof(string));
    
            var emergencyMedicalSubmitDateParameter = emergencyMedicalSubmitDate != null ?
                new ObjectParameter("EmergencyMedicalSubmitDate", emergencyMedicalSubmitDate) :
                new ObjectParameter("EmergencyMedicalSubmitDate", typeof(string));
    
            var enrollmentPolicyParameter = enrollmentPolicy != null ?
                new ObjectParameter("EnrollmentPolicy", enrollmentPolicy) :
                new ObjectParameter("EnrollmentPolicy", typeof(string));
    
            var enrollmentPolicySubmitDateParameter = enrollmentPolicySubmitDate != null ?
                new ObjectParameter("EnrollmentPolicySubmitDate", enrollmentPolicySubmitDate) :
                new ObjectParameter("EnrollmentPolicySubmitDate", typeof(string));
    
            var financialResponsibilityPolicyParameter = financialResponsibilityPolicy != null ?
                new ObjectParameter("FinancialResponsibilityPolicy", financialResponsibilityPolicy) :
                new ObjectParameter("FinancialResponsibilityPolicy", typeof(string));
    
            var financialResponsibilityPolicySubmitDateParameter = financialResponsibilityPolicySubmitDate != null ?
                new ObjectParameter("FinancialResponsibilityPolicySubmitDate", financialResponsibilityPolicySubmitDate) :
                new ObjectParameter("FinancialResponsibilityPolicySubmitDate", typeof(string));
    
            var acceptableUsePolicyParameter = acceptableUsePolicy != null ?
                new ObjectParameter("AcceptableUsePolicy", acceptableUsePolicy) :
                new ObjectParameter("AcceptableUsePolicy", typeof(string));
    
            var acceptableUsePolicySubmitDateParameter = acceptableUsePolicySubmitDate != null ?
                new ObjectParameter("AcceptableUsePolicySubmitDate", acceptableUsePolicySubmitDate) :
                new ObjectParameter("AcceptableUsePolicySubmitDate", typeof(string));
    
            var publicityPolicyParameter = publicityPolicy != null ?
                new ObjectParameter("PublicityPolicy", publicityPolicy) :
                new ObjectParameter("PublicityPolicy", typeof(string));
    
            var publicityPolicySubmitDateParameter = publicityPolicySubmitDate != null ?
                new ObjectParameter("PublicityPolicySubmitDate", publicityPolicySubmitDate) :
                new ObjectParameter("PublicityPolicySubmitDate", typeof(string));
    
            var studentParentContractParameter = studentParentContract != null ?
                new ObjectParameter("StudentParentContract", studentParentContract) :
                new ObjectParameter("StudentParentContract", typeof(string));
    
            var studentParentContractSubmitDateParameter = studentParentContractSubmitDate != null ?
                new ObjectParameter("StudentParentContractSubmitDate", studentParentContractSubmitDate) :
                new ObjectParameter("StudentParentContractSubmitDate", typeof(string));
    
            var incomeInformationParameter = incomeInformation != null ?
                new ObjectParameter("IncomeInformation", incomeInformation) :
                new ObjectParameter("IncomeInformation", typeof(string));
    
            var incomeInformationSubmitDateParameter = incomeInformationSubmitDate != null ?
                new ObjectParameter("IncomeInformationSubmitDate", incomeInformationSubmitDate) :
                new ObjectParameter("IncomeInformationSubmitDate", typeof(string));
    
            var medicaidContractParameter = medicaidContract != null ?
                new ObjectParameter("MedicaidContract", medicaidContract) :
                new ObjectParameter("MedicaidContract", typeof(string));
    
            var medicaidContractSubmitDateParameter = medicaidContractSubmitDate != null ?
                new ObjectParameter("MedicaidContractSubmitDate", medicaidContractSubmitDate) :
                new ObjectParameter("MedicaidContractSubmitDate", typeof(string));
    
            var releaseInformationParameter = releaseInformation != null ?
                new ObjectParameter("ReleaseInformation", releaseInformation) :
                new ObjectParameter("ReleaseInformation", typeof(string));
    
            var releaseInformationSubmitDateParameter = releaseInformationSubmitDate != null ?
                new ObjectParameter("ReleaseInformationSubmitDate", releaseInformationSubmitDate) :
                new ObjectParameter("ReleaseInformationSubmitDate", typeof(string));
    
            var eTRParameter = eTR != null ?
                new ObjectParameter("ETR", eTR) :
                new ObjectParameter("ETR", typeof(string));
    
            var eTRSubmitDateParameter = eTRSubmitDate != null ?
                new ObjectParameter("ETRSubmitDate", eTRSubmitDate) :
                new ObjectParameter("ETRSubmitDate", typeof(string));
    
            var iEPParameter = iEP != null ?
                new ObjectParameter("IEP", iEP) :
                new ObjectParameter("IEP", typeof(string));
    
            var iEPSubmitDateParameter = iEPSubmitDate != null ?
                new ObjectParameter("IEPSubmitDate", iEPSubmitDate) :
                new ObjectParameter("IEPSubmitDate", typeof(string));
    
            var fiveZeroFourParameter = fiveZeroFour != null ?
                new ObjectParameter("FiveZeroFour", fiveZeroFour) :
                new ObjectParameter("FiveZeroFour", typeof(string));
    
            var fiveZeroFourSubmitDateParameter = fiveZeroFourSubmitDate != null ?
                new ObjectParameter("FiveZeroFourSubmitDate", fiveZeroFourSubmitDate) :
                new ObjectParameter("FiveZeroFourSubmitDate", typeof(string));
    
            var districtNotifiedSentParameter = districtNotifiedSent != null ?
                new ObjectParameter("DistrictNotifiedSent", districtNotifiedSent) :
                new ObjectParameter("DistrictNotifiedSent", typeof(string));
    
            var districtNotifiedSentSubmitDateParameter = districtNotifiedSentSubmitDate != null ?
                new ObjectParameter("DistrictNotifiedSentSubmitDate", districtNotifiedSentSubmitDate) :
                new ObjectParameter("DistrictNotifiedSentSubmitDate", typeof(string));
    
            var districtNotifiedParameter = districtNotified.HasValue ?
                new ObjectParameter("DistrictNotified", districtNotified) :
                new ObjectParameter("DistrictNotified", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpdateRequiredDocuments", studentIDParameter, birthCertificateParameter, birthCertificationSubmitDateParameter, proofofResidenceParameter, proofofResidenceSubmitDateParameter, immunizationParameter, immuniaztionSubmitDateParameter, custodyParameter, custodySubmitDateParameter, lastGradeCardParameter, lastGradeCardSubmitDateParameter, transcriptParameter, transcriptSubmitDateParameter, testingOGTParameter, testingOGTSubmitDateParameter, testingOAAParameter, testingOAASubmitDateParameter, testingPARCCParameter, testingPARCCSubmitDateParameter, testingACTParameter, testingACTSubmitDateParameter, recordRequestSentParameter, schoolRequestSentDateParameter, schoolRequestSentToParameter, recordReceivedParameter, recordRequestReceivedDateParameter, schoolRequestReceivedFromParameter, recordSentParameter, recordSentDateParameter, emergencyMedicalParameter, emergencyMedicalSubmitDateParameter, enrollmentPolicyParameter, enrollmentPolicySubmitDateParameter, financialResponsibilityPolicyParameter, financialResponsibilityPolicySubmitDateParameter, acceptableUsePolicyParameter, acceptableUsePolicySubmitDateParameter, publicityPolicyParameter, publicityPolicySubmitDateParameter, studentParentContractParameter, studentParentContractSubmitDateParameter, incomeInformationParameter, incomeInformationSubmitDateParameter, medicaidContractParameter, medicaidContractSubmitDateParameter, releaseInformationParameter, releaseInformationSubmitDateParameter, eTRParameter, eTRSubmitDateParameter, iEPParameter, iEPSubmitDateParameter, fiveZeroFourParameter, fiveZeroFourSubmitDateParameter, districtNotifiedSentParameter, districtNotifiedSentSubmitDateParameter, districtNotifiedParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspInsertUpdateSchoolInfo(Nullable<int> districtID, Nullable<int> schoolID, string alternateID, string schoolName, string shortName, string address1, string address2, string country, string state, string county, string city, string zIPCode, string phone, string fax, string email, string website, string logo, string facebookURL, string twitterURL, string principal, string principalContactNo, string principalEmail, string asstPrincipal, string asstPrincipalContactNo, string asstPrincipalEmail)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var alternateIDParameter = alternateID != null ?
                new ObjectParameter("AlternateID", alternateID) :
                new ObjectParameter("AlternateID", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("ShortName", shortName) :
                new ObjectParameter("ShortName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var zIPCodeParameter = zIPCode != null ?
                new ObjectParameter("ZIPCode", zIPCode) :
                new ObjectParameter("ZIPCode", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("logo", logo) :
                new ObjectParameter("logo", typeof(string));
    
            var facebookURLParameter = facebookURL != null ?
                new ObjectParameter("FacebookURL", facebookURL) :
                new ObjectParameter("FacebookURL", typeof(string));
    
            var twitterURLParameter = twitterURL != null ?
                new ObjectParameter("TwitterURL", twitterURL) :
                new ObjectParameter("TwitterURL", typeof(string));
    
            var principalParameter = principal != null ?
                new ObjectParameter("Principal", principal) :
                new ObjectParameter("Principal", typeof(string));
    
            var principalContactNoParameter = principalContactNo != null ?
                new ObjectParameter("PrincipalContactNo", principalContactNo) :
                new ObjectParameter("PrincipalContactNo", typeof(string));
    
            var principalEmailParameter = principalEmail != null ?
                new ObjectParameter("PrincipalEmail", principalEmail) :
                new ObjectParameter("PrincipalEmail", typeof(string));
    
            var asstPrincipalParameter = asstPrincipal != null ?
                new ObjectParameter("AsstPrincipal", asstPrincipal) :
                new ObjectParameter("AsstPrincipal", typeof(string));
    
            var asstPrincipalContactNoParameter = asstPrincipalContactNo != null ?
                new ObjectParameter("AsstPrincipalContactNo", asstPrincipalContactNo) :
                new ObjectParameter("AsstPrincipalContactNo", typeof(string));
    
            var asstPrincipalEmailParameter = asstPrincipalEmail != null ?
                new ObjectParameter("AsstPrincipalEmail", asstPrincipalEmail) :
                new ObjectParameter("AsstPrincipalEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateSchoolInfo", districtIDParameter, schoolIDParameter, alternateIDParameter, schoolNameParameter, shortNameParameter, address1Parameter, address2Parameter, countryParameter, stateParameter, countyParameter, cityParameter, zIPCodeParameter, phoneParameter, faxParameter, emailParameter, websiteParameter, logoParameter, facebookURLParameter, twitterURLParameter, principalParameter, principalContactNoParameter, principalEmailParameter, asstPrincipalParameter, asstPrincipalContactNoParameter, asstPrincipalEmailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpdateSchoolStaffDetails(Nullable<int> staffid, Nullable<int> districtId, Nullable<int> schoolId, Nullable<int> roleid, string username, Nullable<int> stafftype, Nullable<int> prefix, string firstname, string lastname, string middlename, Nullable<int> salutation, Nullable<int> gender, Nullable<System.DateTime> dob, string staffmedicalalert, string password, string addresstypes, string streetnumbers, string streetnames, string zipcodes, string states, string cities, string counties, string countries, string neighbourhoods, string apartments, string poboxes, string others, string phonenumbers, string phonetypes, string extensions, string unlisted, byte[] photo, string phototype, string photoname, string socialtypes, string socialvalues, string schools, string departments, string rooms, string startdates, string enddates, string licnumber, Nullable<int> hqtpl, string region, Nullable<bool> isdistrictdefault, Nullable<bool> isschooldefault, Nullable<bool> teacherStatus, Nullable<bool> homeRoomAdvisorStatus, Nullable<bool> counselorStatus, Nullable<bool> managesAttendanceStatus, Nullable<bool> stateReportingStatus, Nullable<bool> activeStatus, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var stafftypeParameter = stafftype.HasValue ?
                new ObjectParameter("stafftype", stafftype) :
                new ObjectParameter("stafftype", typeof(int));
    
            var prefixParameter = prefix.HasValue ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var salutationParameter = salutation.HasValue ?
                new ObjectParameter("salutation", salutation) :
                new ObjectParameter("salutation", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var staffmedicalalertParameter = staffmedicalalert != null ?
                new ObjectParameter("staffmedicalalert", staffmedicalalert) :
                new ObjectParameter("staffmedicalalert", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addresstypesParameter = addresstypes != null ?
                new ObjectParameter("addresstypes", addresstypes) :
                new ObjectParameter("addresstypes", typeof(string));
    
            var streetnumbersParameter = streetnumbers != null ?
                new ObjectParameter("streetnumbers", streetnumbers) :
                new ObjectParameter("streetnumbers", typeof(string));
    
            var streetnamesParameter = streetnames != null ?
                new ObjectParameter("streetnames", streetnames) :
                new ObjectParameter("streetnames", typeof(string));
    
            var zipcodesParameter = zipcodes != null ?
                new ObjectParameter("zipcodes", zipcodes) :
                new ObjectParameter("zipcodes", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("states", states) :
                new ObjectParameter("states", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("cities", cities) :
                new ObjectParameter("cities", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("counties", counties) :
                new ObjectParameter("counties", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("countries", countries) :
                new ObjectParameter("countries", typeof(string));
    
            var neighbourhoodsParameter = neighbourhoods != null ?
                new ObjectParameter("neighbourhoods", neighbourhoods) :
                new ObjectParameter("neighbourhoods", typeof(string));
    
            var apartmentsParameter = apartments != null ?
                new ObjectParameter("apartments", apartments) :
                new ObjectParameter("apartments", typeof(string));
    
            var poboxesParameter = poboxes != null ?
                new ObjectParameter("poboxes", poboxes) :
                new ObjectParameter("poboxes", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("others", others) :
                new ObjectParameter("others", typeof(string));
    
            var phonenumbersParameter = phonenumbers != null ?
                new ObjectParameter("phonenumbers", phonenumbers) :
                new ObjectParameter("phonenumbers", typeof(string));
    
            var phonetypesParameter = phonetypes != null ?
                new ObjectParameter("phonetypes", phonetypes) :
                new ObjectParameter("phonetypes", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("extensions", extensions) :
                new ObjectParameter("extensions", typeof(string));
    
            var unlistedParameter = unlisted != null ?
                new ObjectParameter("unlisted", unlisted) :
                new ObjectParameter("unlisted", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var phototypeParameter = phototype != null ?
                new ObjectParameter("phototype", phototype) :
                new ObjectParameter("phototype", typeof(string));
    
            var photonameParameter = photoname != null ?
                new ObjectParameter("photoname", photoname) :
                new ObjectParameter("photoname", typeof(string));
    
            var socialtypesParameter = socialtypes != null ?
                new ObjectParameter("socialtypes", socialtypes) :
                new ObjectParameter("socialtypes", typeof(string));
    
            var socialvaluesParameter = socialvalues != null ?
                new ObjectParameter("socialvalues", socialvalues) :
                new ObjectParameter("socialvalues", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("schools", schools) :
                new ObjectParameter("schools", typeof(string));
    
            var departmentsParameter = departments != null ?
                new ObjectParameter("departments", departments) :
                new ObjectParameter("departments", typeof(string));
    
            var roomsParameter = rooms != null ?
                new ObjectParameter("rooms", rooms) :
                new ObjectParameter("rooms", typeof(string));
    
            var startdatesParameter = startdates != null ?
                new ObjectParameter("startdates", startdates) :
                new ObjectParameter("startdates", typeof(string));
    
            var enddatesParameter = enddates != null ?
                new ObjectParameter("enddates", enddates) :
                new ObjectParameter("enddates", typeof(string));
    
            var licnumberParameter = licnumber != null ?
                new ObjectParameter("licnumber", licnumber) :
                new ObjectParameter("licnumber", typeof(string));
    
            var hqtplParameter = hqtpl.HasValue ?
                new ObjectParameter("hqtpl", hqtpl) :
                new ObjectParameter("hqtpl", typeof(int));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var isdistrictdefaultParameter = isdistrictdefault.HasValue ?
                new ObjectParameter("isdistrictdefault", isdistrictdefault) :
                new ObjectParameter("isdistrictdefault", typeof(bool));
    
            var isschooldefaultParameter = isschooldefault.HasValue ?
                new ObjectParameter("isschooldefault", isschooldefault) :
                new ObjectParameter("isschooldefault", typeof(bool));
    
            var teacherStatusParameter = teacherStatus.HasValue ?
                new ObjectParameter("TeacherStatus", teacherStatus) :
                new ObjectParameter("TeacherStatus", typeof(bool));
    
            var homeRoomAdvisorStatusParameter = homeRoomAdvisorStatus.HasValue ?
                new ObjectParameter("HomeRoomAdvisorStatus", homeRoomAdvisorStatus) :
                new ObjectParameter("HomeRoomAdvisorStatus", typeof(bool));
    
            var counselorStatusParameter = counselorStatus.HasValue ?
                new ObjectParameter("CounselorStatus", counselorStatus) :
                new ObjectParameter("CounselorStatus", typeof(bool));
    
            var managesAttendanceStatusParameter = managesAttendanceStatus.HasValue ?
                new ObjectParameter("ManagesAttendanceStatus", managesAttendanceStatus) :
                new ObjectParameter("ManagesAttendanceStatus", typeof(bool));
    
            var stateReportingStatusParameter = stateReportingStatus.HasValue ?
                new ObjectParameter("StateReportingStatus", stateReportingStatus) :
                new ObjectParameter("StateReportingStatus", typeof(bool));
    
            var activeStatusParameter = activeStatus.HasValue ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpdateSchoolStaffDetails", staffidParameter, districtIdParameter, schoolIdParameter, roleidParameter, usernameParameter, stafftypeParameter, prefixParameter, firstnameParameter, lastnameParameter, middlenameParameter, salutationParameter, genderParameter, dobParameter, staffmedicalalertParameter, passwordParameter, addresstypesParameter, streetnumbersParameter, streetnamesParameter, zipcodesParameter, statesParameter, citiesParameter, countiesParameter, countriesParameter, neighbourhoodsParameter, apartmentsParameter, poboxesParameter, othersParameter, phonenumbersParameter, phonetypesParameter, extensionsParameter, unlistedParameter, photoParameter, phototypeParameter, photonameParameter, socialtypesParameter, socialvaluesParameter, schoolsParameter, departmentsParameter, roomsParameter, startdatesParameter, enddatesParameter, licnumberParameter, hqtplParameter, regionParameter, isdistrictdefaultParameter, isschooldefaultParameter, teacherStatusParameter, homeRoomAdvisorStatusParameter, counselorStatusParameter, managesAttendanceStatusParameter, stateReportingStatusParameter, activeStatusParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpdateStudentAlternateInfo(Nullable<int> studentID, string alternateFirstName, string alternateMiddleName, string alternateLastName, Nullable<int> alternatePronounTypePL, string alternateOther, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var alternateFirstNameParameter = alternateFirstName != null ?
                new ObjectParameter("AlternateFirstName", alternateFirstName) :
                new ObjectParameter("AlternateFirstName", typeof(string));
    
            var alternateMiddleNameParameter = alternateMiddleName != null ?
                new ObjectParameter("AlternateMiddleName", alternateMiddleName) :
                new ObjectParameter("AlternateMiddleName", typeof(string));
    
            var alternateLastNameParameter = alternateLastName != null ?
                new ObjectParameter("AlternateLastName", alternateLastName) :
                new ObjectParameter("AlternateLastName", typeof(string));
    
            var alternatePronounTypePLParameter = alternatePronounTypePL.HasValue ?
                new ObjectParameter("AlternatePronounTypePL", alternatePronounTypePL) :
                new ObjectParameter("AlternatePronounTypePL", typeof(int));
    
            var alternateOtherParameter = alternateOther != null ?
                new ObjectParameter("AlternateOther", alternateOther) :
                new ObjectParameter("AlternateOther", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpdateStudentAlternateInfo", studentIDParameter, alternateFirstNameParameter, alternateMiddleNameParameter, alternateLastNameParameter, alternatePronounTypePLParameter, alternateOtherParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpDATEStudentRequiredDocuments(Nullable<int> studentID, string birthCertification, Nullable<System.DateTime> birthCertificateSubmitDATE, string proofofResidence, Nullable<System.DateTime> proofofResidenceSubmitDATE, string immunizations, Nullable<System.DateTime> immunizationsSubmitDATE, string custody, Nullable<System.DateTime> custodySubmitDATE, string lastGradeCard, Nullable<System.DateTime> lastGradeCardSubmitDATE, string transcript, Nullable<System.DateTime> transcriptSubmitDATE, string testingOGT, Nullable<System.DateTime> testingOGTSubmitDATE, string testingOAA, Nullable<System.DateTime> testingOAASubmitDATE, string testingARCC, Nullable<System.DateTime> testingARCCSubmitDATE, string testingACT, Nullable<System.DateTime> testingACTSubmitDATE, Nullable<System.DateTime> recordRequestSentDATE, Nullable<int> schoolRequestSentTo, Nullable<System.DateTime> recordRequestReceivedDATE, Nullable<int> schoolRequestReceivedFrom, string emergencyMedical, Nullable<System.DateTime> emergencyMedicalSubmitDATE, string enrollmentPolicy, Nullable<System.DateTime> enrollmentPolicySubmitDATE, string financialResponsibilityPolicy, Nullable<System.DateTime> financialResponsibilityPolicySubmitDATE, string acceptableUsePolicy, Nullable<System.DateTime> acceptableUsePolicySubmitDATE, string publicityPolicy, Nullable<System.DateTime> publicityPolicySubmitDATE, string studentorParentContract, Nullable<System.DateTime> studentorParentContractSubmitDATE, string title1IncomeInformation, Nullable<System.DateTime> title1IncomeInformationSubmitDATE, string medicaidContract, Nullable<System.DateTime> medicaidContractSubmitDATE, string releaseofInformation, Nullable<System.DateTime> releaseofInformationSubmitDATE, string eTR, Nullable<System.DateTime> eTRSubmitDATE, string iEP, Nullable<System.DateTime> iEPSubmitDATE, string p504, Nullable<System.DateTime> p504SubmitDATE, Nullable<int> createdBy, Nullable<System.DateTime> createdDATE)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var birthCertificationParameter = birthCertification != null ?
                new ObjectParameter("BirthCertification", birthCertification) :
                new ObjectParameter("BirthCertification", typeof(string));
    
            var birthCertificateSubmitDATEParameter = birthCertificateSubmitDATE.HasValue ?
                new ObjectParameter("BirthCertificateSubmitDATE", birthCertificateSubmitDATE) :
                new ObjectParameter("BirthCertificateSubmitDATE", typeof(System.DateTime));
    
            var proofofResidenceParameter = proofofResidence != null ?
                new ObjectParameter("ProofofResidence", proofofResidence) :
                new ObjectParameter("ProofofResidence", typeof(string));
    
            var proofofResidenceSubmitDATEParameter = proofofResidenceSubmitDATE.HasValue ?
                new ObjectParameter("ProofofResidenceSubmitDATE", proofofResidenceSubmitDATE) :
                new ObjectParameter("ProofofResidenceSubmitDATE", typeof(System.DateTime));
    
            var immunizationsParameter = immunizations != null ?
                new ObjectParameter("Immunizations", immunizations) :
                new ObjectParameter("Immunizations", typeof(string));
    
            var immunizationsSubmitDATEParameter = immunizationsSubmitDATE.HasValue ?
                new ObjectParameter("ImmunizationsSubmitDATE", immunizationsSubmitDATE) :
                new ObjectParameter("ImmunizationsSubmitDATE", typeof(System.DateTime));
    
            var custodyParameter = custody != null ?
                new ObjectParameter("Custody", custody) :
                new ObjectParameter("Custody", typeof(string));
    
            var custodySubmitDATEParameter = custodySubmitDATE.HasValue ?
                new ObjectParameter("CustodySubmitDATE", custodySubmitDATE) :
                new ObjectParameter("CustodySubmitDATE", typeof(System.DateTime));
    
            var lastGradeCardParameter = lastGradeCard != null ?
                new ObjectParameter("LastGradeCard", lastGradeCard) :
                new ObjectParameter("LastGradeCard", typeof(string));
    
            var lastGradeCardSubmitDATEParameter = lastGradeCardSubmitDATE.HasValue ?
                new ObjectParameter("LastGradeCardSubmitDATE", lastGradeCardSubmitDATE) :
                new ObjectParameter("LastGradeCardSubmitDATE", typeof(System.DateTime));
    
            var transcriptParameter = transcript != null ?
                new ObjectParameter("Transcript", transcript) :
                new ObjectParameter("Transcript", typeof(string));
    
            var transcriptSubmitDATEParameter = transcriptSubmitDATE.HasValue ?
                new ObjectParameter("TranscriptSubmitDATE", transcriptSubmitDATE) :
                new ObjectParameter("TranscriptSubmitDATE", typeof(System.DateTime));
    
            var testingOGTParameter = testingOGT != null ?
                new ObjectParameter("TestingOGT", testingOGT) :
                new ObjectParameter("TestingOGT", typeof(string));
    
            var testingOGTSubmitDATEParameter = testingOGTSubmitDATE.HasValue ?
                new ObjectParameter("TestingOGTSubmitDATE", testingOGTSubmitDATE) :
                new ObjectParameter("TestingOGTSubmitDATE", typeof(System.DateTime));
    
            var testingOAAParameter = testingOAA != null ?
                new ObjectParameter("TestingOAA", testingOAA) :
                new ObjectParameter("TestingOAA", typeof(string));
    
            var testingOAASubmitDATEParameter = testingOAASubmitDATE.HasValue ?
                new ObjectParameter("TestingOAASubmitDATE", testingOAASubmitDATE) :
                new ObjectParameter("TestingOAASubmitDATE", typeof(System.DateTime));
    
            var testingARCCParameter = testingARCC != null ?
                new ObjectParameter("TestingARCC", testingARCC) :
                new ObjectParameter("TestingARCC", typeof(string));
    
            var testingARCCSubmitDATEParameter = testingARCCSubmitDATE.HasValue ?
                new ObjectParameter("TestingARCCSubmitDATE", testingARCCSubmitDATE) :
                new ObjectParameter("TestingARCCSubmitDATE", typeof(System.DateTime));
    
            var testingACTParameter = testingACT != null ?
                new ObjectParameter("TestingACT", testingACT) :
                new ObjectParameter("TestingACT", typeof(string));
    
            var testingACTSubmitDATEParameter = testingACTSubmitDATE.HasValue ?
                new ObjectParameter("TestingACTSubmitDATE", testingACTSubmitDATE) :
                new ObjectParameter("TestingACTSubmitDATE", typeof(System.DateTime));
    
            var recordRequestSentDATEParameter = recordRequestSentDATE.HasValue ?
                new ObjectParameter("RecordRequestSentDATE", recordRequestSentDATE) :
                new ObjectParameter("RecordRequestSentDATE", typeof(System.DateTime));
    
            var schoolRequestSentToParameter = schoolRequestSentTo.HasValue ?
                new ObjectParameter("SchoolRequestSentTo", schoolRequestSentTo) :
                new ObjectParameter("SchoolRequestSentTo", typeof(int));
    
            var recordRequestReceivedDATEParameter = recordRequestReceivedDATE.HasValue ?
                new ObjectParameter("RecordRequestReceivedDATE", recordRequestReceivedDATE) :
                new ObjectParameter("RecordRequestReceivedDATE", typeof(System.DateTime));
    
            var schoolRequestReceivedFromParameter = schoolRequestReceivedFrom.HasValue ?
                new ObjectParameter("SchoolRequestReceivedFrom", schoolRequestReceivedFrom) :
                new ObjectParameter("SchoolRequestReceivedFrom", typeof(int));
    
            var emergencyMedicalParameter = emergencyMedical != null ?
                new ObjectParameter("EmergencyMedical", emergencyMedical) :
                new ObjectParameter("EmergencyMedical", typeof(string));
    
            var emergencyMedicalSubmitDATEParameter = emergencyMedicalSubmitDATE.HasValue ?
                new ObjectParameter("EmergencyMedicalSubmitDATE", emergencyMedicalSubmitDATE) :
                new ObjectParameter("EmergencyMedicalSubmitDATE", typeof(System.DateTime));
    
            var enrollmentPolicyParameter = enrollmentPolicy != null ?
                new ObjectParameter("EnrollmentPolicy", enrollmentPolicy) :
                new ObjectParameter("EnrollmentPolicy", typeof(string));
    
            var enrollmentPolicySubmitDATEParameter = enrollmentPolicySubmitDATE.HasValue ?
                new ObjectParameter("EnrollmentPolicySubmitDATE", enrollmentPolicySubmitDATE) :
                new ObjectParameter("EnrollmentPolicySubmitDATE", typeof(System.DateTime));
    
            var financialResponsibilityPolicyParameter = financialResponsibilityPolicy != null ?
                new ObjectParameter("FinancialResponsibilityPolicy", financialResponsibilityPolicy) :
                new ObjectParameter("FinancialResponsibilityPolicy", typeof(string));
    
            var financialResponsibilityPolicySubmitDATEParameter = financialResponsibilityPolicySubmitDATE.HasValue ?
                new ObjectParameter("FinancialResponsibilityPolicySubmitDATE", financialResponsibilityPolicySubmitDATE) :
                new ObjectParameter("FinancialResponsibilityPolicySubmitDATE", typeof(System.DateTime));
    
            var acceptableUsePolicyParameter = acceptableUsePolicy != null ?
                new ObjectParameter("AcceptableUsePolicy", acceptableUsePolicy) :
                new ObjectParameter("AcceptableUsePolicy", typeof(string));
    
            var acceptableUsePolicySubmitDATEParameter = acceptableUsePolicySubmitDATE.HasValue ?
                new ObjectParameter("AcceptableUsePolicySubmitDATE", acceptableUsePolicySubmitDATE) :
                new ObjectParameter("AcceptableUsePolicySubmitDATE", typeof(System.DateTime));
    
            var publicityPolicyParameter = publicityPolicy != null ?
                new ObjectParameter("PublicityPolicy", publicityPolicy) :
                new ObjectParameter("PublicityPolicy", typeof(string));
    
            var publicityPolicySubmitDATEParameter = publicityPolicySubmitDATE.HasValue ?
                new ObjectParameter("PublicityPolicySubmitDATE", publicityPolicySubmitDATE) :
                new ObjectParameter("PublicityPolicySubmitDATE", typeof(System.DateTime));
    
            var studentorParentContractParameter = studentorParentContract != null ?
                new ObjectParameter("StudentorParentContract", studentorParentContract) :
                new ObjectParameter("StudentorParentContract", typeof(string));
    
            var studentorParentContractSubmitDATEParameter = studentorParentContractSubmitDATE.HasValue ?
                new ObjectParameter("StudentorParentContractSubmitDATE", studentorParentContractSubmitDATE) :
                new ObjectParameter("StudentorParentContractSubmitDATE", typeof(System.DateTime));
    
            var title1IncomeInformationParameter = title1IncomeInformation != null ?
                new ObjectParameter("Title1IncomeInformation", title1IncomeInformation) :
                new ObjectParameter("Title1IncomeInformation", typeof(string));
    
            var title1IncomeInformationSubmitDATEParameter = title1IncomeInformationSubmitDATE.HasValue ?
                new ObjectParameter("Title1IncomeInformationSubmitDATE", title1IncomeInformationSubmitDATE) :
                new ObjectParameter("Title1IncomeInformationSubmitDATE", typeof(System.DateTime));
    
            var medicaidContractParameter = medicaidContract != null ?
                new ObjectParameter("MedicaidContract", medicaidContract) :
                new ObjectParameter("MedicaidContract", typeof(string));
    
            var medicaidContractSubmitDATEParameter = medicaidContractSubmitDATE.HasValue ?
                new ObjectParameter("MedicaidContractSubmitDATE", medicaidContractSubmitDATE) :
                new ObjectParameter("MedicaidContractSubmitDATE", typeof(System.DateTime));
    
            var releaseofInformationParameter = releaseofInformation != null ?
                new ObjectParameter("ReleaseofInformation", releaseofInformation) :
                new ObjectParameter("ReleaseofInformation", typeof(string));
    
            var releaseofInformationSubmitDATEParameter = releaseofInformationSubmitDATE.HasValue ?
                new ObjectParameter("ReleaseofInformationSubmitDATE", releaseofInformationSubmitDATE) :
                new ObjectParameter("ReleaseofInformationSubmitDATE", typeof(System.DateTime));
    
            var eTRParameter = eTR != null ?
                new ObjectParameter("ETR", eTR) :
                new ObjectParameter("ETR", typeof(string));
    
            var eTRSubmitDATEParameter = eTRSubmitDATE.HasValue ?
                new ObjectParameter("ETRSubmitDATE", eTRSubmitDATE) :
                new ObjectParameter("ETRSubmitDATE", typeof(System.DateTime));
    
            var iEPParameter = iEP != null ?
                new ObjectParameter("IEP", iEP) :
                new ObjectParameter("IEP", typeof(string));
    
            var iEPSubmitDATEParameter = iEPSubmitDATE.HasValue ?
                new ObjectParameter("IEPSubmitDATE", iEPSubmitDATE) :
                new ObjectParameter("IEPSubmitDATE", typeof(System.DateTime));
    
            var p504Parameter = p504 != null ?
                new ObjectParameter("p504", p504) :
                new ObjectParameter("p504", typeof(string));
    
            var p504SubmitDATEParameter = p504SubmitDATE.HasValue ?
                new ObjectParameter("p504SubmitDATE", p504SubmitDATE) :
                new ObjectParameter("p504SubmitDATE", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDATEParameter = createdDATE.HasValue ?
                new ObjectParameter("CreatedDATE", createdDATE) :
                new ObjectParameter("CreatedDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpDATEStudentRequiredDocuments", studentIDParameter, birthCertificationParameter, birthCertificateSubmitDATEParameter, proofofResidenceParameter, proofofResidenceSubmitDATEParameter, immunizationsParameter, immunizationsSubmitDATEParameter, custodyParameter, custodySubmitDATEParameter, lastGradeCardParameter, lastGradeCardSubmitDATEParameter, transcriptParameter, transcriptSubmitDATEParameter, testingOGTParameter, testingOGTSubmitDATEParameter, testingOAAParameter, testingOAASubmitDATEParameter, testingARCCParameter, testingARCCSubmitDATEParameter, testingACTParameter, testingACTSubmitDATEParameter, recordRequestSentDATEParameter, schoolRequestSentToParameter, recordRequestReceivedDATEParameter, schoolRequestReceivedFromParameter, emergencyMedicalParameter, emergencyMedicalSubmitDATEParameter, enrollmentPolicyParameter, enrollmentPolicySubmitDATEParameter, financialResponsibilityPolicyParameter, financialResponsibilityPolicySubmitDATEParameter, acceptableUsePolicyParameter, acceptableUsePolicySubmitDATEParameter, publicityPolicyParameter, publicityPolicySubmitDATEParameter, studentorParentContractParameter, studentorParentContractSubmitDATEParameter, title1IncomeInformationParameter, title1IncomeInformationSubmitDATEParameter, medicaidContractParameter, medicaidContractSubmitDATEParameter, releaseofInformationParameter, releaseofInformationSubmitDATEParameter, eTRParameter, eTRSubmitDATEParameter, iEPParameter, iEPSubmitDATEParameter, p504Parameter, p504SubmitDATEParameter, createdByParameter, createdDATEParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUpdateSystemStaffDetails(Nullable<int> staffid, string districts, string schools, Nullable<int> defaultdistrictid, Nullable<int> defaultschoolid, Nullable<int> roleid, string username, Nullable<int> stafftype, Nullable<int> prefix, string firstname, string lastname, string middlename, Nullable<int> salutation, Nullable<int> gender, Nullable<System.DateTime> dob, string staffmedicalalert, string password, string addresstypes, string streetnumbers, string streetnames, string zipcodes, string states, string cities, string counties, string countries, string neighbourhoods, string apartments, string poboxes, string others, string phonenumbers, string phonetypes, string extensions, string unlisted, byte[] photo, string phototype, string photoname, string socialtypes, string socialvalues, string licnumber, Nullable<int> hqtpl, string region, Nullable<bool> isdistrictdefault, Nullable<bool> isschooldefault, Nullable<bool> teacherStatus, Nullable<bool> homeRoomAdvisorStatus, Nullable<bool> counselorStatus, Nullable<bool> managesAttendanceStatus, Nullable<bool> stateReportingStatus, Nullable<bool> activeStatus, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var districtsParameter = districts != null ?
                new ObjectParameter("Districts", districts) :
                new ObjectParameter("Districts", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var defaultdistrictidParameter = defaultdistrictid.HasValue ?
                new ObjectParameter("defaultdistrictid", defaultdistrictid) :
                new ObjectParameter("defaultdistrictid", typeof(int));
    
            var defaultschoolidParameter = defaultschoolid.HasValue ?
                new ObjectParameter("defaultschoolid", defaultschoolid) :
                new ObjectParameter("defaultschoolid", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var stafftypeParameter = stafftype.HasValue ?
                new ObjectParameter("stafftype", stafftype) :
                new ObjectParameter("stafftype", typeof(int));
    
            var prefixParameter = prefix.HasValue ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var salutationParameter = salutation.HasValue ?
                new ObjectParameter("salutation", salutation) :
                new ObjectParameter("salutation", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var staffmedicalalertParameter = staffmedicalalert != null ?
                new ObjectParameter("staffmedicalalert", staffmedicalalert) :
                new ObjectParameter("staffmedicalalert", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var addresstypesParameter = addresstypes != null ?
                new ObjectParameter("addresstypes", addresstypes) :
                new ObjectParameter("addresstypes", typeof(string));
    
            var streetnumbersParameter = streetnumbers != null ?
                new ObjectParameter("streetnumbers", streetnumbers) :
                new ObjectParameter("streetnumbers", typeof(string));
    
            var streetnamesParameter = streetnames != null ?
                new ObjectParameter("streetnames", streetnames) :
                new ObjectParameter("streetnames", typeof(string));
    
            var zipcodesParameter = zipcodes != null ?
                new ObjectParameter("zipcodes", zipcodes) :
                new ObjectParameter("zipcodes", typeof(string));
    
            var statesParameter = states != null ?
                new ObjectParameter("states", states) :
                new ObjectParameter("states", typeof(string));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("cities", cities) :
                new ObjectParameter("cities", typeof(string));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("counties", counties) :
                new ObjectParameter("counties", typeof(string));
    
            var countriesParameter = countries != null ?
                new ObjectParameter("countries", countries) :
                new ObjectParameter("countries", typeof(string));
    
            var neighbourhoodsParameter = neighbourhoods != null ?
                new ObjectParameter("neighbourhoods", neighbourhoods) :
                new ObjectParameter("neighbourhoods", typeof(string));
    
            var apartmentsParameter = apartments != null ?
                new ObjectParameter("apartments", apartments) :
                new ObjectParameter("apartments", typeof(string));
    
            var poboxesParameter = poboxes != null ?
                new ObjectParameter("poboxes", poboxes) :
                new ObjectParameter("poboxes", typeof(string));
    
            var othersParameter = others != null ?
                new ObjectParameter("others", others) :
                new ObjectParameter("others", typeof(string));
    
            var phonenumbersParameter = phonenumbers != null ?
                new ObjectParameter("phonenumbers", phonenumbers) :
                new ObjectParameter("phonenumbers", typeof(string));
    
            var phonetypesParameter = phonetypes != null ?
                new ObjectParameter("phonetypes", phonetypes) :
                new ObjectParameter("phonetypes", typeof(string));
    
            var extensionsParameter = extensions != null ?
                new ObjectParameter("extensions", extensions) :
                new ObjectParameter("extensions", typeof(string));
    
            var unlistedParameter = unlisted != null ?
                new ObjectParameter("unlisted", unlisted) :
                new ObjectParameter("unlisted", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(byte[]));
    
            var phototypeParameter = phototype != null ?
                new ObjectParameter("phototype", phototype) :
                new ObjectParameter("phototype", typeof(string));
    
            var photonameParameter = photoname != null ?
                new ObjectParameter("photoname", photoname) :
                new ObjectParameter("photoname", typeof(string));
    
            var socialtypesParameter = socialtypes != null ?
                new ObjectParameter("socialtypes", socialtypes) :
                new ObjectParameter("socialtypes", typeof(string));
    
            var socialvaluesParameter = socialvalues != null ?
                new ObjectParameter("socialvalues", socialvalues) :
                new ObjectParameter("socialvalues", typeof(string));
    
            var licnumberParameter = licnumber != null ?
                new ObjectParameter("licnumber", licnumber) :
                new ObjectParameter("licnumber", typeof(string));
    
            var hqtplParameter = hqtpl.HasValue ?
                new ObjectParameter("hqtpl", hqtpl) :
                new ObjectParameter("hqtpl", typeof(int));
    
            var regionParameter = region != null ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(string));
    
            var isdistrictdefaultParameter = isdistrictdefault.HasValue ?
                new ObjectParameter("isdistrictdefault", isdistrictdefault) :
                new ObjectParameter("isdistrictdefault", typeof(bool));
    
            var isschooldefaultParameter = isschooldefault.HasValue ?
                new ObjectParameter("isschooldefault", isschooldefault) :
                new ObjectParameter("isschooldefault", typeof(bool));
    
            var teacherStatusParameter = teacherStatus.HasValue ?
                new ObjectParameter("TeacherStatus", teacherStatus) :
                new ObjectParameter("TeacherStatus", typeof(bool));
    
            var homeRoomAdvisorStatusParameter = homeRoomAdvisorStatus.HasValue ?
                new ObjectParameter("HomeRoomAdvisorStatus", homeRoomAdvisorStatus) :
                new ObjectParameter("HomeRoomAdvisorStatus", typeof(bool));
    
            var counselorStatusParameter = counselorStatus.HasValue ?
                new ObjectParameter("CounselorStatus", counselorStatus) :
                new ObjectParameter("CounselorStatus", typeof(bool));
    
            var managesAttendanceStatusParameter = managesAttendanceStatus.HasValue ?
                new ObjectParameter("ManagesAttendanceStatus", managesAttendanceStatus) :
                new ObjectParameter("ManagesAttendanceStatus", typeof(bool));
    
            var stateReportingStatusParameter = stateReportingStatus.HasValue ?
                new ObjectParameter("StateReportingStatus", stateReportingStatus) :
                new ObjectParameter("StateReportingStatus", typeof(bool));
    
            var activeStatusParameter = activeStatus.HasValue ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(bool));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUpdateSystemStaffDetails", staffidParameter, districtsParameter, schoolsParameter, defaultdistrictidParameter, defaultschoolidParameter, roleidParameter, usernameParameter, stafftypeParameter, prefixParameter, firstnameParameter, lastnameParameter, middlenameParameter, salutationParameter, genderParameter, dobParameter, staffmedicalalertParameter, passwordParameter, addresstypesParameter, streetnumbersParameter, streetnamesParameter, zipcodesParameter, statesParameter, citiesParameter, countiesParameter, countriesParameter, neighbourhoodsParameter, apartmentsParameter, poboxesParameter, othersParameter, phonenumbersParameter, phonetypesParameter, extensionsParameter, unlistedParameter, photoParameter, phototypeParameter, photonameParameter, socialtypesParameter, socialvaluesParameter, licnumberParameter, hqtplParameter, regionParameter, isdistrictdefaultParameter, isschooldefaultParameter, teacherStatusParameter, homeRoomAdvisorStatusParameter, counselorStatusParameter, managesAttendanceStatusParameter, stateReportingStatusParameter, activeStatusParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertUserRole(string rollName, string roleDescription)
        {
            var rollNameParameter = rollName != null ?
                new ObjectParameter("rollName", rollName) :
                new ObjectParameter("rollName", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("roleDescription", roleDescription) :
                new ObjectParameter("roleDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertUserRole", rollNameParameter, roleDescriptionParameter);
        }
    
        public virtual int uspInsertVictims(Nullable<int> victimtype, Nullable<int> studentid, Nullable<int> gradelevel, Nullable<int> staffid, string othervictimfullname, Nullable<int> age, string victimdescription, Nullable<int> disciplineincidentid, string createdby, Nullable<System.DateTime> createddate)
        {
            var victimtypeParameter = victimtype.HasValue ?
                new ObjectParameter("victimtype", victimtype) :
                new ObjectParameter("victimtype", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var othervictimfullnameParameter = othervictimfullname != null ?
                new ObjectParameter("othervictimfullname", othervictimfullname) :
                new ObjectParameter("othervictimfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var victimdescriptionParameter = victimdescription != null ?
                new ObjectParameter("victimdescription", victimdescription) :
                new ObjectParameter("victimdescription", typeof(string));
    
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertVictims", victimtypeParameter, studentidParameter, gradelevelParameter, staffidParameter, othervictimfullnameParameter, ageParameter, victimdescriptionParameter, disciplineincidentidParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspInsertWithdrawalRecordForCalendarEnd(Nullable<int> studentID, Nullable<int> schoolYearID, Nullable<System.DateTime> withdrawalDate, Nullable<int> withdrawalCode, Nullable<int> graduationYEAR, Nullable<System.DateTime> diplomaDate, Nullable<int> diplomaType, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var withdrawalDateParameter = withdrawalDate.HasValue ?
                new ObjectParameter("WithdrawalDate", withdrawalDate) :
                new ObjectParameter("WithdrawalDate", typeof(System.DateTime));
    
            var withdrawalCodeParameter = withdrawalCode.HasValue ?
                new ObjectParameter("WithdrawalCode", withdrawalCode) :
                new ObjectParameter("WithdrawalCode", typeof(int));
    
            var graduationYEARParameter = graduationYEAR.HasValue ?
                new ObjectParameter("GraduationYEAR", graduationYEAR) :
                new ObjectParameter("GraduationYEAR", typeof(int));
    
            var diplomaDateParameter = diplomaDate.HasValue ?
                new ObjectParameter("DiplomaDate", diplomaDate) :
                new ObjectParameter("DiplomaDate", typeof(System.DateTime));
    
            var diplomaTypeParameter = diplomaType.HasValue ?
                new ObjectParameter("DiplomaType", diplomaType) :
                new ObjectParameter("DiplomaType", typeof(int));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspInsertWithdrawalRecordForCalendarEnd", studentIDParameter, schoolYearIDParameter, withdrawalDateParameter, withdrawalCodeParameter, graduationYEARParameter, diplomaDateParameter, diplomaTypeParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual int usploop(Nullable<int> districtCourseSequenceId, Nullable<int> buildingId)
        {
            var districtCourseSequenceIdParameter = districtCourseSequenceId.HasValue ?
                new ObjectParameter("DistrictCourseSequenceId", districtCourseSequenceId) :
                new ObjectParameter("DistrictCourseSequenceId", typeof(int));
    
            var buildingIdParameter = buildingId.HasValue ?
                new ObjectParameter("BuildingId", buildingId) :
                new ObjectParameter("BuildingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usploop", districtCourseSequenceIdParameter, buildingIdParameter);
        }
    
        public virtual ObjectResult<uspPickListCategoriesGetById_Result> uspPickListCategoriesGetById(Nullable<int> pickListCodeId)
        {
            var pickListCodeIdParameter = pickListCodeId.HasValue ?
                new ObjectParameter("PickListCodeId", pickListCodeId) :
                new ObjectParameter("PickListCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPickListCategoriesGetById_Result>("uspPickListCategoriesGetById", pickListCodeIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspPickListCodesDeleteByPickListCodeID(Nullable<int> pickListCodeID)
        {
            var pickListCodeIDParameter = pickListCodeID.HasValue ?
                new ObjectParameter("PickListCodeID", pickListCodeID) :
                new ObjectParameter("PickListCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspPickListCodesDeleteByPickListCodeID", pickListCodeIDParameter);
        }
    
        public virtual ObjectResult<uspPriorStudentSearch_Result> uspPriorStudentSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<bool> isAdds, Nullable<bool> isPhone, Nullable<bool> isSSID, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var isAddsParameter = isAdds.HasValue ?
                new ObjectParameter("IsAdds", isAdds) :
                new ObjectParameter("IsAdds", typeof(bool));
    
            var isPhoneParameter = isPhone.HasValue ?
                new ObjectParameter("IsPhone", isPhone) :
                new ObjectParameter("IsPhone", typeof(bool));
    
            var isSSIDParameter = isSSID.HasValue ?
                new ObjectParameter("IsSSID", isSSID) :
                new ObjectParameter("IsSSID", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPriorStudentSearch_Result>("uspPriorStudentSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, isAddsParameter, isPhoneParameter, isSSIDParameter, personIDParameter);
        }
    
        public virtual int uspProfessionalDevGet(string staffId, string districtID)
        {
            var staffIdParameter = staffId != null ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(string));
    
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProfessionalDevGet", staffIdParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspProgramCodesDelete(Nullable<int> calendarID, Nullable<int> schoolID, Nullable<int> studentID, Nullable<int> modifiedby)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProgramCodesDelete", calendarIDParameter, schoolIDParameter, studentIDParameter, modifiedbyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspProgramCodesDeleteByStudent(Nullable<int> calendarID, Nullable<int> schoolID, Nullable<int> studentID, Nullable<int> modifiedby, Nullable<int> progCode)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var progCodeParameter = progCode.HasValue ?
                new ObjectParameter("ProgCode", progCode) :
                new ObjectParameter("ProgCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProgramCodesDeleteByStudent", calendarIDParameter, schoolIDParameter, studentIDParameter, modifiedbyParameter, progCodeParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesGet_Result> uspProgramCodesGet(Nullable<int> option)
        {
            var optionParameter = option.HasValue ?
                new ObjectParameter("option", option) :
                new ObjectParameter("option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesGet_Result>("uspProgramCodesGet", optionParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesGetBySchoolYearIDSchoolIDStudentID_Result> uspProgramCodesGetBySchoolYearIDSchoolIDStudentID(Nullable<int> calendarID, Nullable<int> schoolID, Nullable<int> studentID)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesGetBySchoolYearIDSchoolIDStudentID_Result>("uspProgramCodesGetBySchoolYearIDSchoolIDStudentID", calendarIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesGetBySchoolYearIDSchoolIDStudentIDForStudent_Result> uspProgramCodesGetBySchoolYearIDSchoolIDStudentIDForStudent(Nullable<int> calendarID, Nullable<int> schoolID, Nullable<int> studentID)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesGetBySchoolYearIDSchoolIDStudentIDForStudent_Result>("uspProgramCodesGetBySchoolYearIDSchoolIDStudentIDForStudent", calendarIDParameter, schoolIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesGetBySchoolYearIDStudentID_Result> uspProgramCodesGetBySchoolYearIDStudentID(Nullable<int> calendarID, Nullable<int> studentID)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesGetBySchoolYearIDStudentID_Result>("uspProgramCodesGetBySchoolYearIDStudentID", calendarIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesHistoryGet_Result> uspProgramCodesHistoryGet(Nullable<int> calendarID)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesHistoryGet_Result>("uspProgramCodesHistoryGet", calendarIDParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesHistoryGetBySchoolID_Result> uspProgramCodesHistoryGetBySchoolID(Nullable<int> calendarID, Nullable<int> districtID, Nullable<int> schoolID)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesHistoryGetBySchoolID_Result>("uspProgramCodesHistoryGetBySchoolID", calendarIDParameter, districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspProgramCodesHistoryGetByStudentID_Result> uspProgramCodesHistoryGetByStudentID(Nullable<int> studentID, Nullable<int> calendarID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProgramCodesHistoryGetByStudentID_Result>("uspProgramCodesHistoryGetByStudentID", studentIDParameter, calendarIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspProgramCodesInsert(Nullable<int> calendarID, Nullable<int> schoolId, Nullable<int> studentID, string arrayProgramCodes, Nullable<int> createdBy)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var arrayProgramCodesParameter = arrayProgramCodes != null ?
                new ObjectParameter("ArrayProgramCodes", arrayProgramCodes) :
                new ObjectParameter("ArrayProgramCodes", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProgramCodesInsert", calendarIDParameter, schoolIdParameter, studentIDParameter, arrayProgramCodesParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspProgramCodesInsert_Test(Nullable<int> calendarID, Nullable<int> schoolId, Nullable<int> studentID, string arrayProgramCodes)
        {
            var calendarIDParameter = calendarID.HasValue ?
                new ObjectParameter("CalendarID", calendarID) :
                new ObjectParameter("CalendarID", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var arrayProgramCodesParameter = arrayProgramCodes != null ?
                new ObjectParameter("ArrayProgramCodes", arrayProgramCodes) :
                new ObjectParameter("ArrayProgramCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProgramCodesInsert_Test", calendarIDParameter, schoolIdParameter, studentIDParameter, arrayProgramCodesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspProgramCodesUpdate(Nullable<int> programCodeID, Nullable<int> studentID, string programCode, Nullable<int> employeeID, string programProviderIRN, Nullable<System.DateTime> enrollmentStartDate, Nullable<System.DateTime> enrollmentEndDate, string buildingIRN)
        {
            var programCodeIDParameter = programCodeID.HasValue ?
                new ObjectParameter("ProgramCodeID", programCodeID) :
                new ObjectParameter("ProgramCodeID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var programCodeParameter = programCode != null ?
                new ObjectParameter("ProgramCode", programCode) :
                new ObjectParameter("ProgramCode", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var programProviderIRNParameter = programProviderIRN != null ?
                new ObjectParameter("ProgramProviderIRN", programProviderIRN) :
                new ObjectParameter("ProgramProviderIRN", typeof(string));
    
            var enrollmentStartDateParameter = enrollmentStartDate.HasValue ?
                new ObjectParameter("EnrollmentStartDate", enrollmentStartDate) :
                new ObjectParameter("EnrollmentStartDate", typeof(System.DateTime));
    
            var enrollmentEndDateParameter = enrollmentEndDate.HasValue ?
                new ObjectParameter("EnrollmentEndDate", enrollmentEndDate) :
                new ObjectParameter("EnrollmentEndDate", typeof(System.DateTime));
    
            var buildingIRNParameter = buildingIRN != null ?
                new ObjectParameter("BuildingIRN", buildingIRN) :
                new ObjectParameter("BuildingIRN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProgramCodesUpdate", programCodeIDParameter, studentIDParameter, programCodeParameter, employeeIDParameter, programProviderIRNParameter, enrollmentStartDateParameter, enrollmentEndDateParameter, buildingIRNParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRandD(Nullable<int> studentID, Nullable<System.DateTime> checkDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var checkDateParameter = checkDate.HasValue ?
                new ObjectParameter("CheckDate", checkDate) :
                new ObjectParameter("CheckDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRandD", studentIDParameter, checkDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRemoveStudentAddress(Nullable<int> addressID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRemoveStudentAddress", addressIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRemoveStudentContactAddress(Nullable<int> addressID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRemoveStudentContactAddress", addressIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRemoveStudentContactPhone(Nullable<int> studentContactID, Nullable<int> phoneTypePL, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            var phoneTypePLParameter = phoneTypePL.HasValue ?
                new ObjectParameter("PhoneTypePL", phoneTypePL) :
                new ObjectParameter("PhoneTypePL", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRemoveStudentContactPhone", studentContactIDParameter, phoneTypePLParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRemoveStudentPhone(Nullable<int> personPhoneID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var personPhoneIDParameter = personPhoneID.HasValue ?
                new ObjectParameter("PersonPhoneID", personPhoneID) :
                new ObjectParameter("PersonPhoneID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRemoveStudentPhone", personPhoneIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspResetPasswordUpdate(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspResetPasswordUpdate", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspResetStaffPassword(Nullable<int> staffID, string password, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspResetStaffPassword", staffIDParameter, passwordParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveDistrictAttendancePatternExceptions(string patternIds, string valuesArray, Nullable<System.DateTime> addedExceptionDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdsParameter = patternIds != null ?
                new ObjectParameter("PatternIds", patternIds) :
                new ObjectParameter("PatternIds", typeof(string));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var addedExceptionDateParameter = addedExceptionDate.HasValue ?
                new ObjectParameter("AddedExceptionDate", addedExceptionDate) :
                new ObjectParameter("AddedExceptionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveDistrictAttendancePatternExceptions", patternIdsParameter, valuesArrayParameter, addedExceptionDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSaveSchoolAttendancePatternExceptions(string patternIds, string valuesArray, Nullable<System.DateTime> addedExceptionDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdsParameter = patternIds != null ?
                new ObjectParameter("PatternIds", patternIds) :
                new ObjectParameter("PatternIds", typeof(string));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var addedExceptionDateParameter = addedExceptionDate.HasValue ?
                new ObjectParameter("AddedExceptionDate", addedExceptionDate) :
                new ObjectParameter("AddedExceptionDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSaveSchoolAttendancePatternExceptions", patternIdsParameter, valuesArrayParameter, addedExceptionDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<uspSchoolCalendarYearsGet_Result> uspSchoolCalendarYearsGet(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSchoolCalendarYearsGet_Result>("uspSchoolCalendarYearsGet", schoolIDParameter);
        }
    
        public virtual int uspSchoolContactInfoGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolContactInfoGet");
        }
    
        public virtual int uspSchoolGradePeriodsGet(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolGradePeriodsGet", schoolIDParameter);
        }
    
        public virtual int uspSchoolInfoDeleteByID(Nullable<int> districtID, Nullable<int> schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("schoolID", schoolID) :
                new ObjectParameter("schoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolInfoDeleteByID", districtIDParameter, schoolIDParameter);
        }
    
        public virtual int uspSchoolInfoGet(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolInfoGet", schoolIDParameter);
        }
    
        public virtual int uspSchoolInfoGetByID(Nullable<int> districtID, Nullable<int> schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("schoolID", schoolID) :
                new ObjectParameter("schoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolInfoGetByID", districtIDParameter, schoolIDParameter);
        }
    
        public virtual int uspSchoolSchoolAttendancePatternEvent(Nullable<int> schoolAttendancePatternEventID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolAttendancePatternEventIDParameter = schoolAttendancePatternEventID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternEventID", schoolAttendancePatternEventID) :
                new ObjectParameter("SchoolAttendancePatternEventID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolSchoolAttendancePatternEvent", schoolAttendancePatternEventIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<uspSchoolSearch_Result> uspSchoolSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSchoolSearch_Result>("uspSchoolSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, personIDParameter);
        }
    
        public virtual int uspSchoolsGetByTeacherId(Nullable<int> teacherID)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolsGetByTeacherId", teacherIDParameter);
        }
    
        public virtual int uspSchoolStaffGet(Nullable<int> districtID, Nullable<int> schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSchoolStaffGet", districtIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSchoolTeachersGetBySchoolId_Result> uspSchoolTeachersGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSchoolTeachersGetBySchoolId_Result>("uspSchoolTeachersGetBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSearch_Result> uspSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<bool> isAdds, Nullable<bool> isPhone, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var isAddsParameter = isAdds.HasValue ?
                new ObjectParameter("IsAdds", isAdds) :
                new ObjectParameter("IsAdds", typeof(bool));
    
            var isPhoneParameter = isPhone.HasValue ?
                new ObjectParameter("IsPhone", isPhone) :
                new ObjectParameter("IsPhone", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSearch_Result>("uspSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, isAddsParameter, isPhoneParameter, personIDParameter);
        }
    
        public virtual ObjectResult<uspSearchAllTables_Result> uspSearchAllTables(string searchStr)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSearchAllTables_Result>("uspSearchAllTables", searchStrParameter);
        }
    
        public virtual ObjectResult<uspSearchByTables_Result> uspSearchByTables(string searchStr, string tableName)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSearchByTables_Result>("uspSearchByTables", searchStrParameter, tableNameParameter);
        }
    
        public virtual ObjectResult<uspSelectAbsenceEventPL_Result> uspSelectAbsenceEventPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceEventPL_Result>("uspSelectAbsenceEventPL");
        }
    
        public virtual ObjectResult<uspSelectAbsenceHoursPL_Result> uspSelectAbsenceHoursPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceHoursPL_Result>("uspSelectAbsenceHoursPL");
        }
    
        public virtual ObjectResult<uspSelectAbsenceNoticeByStudentIdAndDate_Result> uspSelectAbsenceNoticeByStudentIdAndDate(Nullable<System.DateTime> absenceDate, Nullable<int> studentId)
        {
            var absenceDateParameter = absenceDate.HasValue ?
                new ObjectParameter("AbsenceDate", absenceDate) :
                new ObjectParameter("AbsenceDate", typeof(System.DateTime));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceNoticeByStudentIdAndDate_Result>("uspSelectAbsenceNoticeByStudentIdAndDate", absenceDateParameter, studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAbsenceNoticeDetailsByDateAndStudentId_Result> uspSelectAbsenceNoticeDetailsByDateAndStudentId(Nullable<int> studentId, Nullable<System.DateTime> absenceDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var absenceDateParameter = absenceDate.HasValue ?
                new ObjectParameter("AbsenceDate", absenceDate) :
                new ObjectParameter("AbsenceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceNoticeDetailsByDateAndStudentId_Result>("uspSelectAbsenceNoticeDetailsByDateAndStudentId", studentIdParameter, absenceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectAbsenceNoticesById_Result> uspSelectAbsenceNoticesById(Nullable<int> absenceNoticeID)
        {
            var absenceNoticeIDParameter = absenceNoticeID.HasValue ?
                new ObjectParameter("AbsenceNoticeID", absenceNoticeID) :
                new ObjectParameter("AbsenceNoticeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceNoticesById_Result>("uspSelectAbsenceNoticesById", absenceNoticeIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAbsenceNoticesBySchoolId_Result> uspSelectAbsenceNoticesBySchoolId(Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceNoticesBySchoolId_Result>("uspSelectAbsenceNoticesBySchoolId", schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAbsenceTypesPL_Result> uspSelectAbsenceTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAbsenceTypesPL_Result>("uspSelectAbsenceTypesPL");
        }
    
        public virtual ObjectResult<uspSelectAccommodationsByAssessment_Result> uspSelectAccommodationsByAssessment(Nullable<int> assessmentPL)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAccommodationsByAssessment_Result>("uspSelectAccommodationsByAssessment", assessmentPLParameter);
        }
    
        public virtual int uspSelectAccommodationTestsInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAccommodationTestsInfo");
        }
    
        public virtual ObjectResult<uspSelectActionTypesPL_Result> uspSelectActionTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActionTypesPL_Result>("uspSelectActionTypesPL");
        }
    
        public virtual ObjectResult<uspSelectActiveDistrictCoursesForNextYear_Result> uspSelectActiveDistrictCoursesForNextYear(Nullable<int> districtID, Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveDistrictCoursesForNextYear_Result>("uspSelectActiveDistrictCoursesForNextYear", districtIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveDistrictCourseTerms_Result> uspSelectActiveDistrictCourseTerms(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveDistrictCourseTerms_Result>("uspSelectActiveDistrictCourseTerms", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveSchoolCourseSectionsForNextYear_Result> uspSelectActiveSchoolCourseSectionsForNextYear(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveSchoolCourseSectionsForNextYear_Result>("uspSelectActiveSchoolCourseSectionsForNextYear", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveStudentsByCourseForStudentTimeNonCourse_Result> uspSelectActiveStudentsByCourseForStudentTimeNonCourse(Nullable<int> schoolCourseId, string courseNumber, Nullable<int> staffID, Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<System.DateTime> date)
        {
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveStudentsByCourseForStudentTimeNonCourse_Result>("uspSelectActiveStudentsByCourseForStudentTimeNonCourse", schoolCourseIdParameter, courseNumberParameter, staffIDParameter, schoolIDParameter, schoolYearPLParameter, dateParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveStudentsBySchoolCourseSectionID_Result> uspSelectActiveStudentsBySchoolCourseSectionID(Nullable<int> schoolCourseSectionID, Nullable<int> schoolID, Nullable<int> assignmentID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveStudentsBySchoolCourseSectionID_Result>("uspSelectActiveStudentsBySchoolCourseSectionID", schoolCourseSectionIDParameter, schoolIDParameter, assignmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveStudentsWithoutCounselor_Result> uspSelectActiveStudentsWithoutCounselor(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveStudentsWithoutCounselor_Result>("uspSelectActiveStudentsWithoutCounselor", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectActiveStudentsWithoutHomeroom_Result> uspSelectActiveStudentsWithoutHomeroom(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActiveStudentsWithoutHomeroom_Result>("uspSelectActiveStudentsWithoutHomeroom", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectActivityFromPL_Result> uspSelectActivityFromPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectActivityFromPL_Result>("uspSelectActivityFromPL");
        }
    
        public virtual ObjectResult<uspSelectAddressDetailsByAddressID_Result> uspSelectAddressDetailsByAddressID(Nullable<int> addressid)
        {
            var addressidParameter = addressid.HasValue ?
                new ObjectParameter("addressid", addressid) :
                new ObjectParameter("addressid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAddressDetailsByAddressID_Result>("uspSelectAddressDetailsByAddressID", addressidParameter);
        }
    
        public virtual ObjectResult<uspSelectAddressTypesPL_Result> uspSelectAddressTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAddressTypesPL_Result>("uspSelectAddressTypesPL");
        }
    
        public virtual ObjectResult<uspSelectAdvisorReport_Result> uspSelectAdvisorReport(string advisor, string status, Nullable<int> schoolID)
        {
            var advisorParameter = advisor != null ?
                new ObjectParameter("Advisor", advisor) :
                new ObjectParameter("Advisor", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAdvisorReport_Result>("uspSelectAdvisorReport", advisorParameter, statusParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAlertLookupItems_Result> uspSelectAlertLookupItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAlertLookupItems_Result>("uspSelectAlertLookupItems");
        }
    
        public virtual ObjectResult<uspSelectAlertsBySchoolId_Result> uspSelectAlertsBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAlertsBySchoolId_Result>("uspSelectAlertsBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAlertsbyStudentID_Result> uspSelectAlertsbyStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAlertsbyStudentID_Result>("uspSelectAlertsbyStudentID", studentIDParameter);
        }
    
        public virtual int uspSelectAllAttendancePatterns()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAllAttendancePatterns");
        }
    
        public virtual ObjectResult<uspSelectAllBulletin_Result> uspSelectAllBulletin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllBulletin_Result>("uspSelectAllBulletin");
        }
    
        public virtual ObjectResult<uspSelectAllBulletinByIDs_Result> uspSelectAllBulletinByIDs(Nullable<int> type, Nullable<int> districtId, Nullable<int> schoolId, Nullable<int> userID)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllBulletinByIDs_Result>("uspSelectAllBulletinByIDs", typeParameter, districtIdParameter, schoolIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllBulletinsByDistrict_Result> uspSelectAllBulletinsByDistrict(Nullable<int> distID)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllBulletinsByDistrict_Result>("uspSelectAllBulletinsByDistrict", distIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllBulletinsByDistrictandSchool_Result> uspSelectAllBulletinsByDistrictandSchool(Nullable<int> distID, Nullable<int> schoolID)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllBulletinsByDistrictandSchool_Result>("uspSelectAllBulletinsByDistrictandSchool", distIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllIncidentsByStudent_Result> uspSelectAllIncidentsByStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllIncidentsByStudent_Result>("uspSelectAllIncidentsByStudent", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllMessagesByIDs_Result> uspSelectAllMessagesByIDs(Nullable<int> type, Nullable<int> districtId, Nullable<int> schoolId, Nullable<int> userID)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllMessagesByIDs_Result>("uspSelectAllMessagesByIDs", typeParameter, districtIdParameter, schoolIdParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllPagesPrivilages_Result> uspSelectAllPagesPrivilages(Nullable<int> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllPagesPrivilages_Result>("uspSelectAllPagesPrivilages", orgIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAllReportPeriodDetails_Result> uspSelectAllReportPeriodDetails(Nullable<int> schoolYearPL)
        {
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllReportPeriodDetails_Result>("uspSelectAllReportPeriodDetails", schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAllReportPeriodDetailsDistrict_Result> uspSelectAllReportPeriodDetailsDistrict(Nullable<int> districtid, Nullable<int> schoolYearPL)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllReportPeriodDetailsDistrict_Result>("uspSelectAllReportPeriodDetailsDistrict", districtidParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAllSchoolEvents_Result> uspSelectAllSchoolEvents(Nullable<int> calendarid, Nullable<int> schoolId)
        {
            var calendaridParameter = calendarid.HasValue ?
                new ObjectParameter("calendarid", calendarid) :
                new ObjectParameter("calendarid", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllSchoolEvents_Result>("uspSelectAllSchoolEvents", calendaridParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAllSchools_Result> uspSelectAllSchools()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllSchools_Result>("uspSelectAllSchools");
        }
    
        public virtual ObjectResult<uspSelectAllStaff_Result> uspSelectAllStaff(Nullable<int> districtID, string pullFromStatus)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var pullFromStatusParameter = pullFromStatus != null ?
                new ObjectParameter("PullFromStatus", pullFromStatus) :
                new ObjectParameter("PullFromStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllStaff_Result>("uspSelectAllStaff", districtIDParameter, pullFromStatusParameter);
        }
    
        public virtual ObjectResult<uspSelectAllStudentsBySchoolIdForStudentNotes_Result> uspSelectAllStudentsBySchoolIdForStudentNotes(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAllStudentsBySchoolIdForStudentNotes_Result>("uspSelectAllStudentsBySchoolIdForStudentNotes", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAltEdModifiedTypesPL_Result> uspSelectAltEdModifiedTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAltEdModifiedTypesPL_Result>("uspSelectAltEdModifiedTypesPL");
        }
    
        public virtual ObjectResult<uspSelectAPEffectiveDate_Result> uspSelectAPEffectiveDate(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAPEffectiveDate_Result>("uspSelectAPEffectiveDate", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectApplicationInfo_Result> uspSelectApplicationInfo(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectApplicationInfo_Result>("uspSelectApplicationInfo", applicationidParameter);
        }
    
        public virtual int uspSelectApplicationInfo_TMP(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectApplicationInfo_TMP", studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAccommodationsByAssessmentArea_Result> uspSelectAssessmentAccommodationsByAssessmentArea(Nullable<int> assessmentAreaId)
        {
            var assessmentAreaIdParameter = assessmentAreaId.HasValue ?
                new ObjectParameter("AssessmentAreaId", assessmentAreaId) :
                new ObjectParameter("AssessmentAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAccommodationsByAssessmentArea_Result>("uspSelectAssessmentAccommodationsByAssessmentArea", assessmentAreaIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAccommodationsByAssessmentAreaDistrict_Result> uspSelectAssessmentAccommodationsByAssessmentAreaDistrict(Nullable<int> assessmentAreaId, Nullable<int> districtID)
        {
            var assessmentAreaIdParameter = assessmentAreaId.HasValue ?
                new ObjectParameter("AssessmentAreaId", assessmentAreaId) :
                new ObjectParameter("AssessmentAreaId", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAccommodationsByAssessmentAreaDistrict_Result>("uspSelectAssessmentAccommodationsByAssessmentAreaDistrict", assessmentAreaIdParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAccommodationsDistrict_Result> uspSelectAssessmentAccommodationsDistrict(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAccommodationsDistrict_Result>("uspSelectAssessmentAccommodationsDistrict", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAccommodationsPL_Result> uspSelectAssessmentAccommodationsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAccommodationsPL_Result>("uspSelectAssessmentAccommodationsPL");
        }
    
        public virtual int uspSelectAssessmentAreaAndAccommodationsByAssessmentPL(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAssessmentAreaAndAccommodationsByAssessmentPL", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual int uspSelectAssessmentAreaAndAccommodationsByStudent(Nullable<int> studentID, Nullable<int> districtID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAssessmentAreaAndAccommodationsByStudent", studentIDParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasByAssessment_Result> uspSelectAssessmentAreasByAssessment(Nullable<int> assessmentPL)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasByAssessment_Result>("uspSelectAssessmentAreasByAssessment", assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasByAssessmentDistrict_Result> uspSelectAssessmentAreasByAssessmentDistrict(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasByAssessmentDistrict_Result>("uspSelectAssessmentAreasByAssessmentDistrict", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasForStudentAssessment_Result> uspSelectAssessmentAreasForStudentAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasForStudentAssessment_Result>("uspSelectAssessmentAreasForStudentAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasFromAssessmentArea_Result> uspSelectAssessmentAreasFromAssessmentArea(Nullable<int> assessmentPL)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasFromAssessmentArea_Result>("uspSelectAssessmentAreasFromAssessmentArea", assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasFromAssessmentAreaDistrict_Result> uspSelectAssessmentAreasFromAssessmentAreaDistrict(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasFromAssessmentAreaDistrict_Result>("uspSelectAssessmentAreasFromAssessmentAreaDistrict", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreasPL_Result> uspSelectAssessmentAreasPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreasPL_Result>("uspSelectAssessmentAreasPL");
        }
    
        public virtual ObjectResult<uspSelectAssessmentAreaSubjectsByAssessmentType_Result> uspSelectAssessmentAreaSubjectsByAssessmentType(Nullable<int> gradReqID, Nullable<int> assessmentType)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var assessmentTypeParameter = assessmentType.HasValue ?
                new ObjectParameter("AssessmentType", assessmentType) :
                new ObjectParameter("AssessmentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAreaSubjectsByAssessmentType_Result>("uspSelectAssessmentAreaSubjectsByAssessmentType", gradReqIDParameter, assessmentTypeParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentAssessmentAreaByAssessment_Result> uspSelectAssessmentAssessmentAreaByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentAssessmentAreaByAssessment_Result>("uspSelectAssessmentAssessmentAreaByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentDiagnosticByAssessment_Result> uspSelectAssessmentDiagnosticByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentDiagnosticByAssessment_Result>("uspSelectAssessmentDiagnosticByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentGradPerformanceByAssessment_Result> uspSelectAssessmentGradPerformanceByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentGradPerformanceByAssessment_Result>("uspSelectAssessmentGradPerformanceByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentScoreNotReportedByAssessment_Result> uspSelectAssessmentScoreNotReportedByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentScoreNotReportedByAssessment_Result>("uspSelectAssessmentScoreNotReportedByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentSetupByAssessment_Result> uspSelectAssessmentSetupByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentSetupByAssessment_Result>("uspSelectAssessmentSetupByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentsFromAssessmentAreas_Result> uspSelectAssessmentsFromAssessmentAreas()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentsFromAssessmentAreas_Result>("uspSelectAssessmentsFromAssessmentAreas");
        }
    
        public virtual ObjectResult<uspSelectAssessmentsFromAssessmentAreasDistrict_Result> uspSelectAssessmentsFromAssessmentAreasDistrict(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentsFromAssessmentAreasDistrict_Result>("uspSelectAssessmentsFromAssessmentAreasDistrict", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentsPL_Result> uspSelectAssessmentsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentsPL_Result>("uspSelectAssessmentsPL");
        }
    
        public virtual ObjectResult<uspSelectAssessmentTestAccommodationTypesByAssessment_Result> uspSelectAssessmentTestAccommodationTypesByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentTestAccommodationTypesByAssessment_Result>("uspSelectAssessmentTestAccommodationTypesByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentTestGradeLevelsByAssessment_Result> uspSelectAssessmentTestGradeLevelsByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentTestGradeLevelsByAssessment_Result>("uspSelectAssessmentTestGradeLevelsByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentTestTypesByAssessment_Result> uspSelectAssessmentTestTypesByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentTestTypesByAssessment_Result>("uspSelectAssessmentTestTypesByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentValidScoresByAssessment_Result> uspSelectAssessmentValidScoresByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentValidScoresByAssessment_Result>("uspSelectAssessmentValidScoresByAssessment", assessmentPLParameter, districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssessmentValidScoresPL_Result> uspSelectAssessmentValidScoresPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssessmentValidScoresPL_Result>("uspSelectAssessmentValidScoresPL");
        }
    
        public virtual ObjectResult<uspSelectAssignmenstStudentsGrade_Result> uspSelectAssignmenstStudentsGrade(Nullable<int> schoolCourseSectionID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmenstStudentsGrade_Result>("uspSelectAssignmenstStudentsGrade", schoolCourseSectionIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssignmentAverageByCategoryForGraphs_Result> uspSelectAssignmentAverageByCategoryForGraphs(Nullable<int> categoryPL)
        {
            var categoryPLParameter = categoryPL.HasValue ?
                new ObjectParameter("CategoryPL", categoryPL) :
                new ObjectParameter("CategoryPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmentAverageByCategoryForGraphs_Result>("uspSelectAssignmentAverageByCategoryForGraphs", categoryPLParameter);
        }
    
        public virtual ObjectResult<uspSelectAssignmentAverageByStudentForGraphs_Result> uspSelectAssignmentAverageByStudentForGraphs(Nullable<int> studentID, Nullable<int> schoolTermID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolTermIDParameter = schoolTermID.HasValue ?
                new ObjectParameter("SchoolTermID", schoolTermID) :
                new ObjectParameter("SchoolTermID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmentAverageByStudentForGraphs_Result>("uspSelectAssignmentAverageByStudentForGraphs", studentIDParameter, schoolTermIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssignmentByID_Result> uspSelectAssignmentByID(Nullable<int> assignmentID)
        {
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmentByID_Result>("uspSelectAssignmentByID", assignmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectAssignmentCategoriesPL_Result> uspSelectAssignmentCategoriesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmentCategoriesPL_Result>("uspSelectAssignmentCategoriesPL");
        }
    
        public virtual ObjectResult<uspSelectAssignmentsBySchoolCourseSectionID_Result> uspSelectAssignmentsBySchoolCourseSectionID(Nullable<int> schoolCourseSectionID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAssignmentsBySchoolCourseSectionID_Result>("uspSelectAssignmentsBySchoolCourseSectionID", schoolCourseSectionIDParameter);
        }
    
        public virtual int uspSelectAssignmentTopicsByClassAssignment(Nullable<int> classAssignmentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAssignmentTopicsByClassAssignment", classAssignmentIdParameter);
        }
    
        public virtual int uspSelectAssignmentTopicStandardsGroupedForNewAssignment(Nullable<int> classAssignmentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAssignmentTopicStandardsGroupedForNewAssignment", classAssignmentIdParameter);
        }
    
        public virtual int uspSelectAssociateIncidentsByDisciplineIncidentID(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAssociateIncidentsByDisciplineIncidentID", disciplineincidentidParameter);
        }
    
        public virtual ObjectResult<uspSelectAttendanceCalculationTypesPL_Result> uspSelectAttendanceCalculationTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceCalculationTypesPL_Result>("uspSelectAttendanceCalculationTypesPL");
        }
    
        public virtual ObjectResult<uspSelectAttendanceCodesFromAttendanceSettings_Result> uspSelectAttendanceCodesFromAttendanceSettings(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceCodesFromAttendanceSettings_Result>("uspSelectAttendanceCodesFromAttendanceSettings", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAttendanceCodeValuesPL_Result> uspSelectAttendanceCodeValuesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceCodeValuesPL_Result>("uspSelectAttendanceCodeValuesPL");
        }
    
        public virtual int uspSelectAttendancePatternByPatternId(Nullable<int> patternId)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("patternId", patternId) :
                new ObjectParameter("patternId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAttendancePatternByPatternId", patternIdParameter);
        }
    
        public virtual int uspSelectAttendancePatternInfo(Nullable<int> patternId)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("PatternId", patternId) :
                new ObjectParameter("PatternId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAttendancePatternInfo", patternIdParameter);
        }
    
        public virtual int uspSelectAttendancePatterns()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAttendancePatterns");
        }
    
        public virtual int uspSelectAttendancePatternsBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAttendancePatternsBySchoolId", schoolIdParameter);
        }
    
        public virtual int uspSelectAttendancePatternsForExceptions(Nullable<System.DateTime> attendanceDate)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectAttendancePatternsForExceptions", attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectAttendanceSettingsBySchoolId_Result> uspSelectAttendanceSettingsBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceSettingsBySchoolId_Result>("uspSelectAttendanceSettingsBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectAttendanceTypeValuesPL_Result> uspSelectAttendanceTypeValuesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceTypeValuesPL_Result>("uspSelectAttendanceTypeValuesPL");
        }
    
        public virtual ObjectResult<uspSelectAttendanceValuesPL_Result> uspSelectAttendanceValuesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectAttendanceValuesPL_Result>("uspSelectAttendanceValuesPL");
        }
    
        public virtual ObjectResult<uspSelectBellScheduleDetails_Result> uspSelectBellScheduleDetails(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectBellScheduleDetails_Result>("uspSelectBellScheduleDetails", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectBellSchedulePeriodDetails_Result> uspSelectBellSchedulePeriodDetails(Nullable<int> schoolid, Nullable<int> schoolyearid, Nullable<int> bellscheduleid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            var bellscheduleidParameter = bellscheduleid.HasValue ?
                new ObjectParameter("bellscheduleid", bellscheduleid) :
                new ObjectParameter("bellscheduleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectBellSchedulePeriodDetails_Result>("uspSelectBellSchedulePeriodDetails", schoolidParameter, schoolyearidParameter, bellscheduleidParameter);
        }
    
        public virtual ObjectResult<uspSelectBuildingCourseSections_Result> uspSelectBuildingCourseSections(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectBuildingCourseSections_Result>("uspSelectBuildingCourseSections", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual int uspSelectBuildingCourseSectionStaffHistory(string buildingCourseNumber, string buildingCourseSectionNumber)
        {
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var buildingCourseSectionNumberParameter = buildingCourseSectionNumber != null ?
                new ObjectParameter("BuildingCourseSectionNumber", buildingCourseSectionNumber) :
                new ObjectParameter("BuildingCourseSectionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectBuildingCourseSectionStaffHistory", buildingCourseNumberParameter, buildingCourseSectionNumberParameter);
        }
    
        public virtual int uspSelectBuildingCourseSectionStaffList(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectBuildingCourseSectionStaffList", sectionIdParameter);
        }
    
        public virtual int uspSelectBuildingDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectBuildingDetails");
        }
    
        public virtual int uspSelectBuildingDetailsByID(Nullable<int> buildingid)
        {
            var buildingidParameter = buildingid.HasValue ?
                new ObjectParameter("buildingid", buildingid) :
                new ObjectParameter("buildingid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectBuildingDetailsByID", buildingidParameter);
        }
    
        public virtual ObjectResult<uspSelectBulletinTypesByType_Result> uspSelectBulletinTypesByType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectBulletinTypesByType_Result>("uspSelectBulletinTypesByType", typeParameter);
        }
    
        public virtual ObjectResult<uspSelectCalendarEventsPL_Result> uspSelectCalendarEventsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCalendarEventsPL_Result>("uspSelectCalendarEventsPL");
        }
    
        public virtual ObjectResult<uspSelectCalendarEventTypesPL_Result> uspSelectCalendarEventTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCalendarEventTypesPL_Result>("uspSelectCalendarEventTypesPL");
        }
    
        public virtual ObjectResult<uspSelectCategoriesFromPickListPL_Result> uspSelectCategoriesFromPickListPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCategoriesFromPickListPL_Result>("uspSelectCategoriesFromPickListPL");
        }
    
        public virtual ObjectResult<uspSelectCategoriesPL_Result> uspSelectCategoriesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCategoriesPL_Result>("uspSelectCategoriesPL");
        }
    
        public virtual ObjectResult<uspSelectChildLivesWithPL_Result> uspSelectChildLivesWithPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectChildLivesWithPL_Result>("uspSelectChildLivesWithPL");
        }
    
        public virtual ObjectResult<uspSelectChildReasonsByParentAttendanceCodeId_Result> uspSelectChildReasonsByParentAttendanceCodeId(Nullable<int> attendanceCodeID)
        {
            var attendanceCodeIDParameter = attendanceCodeID.HasValue ?
                new ObjectParameter("AttendanceCodeID", attendanceCodeID) :
                new ObjectParameter("AttendanceCodeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectChildReasonsByParentAttendanceCodeId_Result>("uspSelectChildReasonsByParentAttendanceCodeId", attendanceCodeIDParameter);
        }
    
        public virtual int uspSelectCityStateCountry(string zipcode)
        {
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCityStateCountry", zipcodeParameter);
        }
    
        public virtual int uspSelectClassAssignmentAssignedStudents(Nullable<int> classAssignmentId, Nullable<int> classId, Nullable<int> gradePeriodId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectClassAssignmentAssignedStudents", classAssignmentIdParameter, classIdParameter, gradePeriodIdParameter);
        }
    
        public virtual int uspSelectClassStudentGradeBookView(Nullable<int> gradePeriodId, Nullable<int> classId, Nullable<int> teacherId)
        {
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectClassStudentGradeBookView", gradePeriodIdParameter, classIdParameter, teacherIdParameter);
        }
    
        public virtual ObjectResult<uspSelectClassStudentsAttendance_Result> uspSelectClassStudentsAttendance(string schoolCourseSectionIDs, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, Nullable<int> schoolYearID)
        {
            var schoolCourseSectionIDsParameter = schoolCourseSectionIDs != null ?
                new ObjectParameter("SchoolCourseSectionIDs", schoolCourseSectionIDs) :
                new ObjectParameter("SchoolCourseSectionIDs", typeof(string));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectClassStudentsAttendance_Result>("uspSelectClassStudentsAttendance", schoolCourseSectionIDsParameter, attendanceDateParameter, attendanceTakenByParameter, schoolYearIDParameter);
        }
    
        public virtual int uspSelectCollegeCareerTest(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectCollegeCareerTest", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCollegeCareerTestACT_Result> uspSelectCollegeCareerTestACT(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCollegeCareerTestACT_Result>("uspSelectCollegeCareerTestACT", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCollegeCareerTestSAT_Result> uspSelectCollegeCareerTestSAT(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCollegeCareerTestSAT_Result>("uspSelectCollegeCareerTestSAT", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCoreAreaCodesPL_Result> uspSelectCoreAreaCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCoreAreaCodesPL_Result>("uspSelectCoreAreaCodesPL");
        }
    
        public virtual ObjectResult<uspSelectCOREEconFinLitTypesPL_Result> uspSelectCOREEconFinLitTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCOREEconFinLitTypesPL_Result>("uspSelectCOREEconFinLitTypesPL");
        }
    
        public virtual ObjectResult<uspSelectCOREFineArtTypesPL_Result> uspSelectCOREFineArtTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCOREFineArtTypesPL_Result>("uspSelectCOREFineArtTypesPL");
        }
    
        public virtual ObjectResult<uspSelectCOREGradReqMetTypesPL_Result> uspSelectCOREGradReqMetTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCOREGradReqMetTypesPL_Result>("uspSelectCOREGradReqMetTypesPL");
        }
    
        public virtual ObjectResult<uspSelectCounselors_Result> uspSelectCounselors(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCounselors_Result>("uspSelectCounselors", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectCounselorsForHomeroom_Result> uspSelectCounselorsForHomeroom(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCounselorsForHomeroom_Result>("uspSelectCounselorsForHomeroom", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectCountiesPL_Result> uspSelectCountiesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCountiesPL_Result>("uspSelectCountiesPL");
        }
    
        public virtual ObjectResult<uspSelectCourseGradReqBySchoolCourseID_Result> uspSelectCourseGradReqBySchoolCourseID(Nullable<int> schoolCourseId)
        {
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCourseGradReqBySchoolCourseID_Result>("uspSelectCourseGradReqBySchoolCourseID", schoolCourseIdParameter);
        }
    
        public virtual ObjectResult<uspSelectCourseLevelsPL_Result> uspSelectCourseLevelsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCourseLevelsPL_Result>("uspSelectCourseLevelsPL");
        }
    
        public virtual ObjectResult<uspSelectCoursesBySchoolID_Result> uspSelectCoursesBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCoursesBySchoolID_Result>("uspSelectCoursesBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCoursesByStudentForTimeEntry_Result> uspSelectCoursesByStudentForTimeEntry(Nullable<int> studentId, Nullable<int> schoolYearPL, Nullable<int> personID, Nullable<System.DateTime> selectedDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCoursesByStudentForTimeEntry_Result>("uspSelectCoursesByStudentForTimeEntry", studentIdParameter, schoolYearPLParameter, personIDParameter, selectedDateParameter);
        }
    
        public virtual ObjectResult<uspSelectCoursesByTeacherID_Result> uspSelectCoursesByTeacherID(Nullable<int> schoolID, Nullable<int> personID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCoursesByTeacherID_Result>("uspSelectCoursesByTeacherID", schoolIDParameter, personIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectCreditFlexibilityCodesPL_Result> uspSelectCreditFlexibilityCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCreditFlexibilityCodesPL_Result>("uspSelectCreditFlexibilityCodesPL");
        }
    
        public virtual ObjectResult<uspSelectCTECollegeCreditsPL_Result> uspSelectCTECollegeCreditsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCTECollegeCreditsPL_Result>("uspSelectCTECollegeCreditsPL");
        }
    
        public virtual ObjectResult<uspSelectCTEProgramOptionsPL_Result> uspSelectCTEProgramOptionsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCTEProgramOptionsPL_Result>("uspSelectCTEProgramOptionsPL");
        }
    
        public virtual ObjectResult<uspSelectCTEProgramTypesPL_Result> uspSelectCTEProgramTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCTEProgramTypesPL_Result>("uspSelectCTEProgramTypesPL");
        }
    
        public virtual ObjectResult<uspSelectCurriculumsPL_Result> uspSelectCurriculumsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectCurriculumsPL_Result>("uspSelectCurriculumsPL");
        }
    
        public virtual int uspSelectDailyHomeroomSummary(Nullable<int> attendanceTakenBy, Nullable<System.DateTime> attendanceDate, Nullable<int> periodId)
        {
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectDailyHomeroomSummary", attendanceTakenByParameter, attendanceDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDataHistoryByStudentID_Result> uspSelectDataHistoryByStudentID(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataHistoryByStudentID_Result>("uspSelectDataHistoryByStudentID", studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectDataHistoryElements_Result> uspSelectDataHistoryElements(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataHistoryElements_Result>("uspSelectDataHistoryElements", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDataHistoryForTracking_Result> uspSelectDataHistoryForTracking(Nullable<int> applicationid, Nullable<int> studentid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDataHistoryForTracking_Result>("uspSelectDataHistoryForTracking", applicationidParameter, studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectDeliveryMethodsPL_Result> uspSelectDeliveryMethodsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDeliveryMethodsPL_Result>("uspSelectDeliveryMethodsPL");
        }
    
        public virtual ObjectResult<uspSelectDepartmentsPL_Result> uspSelectDepartmentsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDepartmentsPL_Result>("uspSelectDepartmentsPL");
        }
    
        public virtual ObjectResult<uspSelectDetailsBySchoolId_Result> uspSelectDetailsBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDetailsBySchoolId_Result>("uspSelectDetailsBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDetailsByStudentId_Result> uspSelectDetailsByStudentId(Nullable<int> studentId, Nullable<System.DateTime> currentDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDetailsByStudentId_Result>("uspSelectDetailsByStudentId", studentIdParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectDiagnosticsResultPL_Result> uspSelectDiagnosticsResultPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDiagnosticsResultPL_Result>("uspSelectDiagnosticsResultPL");
        }
    
        public virtual ObjectResult<uspSelectDiplomaTypesPL_Result> uspSelectDiplomaTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDiplomaTypesPL_Result>("uspSelectDiplomaTypesPL");
        }
    
        public virtual ObjectResult<uspSelectDisabilityTypesPL_Result> uspSelectDisabilityTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDisabilityTypesPL_Result>("uspSelectDisabilityTypesPL");
        }
    
        public virtual ObjectResult<uspSelectDisadvantagementTypesPL_Result> uspSelectDisadvantagementTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDisadvantagementTypesPL_Result>("uspSelectDisadvantagementTypesPL");
        }
    
        public virtual ObjectResult<uspSelectDisciplineActionTakenTypesPL_Result> uspSelectDisciplineActionTakenTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDisciplineActionTakenTypesPL_Result>("uspSelectDisciplineActionTakenTypesPL");
        }
    
        public virtual ObjectResult<uspSelectDisciplineCategoriesPL_Result> uspSelectDisciplineCategoriesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDisciplineCategoriesPL_Result>("uspSelectDisciplineCategoriesPL");
        }
    
        public virtual int uspSelectDisciplineDetailsByIncidentID(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectDisciplineDetailsByIncidentID", disciplineincidentidParameter);
        }
    
        public virtual int uspSelectDisciplineIncidentsBySchoolID(Nullable<int> schoolid, string schoolyear)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectDisciplineIncidentsBySchoolID", schoolidParameter, schoolyearParameter);
        }
    
        public virtual ObjectResult<uspSelectDisciplineLocationsPL_Result> uspSelectDisciplineLocationsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDisciplineLocationsPL_Result>("uspSelectDisciplineLocationsPL");
        }
    
        public virtual ObjectResult<uspSelectDistirctCommentsPL_Result> uspSelectDistirctCommentsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistirctCommentsPL_Result>("uspSelectDistirctCommentsPL");
        }
    
        public virtual ObjectResult<uspSelectDIstrictApplicationSetupByDistrictID_Result> uspSelectDIstrictApplicationSetupByDistrictID(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDIstrictApplicationSetupByDistrictID_Result>("uspSelectDIstrictApplicationSetupByDistrictID", districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAreaByDistrictAreaId_Result> uspSelectDistrictAreaByDistrictAreaId(Nullable<int> districtAreaId)
        {
            var districtAreaIdParameter = districtAreaId.HasValue ?
                new ObjectParameter("DistrictAreaId", districtAreaId) :
                new ObjectParameter("DistrictAreaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAreaByDistrictAreaId_Result>("uspSelectDistrictAreaByDistrictAreaId", districtAreaIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAreasByDistrictId_Result> uspSelectDistrictAreasByDistrictId(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAreasByDistrictId_Result>("uspSelectDistrictAreasByDistrictId", districtIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAssignmentCategoriesPLForSchool_Result> uspSelectDistrictAssignmentCategoriesPLForSchool(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAssignmentCategoriesPLForSchool_Result>("uspSelectDistrictAssignmentCategoriesPLForSchool", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatternByID_Result> uspSelectDistrictAttendancePatternByID(Nullable<int> patternId, Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("patternId", patternId) :
                new ObjectParameter("patternId", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatternByID_Result>("uspSelectDistrictAttendancePatternByID", patternIdParameter, districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatternEventByID_Result> uspSelectDistrictAttendancePatternEventByID(Nullable<int> districtAttendancePatternEventID)
        {
            var districtAttendancePatternEventIDParameter = districtAttendancePatternEventID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternEventID", districtAttendancePatternEventID) :
                new ObjectParameter("DistrictAttendancePatternEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatternEventByID_Result>("uspSelectDistrictAttendancePatternEventByID", districtAttendancePatternEventIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatternEvents_Result> uspSelectDistrictAttendancePatternEvents(Nullable<int> districtAttendancePatternID)
        {
            var districtAttendancePatternIDParameter = districtAttendancePatternID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternID", districtAttendancePatternID) :
                new ObjectParameter("DistrictAttendancePatternID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatternEvents_Result>("uspSelectDistrictAttendancePatternEvents", districtAttendancePatternIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatterns_Result> uspSelectDistrictAttendancePatterns(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatterns_Result>("uspSelectDistrictAttendancePatterns", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatternsByID_Result> uspSelectDistrictAttendancePatternsByID(Nullable<int> districtId, Nullable<int> schoolYearPL)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatternsByID_Result>("uspSelectDistrictAttendancePatternsByID", districtIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictAttendancePatternsForExceptions_Result> uspSelectDistrictAttendancePatternsForExceptions(Nullable<System.DateTime> attendanceDate)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictAttendancePatternsForExceptions_Result>("uspSelectDistrictAttendancePatternsForExceptions", attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCalendarEndSetupSettings_Result> uspSelectDistrictCalendarEndSetupSettings(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCalendarEndSetupSettings_Result>("uspSelectDistrictCalendarEndSetupSettings", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictComment_Result> uspSelectDistrictComment(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictComment_Result>("uspSelectDistrictComment", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCourseByCourseNumber_Result> uspSelectDistrictCourseByCourseNumber(string districtCourseNumber, Nullable<int> districtId, Nullable<int> schoolYearId)
        {
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCourseByCourseNumber_Result>("uspSelectDistrictCourseByCourseNumber", districtCourseNumberParameter, districtIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCourseByID_Result> uspSelectDistrictCourseByID(Nullable<int> districtCourseSequenceId)
        {
            var districtCourseSequenceIdParameter = districtCourseSequenceId.HasValue ?
                new ObjectParameter("DistrictCourseSequenceId", districtCourseSequenceId) :
                new ObjectParameter("DistrictCourseSequenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCourseByID_Result>("uspSelectDistrictCourseByID", districtCourseSequenceIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCourses_Result> uspSelectDistrictCourses(Nullable<int> districtId, Nullable<int> schoolYearId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCourses_Result>("uspSelectDistrictCourses", districtIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCourseSummary_Result> uspSelectDistrictCourseSummary(Nullable<int> districtCourseId)
        {
            var districtCourseIdParameter = districtCourseId.HasValue ?
                new ObjectParameter("DistrictCourseId", districtCourseId) :
                new ObjectParameter("DistrictCourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCourseSummary_Result>("uspSelectDistrictCourseSummary", districtCourseIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictCourseTerms_Result> uspSelectDistrictCourseTerms(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictCourseTerms_Result>("uspSelectDistrictCourseTerms", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictDetailsByDistrictID_Result> uspSelectDistrictDetailsByDistrictID(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictDetailsByDistrictID_Result>("uspSelectDistrictDetailsByDistrictID", districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictDistrictCommentsPLForSchool_Result> uspSelectDistrictDistrictCommentsPLForSchool(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictDistrictCommentsPLForSchool_Result>("uspSelectDistrictDistrictCommentsPLForSchool", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGPA_Result> uspSelectDistrictGPA(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGPA_Result>("uspSelectDistrictGPA", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradebookPreference_Result> uspSelectDistrictGradebookPreference(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradebookPreference_Result>("uspSelectDistrictGradebookPreference", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradebookPreferenceById_Result> uspSelectDistrictGradebookPreferenceById(Nullable<int> districtGradeBookPreferenceID)
        {
            var districtGradeBookPreferenceIDParameter = districtGradeBookPreferenceID.HasValue ?
                new ObjectParameter("DistrictGradeBookPreferenceID", districtGradeBookPreferenceID) :
                new ObjectParameter("DistrictGradeBookPreferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradebookPreferenceById_Result>("uspSelectDistrictGradebookPreferenceById", districtGradeBookPreferenceIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradeBookPreferences_Result> uspSelectDistrictGradeBookPreferences(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradeBookPreferences_Result>("uspSelectDistrictGradeBookPreferences", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradeReasonsPLForSchool_Result> uspSelectDistrictGradeReasonsPLForSchool(Nullable<int> districtID, Nullable<int> schoolYearPL)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradeReasonsPLForSchool_Result>("uspSelectDistrictGradeReasonsPLForSchool", districtIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradeScaleDetailById_Result> uspSelectDistrictGradeScaleDetailById(Nullable<int> districtGradeScaleID)
        {
            var districtGradeScaleIDParameter = districtGradeScaleID.HasValue ?
                new ObjectParameter("DistrictGradeScaleID", districtGradeScaleID) :
                new ObjectParameter("DistrictGradeScaleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradeScaleDetailById_Result>("uspSelectDistrictGradeScaleDetailById", districtGradeScaleIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictGradeScales_Result> uspSelectDistrictGradeScales(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictGradeScales_Result>("uspSelectDistrictGradeScales", districtIDParameter);
        }
    
        public virtual ObjectResult<string> uspSelectDistrictIRN(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectDistrictIRN", districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictOfResidence_Result> uspSelectDistrictOfResidence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictOfResidence_Result>("uspSelectDistrictOfResidence");
        }
    
        public virtual ObjectResult<uspSelectDistrictPortalItemsPL_Result> uspSelectDistrictPortalItemsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictPortalItemsPL_Result>("uspSelectDistrictPortalItemsPL");
        }
    
        public virtual ObjectResult<uspSelectDistrictRegionsByDistrictId_Result> uspSelectDistrictRegionsByDistrictId(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictRegionsByDistrictId_Result>("uspSelectDistrictRegionsByDistrictId", districtIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictRegionsByDistrictRegionId_Result> uspSelectDistrictRegionsByDistrictRegionId(Nullable<int> districtRegionId)
        {
            var districtRegionIdParameter = districtRegionId.HasValue ?
                new ObjectParameter("DistrictRegionId", districtRegionId) :
                new ObjectParameter("DistrictRegionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictRegionsByDistrictRegionId_Result>("uspSelectDistrictRegionsByDistrictRegionId", districtRegionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictRegionsForLocationsByDistrcitID_Result> uspSelectDistrictRegionsForLocationsByDistrcitID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictRegionsForLocationsByDistrcitID_Result>("uspSelectDistrictRegionsForLocationsByDistrcitID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictRegionsForStaffByDistrictId_Result> uspSelectDistrictRegionsForStaffByDistrictId(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictRegionsForStaffByDistrictId_Result>("uspSelectDistrictRegionsForStaffByDistrictId", districtIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictRelationshipCodesPL_Result> uspSelectDistrictRelationshipCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictRelationshipCodesPL_Result>("uspSelectDistrictRelationshipCodesPL");
        }
    
        public virtual ObjectResult<uspSelectDistrictReportPeriodsByDistrictCourseTermId_Result> uspSelectDistrictReportPeriodsByDistrictCourseTermId(Nullable<int> districtCourseTermId)
        {
            var districtCourseTermIdParameter = districtCourseTermId.HasValue ?
                new ObjectParameter("DistrictCourseTermId", districtCourseTermId) :
                new ObjectParameter("DistrictCourseTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictReportPeriodsByDistrictCourseTermId_Result>("uspSelectDistrictReportPeriodsByDistrictCourseTermId", districtCourseTermIdParameter);
        }
    
        public virtual ObjectResult<uspSelectDistricts_Result> uspSelectDistricts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistricts_Result>("uspSelectDistricts");
        }
    
        public virtual ObjectResult<uspSelectDistrictSchoolYearDetailsByID_Result> uspSelectDistrictSchoolYearDetailsByID(Nullable<int> districtSchoolYearID)
        {
            var districtSchoolYearIDParameter = districtSchoolYearID.HasValue ?
                new ObjectParameter("DistrictSchoolYearID", districtSchoolYearID) :
                new ObjectParameter("DistrictSchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictSchoolYearDetailsByID_Result>("uspSelectDistrictSchoolYearDetailsByID", districtSchoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictSchoolYearsByDistrictID_Result> uspSelectDistrictSchoolYearsByDistrictID(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictSchoolYearsByDistrictID_Result>("uspSelectDistrictSchoolYearsByDistrictID", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictStaffDetails_Result> uspSelectDistrictStaffDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictStaffDetails_Result>("uspSelectDistrictStaffDetails");
        }
    
        public virtual ObjectResult<uspSelectDistrictStaffDetailsByDistrictID_Result> uspSelectDistrictStaffDetailsByDistrictID(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictStaffDetailsByDistrictID_Result>("uspSelectDistrictStaffDetailsByDistrictID", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictStaffDetailsbyStaffID_Result> uspSelectDistrictStaffDetailsbyStaffID(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictStaffDetailsbyStaffID_Result>("uspSelectDistrictStaffDetailsbyStaffID", staffIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictStudentBannerItems_Result> uspSelectDistrictStudentBannerItems(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictStudentBannerItems_Result>("uspSelectDistrictStudentBannerItems", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectDistrictTypesPL_Result> uspSelectDistrictTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDistrictTypesPL_Result>("uspSelectDistrictTypesPL");
        }
    
        public virtual ObjectResult<uspSelectDNAttributeNamePL_Result> uspSelectDNAttributeNamePL(string dNAttributeType)
        {
            var dNAttributeTypeParameter = dNAttributeType != null ?
                new ObjectParameter("DNAttributeType", dNAttributeType) :
                new ObjectParameter("DNAttributeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDNAttributeNamePL_Result>("uspSelectDNAttributeNamePL", dNAttributeTypeParameter);
        }
    
        public virtual ObjectResult<uspSelectDNAttributeTypePL_Result> uspSelectDNAttributeTypePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectDNAttributeTypePL_Result>("uspSelectDNAttributeTypePL");
        }
    
        public virtual ObjectResult<string> uspSelectDocumentationURL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectDocumentationURL");
        }
    
        public virtual ObjectResult<uspSelectEducationalOptionsPL_Result> uspSelectEducationalOptionsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEducationalOptionsPL_Result>("uspSelectEducationalOptionsPL");
        }
    
        public virtual ObjectResult<uspSelectEmailTypesPL_Result> uspSelectEmailTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEmailTypesPL_Result>("uspSelectEmailTypesPL");
        }
    
        public virtual ObjectResult<uspSelectEmploymentTypesPL_Result> uspSelectEmploymentTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEmploymentTypesPL_Result>("uspSelectEmploymentTypesPL");
        }
    
        public virtual ObjectResult<uspSelectEnrollmentCodesPL_Result> uspSelectEnrollmentCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEnrollmentCodesPL_Result>("uspSelectEnrollmentCodesPL");
        }
    
        public virtual ObjectResult<uspSelectEnrollmentDetailsByEnrollmentID_Result> uspSelectEnrollmentDetailsByEnrollmentID(Nullable<int> enrollmentID)
        {
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEnrollmentDetailsByEnrollmentID_Result>("uspSelectEnrollmentDetailsByEnrollmentID", enrollmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectEnrollments_Result> uspSelectEnrollments(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEnrollments_Result>("uspSelectEnrollments", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectEnrollmentsByYearData_Result> uspSelectEnrollmentsByYearData(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEnrollmentsByYearData_Result>("uspSelectEnrollmentsByYearData", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectEthnicityTypesPL_Result> uspSelectEthnicityTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEthnicityTypesPL_Result>("uspSelectEthnicityTypesPL");
        }
    
        public virtual ObjectResult<uspSelectETRDisabilityConditionsPL_Result> uspSelectETRDisabilityConditionsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectETRDisabilityConditionsPL_Result>("uspSelectETRDisabilityConditionsPL");
        }
    
        public virtual ObjectResult<uspSelectETREventTypesPL_Result> uspSelectETREventTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectETREventTypesPL_Result>("uspSelectETREventTypesPL");
        }
    
        public virtual ObjectResult<uspSelectETRFundingCodeTypesPL_Result> uspSelectETRFundingCodeTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectETRFundingCodeTypesPL_Result>("uspSelectETRFundingCodeTypesPL");
        }
    
        public virtual ObjectResult<uspSelectETRNonComplaincePL_Result> uspSelectETRNonComplaincePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectETRNonComplaincePL_Result>("uspSelectETRNonComplaincePL");
        }
    
        public virtual ObjectResult<uspSelectETROutcomePL_Result> uspSelectETROutcomePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectETROutcomePL_Result>("uspSelectETROutcomePL");
        }
    
        public virtual ObjectResult<uspSelectEvolveDistricts_Result> uspSelectEvolveDistricts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEvolveDistricts_Result>("uspSelectEvolveDistricts");
        }
    
        public virtual ObjectResult<uspSelectEvolveDistrictsByPersonID_Result> uspSelectEvolveDistrictsByPersonID(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEvolveDistrictsByPersonID_Result>("uspSelectEvolveDistrictsByPersonID", personIdParameter);
        }
    
        public virtual ObjectResult<uspSelectEvolveSchoolsByPersonID_Result> uspSelectEvolveSchoolsByPersonID(Nullable<int> personId, Nullable<int> districtId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("PersonId", personId) :
                new ObjectParameter("PersonId", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectEvolveSchoolsByPersonID_Result>("uspSelectEvolveSchoolsByPersonID", personIdParameter, districtIdParameter);
        }
    
        public virtual ObjectResult<uspSelectExemptFromPETypesPL_Result> uspSelectExemptFromPETypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectExemptFromPETypesPL_Result>("uspSelectExemptFromPETypesPL");
        }
    
        public virtual ObjectResult<uspSelectExemptionFlagPL_Result> uspSelectExemptionFlagPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectExemptionFlagPL_Result>("uspSelectExemptionFlagPL");
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectExemptionsFlagByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectExemptionsFlagByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectForExGradPlanTypesPL_Result> uspSelectForExGradPlanTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectForExGradPlanTypesPL_Result>("uspSelectForExGradPlanTypesPL");
        }
    
        public virtual ObjectResult<uspSelectFormerSchoolByDistrictID_Result> uspSelectFormerSchoolByDistrictID(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFormerSchoolByDistrictID_Result>("uspSelectFormerSchoolByDistrictID", districtidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectFormerSchoolTypeBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectFormerSchoolTypeBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectFormerSchoolTypesPL_Result> uspSelectFormerSchoolTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFormerSchoolTypesPL_Result>("uspSelectFormerSchoolTypesPL");
        }
    
        public virtual ObjectResult<uspSelectFormerShcoolTypesPL_Result> uspSelectFormerShcoolTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectFormerShcoolTypesPL_Result>("uspSelectFormerShcoolTypesPL");
        }
    
        public virtual ObjectResult<uspSelectGenderTypesPL_Result> uspSelectGenderTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGenderTypesPL_Result>("uspSelectGenderTypesPL");
        }
    
        public virtual ObjectResult<uspSelectGiftedStudentInformation_Result> uspSelectGiftedStudentInformation(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGiftedStudentInformation_Result>("uspSelectGiftedStudentInformation", studentIDParameter);
        }
    
        public virtual int uspSelectGPADefinitions(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGPADefinitions", schoolidParameter);
        }
    
        public virtual int uspSelectGPADefinitionsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGPADefinitionsByID", idParameter);
        }
    
        public virtual ObjectResult<uspSelectGPAReviewDetailsforGradRequirments_Result> uspSelectGPAReviewDetailsforGradRequirments(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGPAReviewDetailsforGradRequirments_Result>("uspSelectGPAReviewDetailsforGradRequirments", studentIDParameter);
        }
    
        public virtual int uspSelectGradeBookAssignmentView(Nullable<int> classAssignmentId, Nullable<int> currentTeacherId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var currentTeacherIdParameter = currentTeacherId.HasValue ?
                new ObjectParameter("CurrentTeacherId", currentTeacherId) :
                new ObjectParameter("CurrentTeacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeBookAssignmentView", classAssignmentIdParameter, currentTeacherIdParameter);
        }
    
        public virtual ObjectResult<uspSelectGradebookCommentTypePL_Result> uspSelectGradebookCommentTypePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradebookCommentTypePL_Result>("uspSelectGradebookCommentTypePL");
        }
    
        public virtual int uspSelectGradeBookStudentView(Nullable<int> studentId, Nullable<int> classId, Nullable<int> gradePeriodId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeBookStudentView", studentIdParameter, classIdParameter, gradePeriodIdParameter);
        }
    
        public virtual ObjectResult<uspSelectGradeEntryInformationByCourseNumber_Result> uspSelectGradeEntryInformationByCourseNumber(string schoolCourseNumber, string schoolCourseSectionNumber, string schoolName, string schoolYearName, Nullable<int> studentId, Nullable<int> schoolYearId)
        {
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var schoolCourseSectionNumberParameter = schoolCourseSectionNumber != null ?
                new ObjectParameter("SchoolCourseSectionNumber", schoolCourseSectionNumber) :
                new ObjectParameter("SchoolCourseSectionNumber", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradeEntryInformationByCourseNumber_Result>("uspSelectGradeEntryInformationByCourseNumber", schoolCourseNumberParameter, schoolCourseSectionNumberParameter, schoolNameParameter, schoolYearNameParameter, studentIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectGradeEntryInformationByCourseNumber_07242017_Result> uspSelectGradeEntryInformationByCourseNumber_07242017(string schoolCourseNumber, string schoolCourseSectionNumber, string schoolName, string schoolYearName, Nullable<int> studentId, Nullable<int> schoolYearId)
        {
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var schoolCourseSectionNumberParameter = schoolCourseSectionNumber != null ?
                new ObjectParameter("SchoolCourseSectionNumber", schoolCourseSectionNumber) :
                new ObjectParameter("SchoolCourseSectionNumber", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradeEntryInformationByCourseNumber_07242017_Result>("uspSelectGradeEntryInformationByCourseNumber_07242017", schoolCourseNumberParameter, schoolCourseSectionNumberParameter, schoolNameParameter, schoolYearNameParameter, studentIdParameter, schoolYearIdParameter);
        }
    
        public virtual int uspSelectGradeLevlesByStandardIdForAssignment(Nullable<int> standardId)
        {
            var standardIdParameter = standardId.HasValue ?
                new ObjectParameter("StandardId", standardId) :
                new ObjectParameter("StandardId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeLevlesByStandardIdForAssignment", standardIdParameter);
        }
    
        public virtual int uspSelectGradeMethods()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeMethods");
        }
    
        public virtual int uspSelectGradeMethodsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeMethodsByID", idParameter);
        }
    
        public virtual ObjectResult<uspSelectGradeReasonTypePL_Result> uspSelectGradeReasonTypePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradeReasonTypePL_Result>("uspSelectGradeReasonTypePL");
        }
    
        public virtual ObjectResult<uspSelectGradeScaleDetailBySectionNumber_Result> uspSelectGradeScaleDetailBySectionNumber(string courseNumber, string sectionNumber, Nullable<int> schoolID, Nullable<int> finalGradePercentage, Nullable<int> schoolYearPL, string schoolYearName)
        {
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var finalGradePercentageParameter = finalGradePercentage.HasValue ?
                new ObjectParameter("FinalGradePercentage", finalGradePercentage) :
                new ObjectParameter("FinalGradePercentage", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradeScaleDetailBySectionNumber_Result>("uspSelectGradeScaleDetailBySectionNumber", courseNumberParameter, sectionNumberParameter, schoolIDParameter, finalGradePercentageParameter, schoolYearPLParameter, schoolYearNameParameter);
        }
    
        public virtual int uspSelectGradeScaleDetails(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeScaleDetails", schoolidParameter);
        }
    
        public virtual int uspSelectGradeScaleDetailsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectGradeScaleDetailsByID", idParameter);
        }
    
        public virtual ObjectResult<uspSelectGradesListForAssessmentPL_Result> uspSelectGradesListForAssessmentPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradesListForAssessmentPL_Result>("uspSelectGradesListForAssessmentPL");
        }
    
        public virtual ObjectResult<uspSelectGradesListForCalendarEnd_Result> uspSelectGradesListForCalendarEnd()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradesListForCalendarEnd_Result>("uspSelectGradesListForCalendarEnd");
        }
    
        public virtual ObjectResult<uspSelectGradesListForDTPL_Result> uspSelectGradesListForDTPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradesListForDTPL_Result>("uspSelectGradesListForDTPL");
        }
    
        public virtual ObjectResult<uspSelectGradesListPL_Result> uspSelectGradesListPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradesListPL_Result>("uspSelectGradesListPL");
        }
    
        public virtual ObjectResult<uspSelectGradPerformancePL_Result> uspSelectGradPerformancePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradPerformancePL_Result>("uspSelectGradPerformancePL");
        }
    
        public virtual ObjectResult<uspSelectGradPoints_Result> uspSelectGradPoints(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradPoints_Result>("uspSelectGradPoints", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradReqAssessment_Result> uspSelectGradReqAssessment(Nullable<int> gradReqID)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradReqAssessment_Result>("uspSelectGradReqAssessment", gradReqIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradReqAssessmentDetailsByGradReqAssessmentID_Result> uspSelectGradReqAssessmentDetailsByGradReqAssessmentID(Nullable<int> gradReqAssessmentID)
        {
            var gradReqAssessmentIDParameter = gradReqAssessmentID.HasValue ?
                new ObjectParameter("GradReqAssessmentID", gradReqAssessmentID) :
                new ObjectParameter("GradReqAssessmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradReqAssessmentDetailsByGradReqAssessmentID_Result>("uspSelectGradReqAssessmentDetailsByGradReqAssessmentID", gradReqAssessmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirement_Result> uspSelectGradRequirement(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirement_Result>("uspSelectGradRequirement", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirementDetails_Result> uspSelectGradRequirementDetails(Nullable<int> gradReqID)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirementDetails_Result>("uspSelectGradRequirementDetails", gradReqIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirementDetailsByGradReqId_Result> uspSelectGradRequirementDetailsByGradReqId(Nullable<int> schoolID, Nullable<int> gradReqId)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var gradReqIdParameter = gradReqId.HasValue ?
                new ObjectParameter("GradReqId", gradReqId) :
                new ObjectParameter("GradReqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirementDetailsByGradReqId_Result>("uspSelectGradRequirementDetailsByGradReqId", schoolIDParameter, gradReqIdParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirementDetailsBySchoolID_Result> uspSelectGradRequirementDetailsBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirementDetailsBySchoolID_Result>("uspSelectGradRequirementDetailsBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirementsBySchoolID_Result> uspSelectGradRequirementsBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirementsBySchoolID_Result>("uspSelectGradRequirementsBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectGradRequirementTypesPL_Result> uspSelectGradRequirementTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectGradRequirementTypesPL_Result>("uspSelectGradRequirementTypesPL");
        }
    
        public virtual ObjectResult<uspSelectHispanicTypesPL_Result> uspSelectHispanicTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHispanicTypesPL_Result>("uspSelectHispanicTypesPL");
        }
    
        public virtual ObjectResult<uspSelectHomeLanguagesPL_Result> uspSelectHomeLanguagesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeLanguagesPL_Result>("uspSelectHomeLanguagesPL");
        }
    
        public virtual ObjectResult<uspSelectHomelessTypesPL_Result> uspSelectHomelessTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomelessTypesPL_Result>("uspSelectHomelessTypesPL");
        }
    
        public virtual ObjectResult<uspSelectHomeRoomAttenadanceType_Result> uspSelectHomeRoomAttenadanceType(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeRoomAttenadanceType_Result>("uspSelectHomeRoomAttenadanceType", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeroomById_Result> uspSelectHomeroomById(Nullable<int> homeroomID)
        {
            var homeroomIDParameter = homeroomID.HasValue ?
                new ObjectParameter("HomeroomID", homeroomID) :
                new ObjectParameter("HomeroomID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeroomById_Result>("uspSelectHomeroomById", homeroomIDParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeroomsBySchoolID_Result> uspSelectHomeroomsBySchoolID(Nullable<int> schoolID, Nullable<int> schoolYearId)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeroomsBySchoolID_Result>("uspSelectHomeroomsBySchoolID", schoolIDParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeroomStaffByID_Result> uspSelectHomeroomStaffByID(Nullable<int> homeroomId, Nullable<int> schoolYearID)
        {
            var homeroomIdParameter = homeroomId.HasValue ?
                new ObjectParameter("HomeroomId", homeroomId) :
                new ObjectParameter("HomeroomId", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeroomStaffByID_Result>("uspSelectHomeroomStaffByID", homeroomIdParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeRoomTeachers_Result> uspSelectHomeRoomTeachers(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeRoomTeachers_Result>("uspSelectHomeRoomTeachers", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeroomTeachersAttendanceStatus_Result> uspSelectHomeroomTeachersAttendanceStatus(Nullable<System.DateTime> attendanceDate)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeroomTeachersAttendanceStatus_Result>("uspSelectHomeroomTeachersAttendanceStatus", attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeRoomTeachersForAttendance_Result> uspSelectHomeRoomTeachersForAttendance(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeRoomTeachersForAttendance_Result>("uspSelectHomeRoomTeachersForAttendance", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectHomeRoomTeachersForTranscriptBySchoolID_Result> uspSelectHomeRoomTeachersForTranscriptBySchoolID(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHomeRoomTeachersForTranscriptBySchoolID_Result>("uspSelectHomeRoomTeachersForTranscriptBySchoolID", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectHowReceivedCodeTypesPL_Result> uspSelectHowReceivedCodeTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHowReceivedCodeTypesPL_Result>("uspSelectHowReceivedCodeTypesPL");
        }
    
        public virtual ObjectResult<uspSelectHQTPL_Result> uspSelectHQTPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectHQTPL_Result>("uspSelectHQTPL");
        }
    
        public virtual int uspSelectIEPEventTypesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIEPEventTypesInfo");
        }
    
        public virtual ObjectResult<uspSelectIEPEventTypesPL_Result> uspSelectIEPEventTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIEPEventTypesPL_Result>("uspSelectIEPEventTypesPL");
        }
    
        public virtual int uspSelectIEPNonComplainceInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIEPNonComplainceInfo");
        }
    
        public virtual ObjectResult<uspSelectIEPNonComplaincePL_Result> uspSelectIEPNonComplaincePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIEPNonComplaincePL_Result>("uspSelectIEPNonComplaincePL");
        }
    
        public virtual int uspSelectIEPOutcomeInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIEPOutcomeInfo");
        }
    
        public virtual ObjectResult<uspSelectIEPOutcomePL_Result> uspSelectIEPOutcomePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIEPOutcomePL_Result>("uspSelectIEPOutcomePL");
        }
    
        public virtual ObjectResult<uspSelectIEPSecondaryPlanningValuesPL_Result> uspSelectIEPSecondaryPlanningValuesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIEPSecondaryPlanningValuesPL_Result>("uspSelectIEPSecondaryPlanningValuesPL");
        }
    
        public virtual int uspSelectIEPTestTypesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectIEPTestTypesInfo");
        }
    
        public virtual ObjectResult<uspSelectIEPTestTypesPL_Result> uspSelectIEPTestTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIEPTestTypesPL_Result>("uspSelectIEPTestTypesPL");
        }
    
        public virtual ObjectResult<uspSelectImmigrantStatusTypesPL_Result> uspSelectImmigrantStatusTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectImmigrantStatusTypesPL_Result>("uspSelectImmigrantStatusTypesPL");
        }
    
        public virtual ObjectResult<uspSelectInActiveDistrictCourses_Result> uspSelectInActiveDistrictCourses(Nullable<int> schoolYearId, Nullable<int> schoolId)
        {
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectInActiveDistrictCourses_Result>("uspSelectInActiveDistrictCourses", schoolYearIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectIncidentDetailsByIncidentID_Result> uspSelectIncidentDetailsByIncidentID(Nullable<int> studentDisciplineID)
        {
            var studentDisciplineIDParameter = studentDisciplineID.HasValue ?
                new ObjectParameter("StudentDisciplineID", studentDisciplineID) :
                new ObjectParameter("StudentDisciplineID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIncidentDetailsByIncidentID_Result>("uspSelectIncidentDetailsByIncidentID", studentDisciplineIDParameter);
        }
    
        public virtual ObjectResult<uspSelectIncompleteStudentInfo_Result> uspSelectIncompleteStudentInfo(string registrationnumber)
        {
            var registrationnumberParameter = registrationnumber != null ?
                new ObjectParameter("registrationnumber", registrationnumber) :
                new ObjectParameter("registrationnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectIncompleteStudentInfo_Result>("uspSelectIncompleteStudentInfo", registrationnumberParameter);
        }
    
        public virtual ObjectResult<uspSelectInternetServiceTypes_Result> uspSelectInternetServiceTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectInternetServiceTypes_Result>("uspSelectInternetServiceTypes");
        }
    
        public virtual ObjectResult<uspSelectLanguagesUsedInTeachingCoursePL_Result> uspSelectLanguagesUsedInTeachingCoursePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLanguagesUsedInTeachingCoursePL_Result>("uspSelectLanguagesUsedInTeachingCoursePL");
        }
    
        public virtual ObjectResult<string> uspSelectLastWorkingDayOfSchool(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectLastWorkingDayOfSchool", schoolIDParameter);
        }
    
        public virtual ObjectResult<string> uspSelectLatestPortalReleaseVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectLatestPortalReleaseVersion");
        }
    
        public virtual ObjectResult<string> uspSelectLatestReleaseVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectLatestReleaseVersion");
        }
    
        public virtual ObjectResult<uspSelectLetterTypePL_Result> uspSelectLetterTypePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLetterTypePL_Result>("uspSelectLetterTypePL");
        }
    
        public virtual ObjectResult<uspSelectLevel1Menus_Result> uspSelectLevel1Menus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLevel1Menus_Result>("uspSelectLevel1Menus");
        }
    
        public virtual ObjectResult<uspSelectLevelOneMenu_Result> uspSelectLevelOneMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLevelOneMenu_Result>("uspSelectLevelOneMenu");
        }
    
        public virtual ObjectResult<uspSelectLevelOneMenuByRole_Result> uspSelectLevelOneMenuByRole(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLevelOneMenuByRole_Result>("uspSelectLevelOneMenuByRole", roleidParameter);
        }
    
        public virtual ObjectResult<uspSelectLevelOneMenuByUserIDRoleID_Result> uspSelectLevelOneMenuByUserIDRoleID(Nullable<int> roleid, Nullable<int> personid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLevelOneMenuByUserIDRoleID_Result>("uspSelectLevelOneMenuByUserIDRoleID", roleidParameter, personidParameter);
        }
    
        public virtual ObjectResult<uspSelectLimitedEnglishProficiencyTypesPL_Result> uspSelectLimitedEnglishProficiencyTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectLimitedEnglishProficiencyTypesPL_Result>("uspSelectLimitedEnglishProficiencyTypesPL");
        }
    
        public virtual int uspSelectMainMenus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectMainMenus");
        }
    
        public virtual int uspSelectMainMenusByRole(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectMainMenusByRole", roleidParameter);
        }
    
        public virtual ObjectResult<uspSelectMaritalStatusPL_Result> uspSelectMaritalStatusPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMaritalStatusPL_Result>("uspSelectMaritalStatusPL");
        }
    
        public virtual ObjectResult<string> uspSelectMaxEnrollmentDateByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectMaxEnrollmentDateByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectMenuPrivilegesByRoleID_Result> uspSelectMenuPrivilegesByRoleID(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMenuPrivilegesByRoleID_Result>("uspSelectMenuPrivilegesByRoleID", roleIDParameter);
        }
    
        public virtual ObjectResult<uspSelectMethodsFromPickListPL_Result> uspSelectMethodsFromPickListPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMethodsFromPickListPL_Result>("uspSelectMethodsFromPickListPL");
        }
    
        public virtual ObjectResult<uspSelectMethodsPL_Result> uspSelectMethodsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMethodsPL_Result>("uspSelectMethodsPL");
        }
    
        public virtual ObjectResult<uspSelectMilitaryCompactGradTypesPL_Result> uspSelectMilitaryCompactGradTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMilitaryCompactGradTypesPL_Result>("uspSelectMilitaryCompactGradTypesPL");
        }
    
        public virtual ObjectResult<uspSelectMilitaryPL_Result> uspSelectMilitaryPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMilitaryPL_Result>("uspSelectMilitaryPL");
        }
    
        public virtual ObjectResult<uspSelectMoveStaffDetails_Result> uspSelectMoveStaffDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMoveStaffDetails_Result>("uspSelectMoveStaffDetails");
        }
    
        public virtual ObjectResult<uspSelectMoveStaffDetailsByStaffID_Result> uspSelectMoveStaffDetailsByStaffID(Nullable<int> staffID, Nullable<int> moveFlag)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var moveFlagParameter = moveFlag.HasValue ?
                new ObjectParameter("MoveFlag", moveFlag) :
                new ObjectParameter("MoveFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMoveStaffDetailsByStaffID_Result>("uspSelectMoveStaffDetailsByStaffID", staffIDParameter, moveFlagParameter);
        }
    
        public virtual ObjectResult<uspSelectMovingStudentsBySchoolID_Result> uspSelectMovingStudentsBySchoolID(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectMovingStudentsBySchoolID_Result>("uspSelectMovingStudentsBySchoolID", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectNativeLanguagesPL_Result> uspSelectNativeLanguagesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectNativeLanguagesPL_Result>("uspSelectNativeLanguagesPL");
        }
    
        public virtual ObjectResult<uspSelectNewActiveStudentsBySchoolCourseSectionID_Result> uspSelectNewActiveStudentsBySchoolCourseSectionID(Nullable<int> schoolCourseSectionID, Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectNewActiveStudentsBySchoolCourseSectionID_Result>("uspSelectNewActiveStudentsBySchoolCourseSectionID", schoolCourseSectionIDParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectNextLevelMenus_Result> uspSelectNextLevelMenus(string mainmenuids)
        {
            var mainmenuidsParameter = mainmenuids != null ?
                new ObjectParameter("mainmenuids", mainmenuids) :
                new ObjectParameter("mainmenuids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectNextLevelMenus_Result>("uspSelectNextLevelMenus", mainmenuidsParameter);
        }
    
        public virtual int uspSelectOffendersByDisciplineIncidentID(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectOffendersByDisciplineIncidentID", disciplineincidentidParameter);
        }
    
        public virtual ObjectResult<uspSelectOffenseTypesPL_Result> uspSelectOffenseTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOffenseTypesPL_Result>("uspSelectOffenseTypesPL");
        }
    
        public virtual ObjectResult<uspSelectOGTGraduationAlternativeTypesPL_Result> uspSelectOGTGraduationAlternativeTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOGTGraduationAlternativeTypesPL_Result>("uspSelectOGTGraduationAlternativeTypesPL");
        }
    
        public virtual ObjectResult<uspSelectOrientationDetails_Result> uspSelectOrientationDetails(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOrientationDetails_Result>("uspSelectOrientationDetails", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectOrientationDetailsByOrientationID_Result> uspSelectOrientationDetailsByOrientationID(Nullable<int> orientationscheduleid)
        {
            var orientationscheduleidParameter = orientationscheduleid.HasValue ?
                new ObjectParameter("orientationscheduleid", orientationscheduleid) :
                new ObjectParameter("orientationscheduleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOrientationDetailsByOrientationID_Result>("uspSelectOrientationDetailsByOrientationID", orientationscheduleidParameter);
        }
    
        public virtual int uspSelectOrientationStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectOrientationStatus");
        }
    
        public virtual ObjectResult<uspSelectOrientationStatusPL_Result> uspSelectOrientationStatusPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOrientationStatusPL_Result>("uspSelectOrientationStatusPL");
        }
    
        public virtual ObjectResult<uspSelectOrientationTypesPL_Result> uspSelectOrientationTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectOrientationTypesPL_Result>("uspSelectOrientationTypesPL");
        }
    
        public virtual ObjectResult<uspSelectPagesByRole_Result> uspSelectPagesByRole(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPagesByRole_Result>("uspSelectPagesByRole", roleidParameter);
        }
    
        public virtual ObjectResult<uspSelectPasswordByUserIDAndSecurityQuestions_Result> uspSelectPasswordByUserIDAndSecurityQuestions(Nullable<int> sQ1PL, Nullable<int> sQ2PL, string sQ1A, string sQ2A, string userId)
        {
            var sQ1PLParameter = sQ1PL.HasValue ?
                new ObjectParameter("SQ1PL", sQ1PL) :
                new ObjectParameter("SQ1PL", typeof(int));
    
            var sQ2PLParameter = sQ2PL.HasValue ?
                new ObjectParameter("SQ2PL", sQ2PL) :
                new ObjectParameter("SQ2PL", typeof(int));
    
            var sQ1AParameter = sQ1A != null ?
                new ObjectParameter("SQ1A", sQ1A) :
                new ObjectParameter("SQ1A", typeof(string));
    
            var sQ2AParameter = sQ2A != null ?
                new ObjectParameter("SQ2A", sQ2A) :
                new ObjectParameter("SQ2A", typeof(string));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPasswordByUserIDAndSecurityQuestions_Result>("uspSelectPasswordByUserIDAndSecurityQuestions", sQ1PLParameter, sQ2PLParameter, sQ1AParameter, sQ2AParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPattenExceptionReasonValuesPL_Result> uspSelectPattenExceptionReasonValuesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPattenExceptionReasonValuesPL_Result>("uspSelectPattenExceptionReasonValuesPL");
        }
    
        public virtual ObjectResult<uspSelectPatternEventDetailsByPatternId_Result> uspSelectPatternEventDetailsByPatternId(Nullable<int> schoolAttendancePatternId, Nullable<System.DateTime> eventDate)
        {
            var schoolAttendancePatternIdParameter = schoolAttendancePatternId.HasValue ?
                new ObjectParameter("SchoolAttendancePatternId", schoolAttendancePatternId) :
                new ObjectParameter("SchoolAttendancePatternId", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPatternEventDetailsByPatternId_Result>("uspSelectPatternEventDetailsByPatternId", schoolAttendancePatternIdParameter, eventDateParameter);
        }
    
        public virtual ObjectResult<uspSelectPatternExceptionReasonsPL_Result> uspSelectPatternExceptionReasonsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPatternExceptionReasonsPL_Result>("uspSelectPatternExceptionReasonsPL");
        }
    
        public virtual ObjectResult<uspSelectPendingApplications_Result> uspSelectPendingApplications(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPendingApplications_Result>("uspSelectPendingApplications", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectPeriodDetails_Result> uspSelectPeriodDetails(Nullable<int> schoolid, Nullable<int> schoolyearid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPeriodDetails_Result>("uspSelectPeriodDetails", schoolidParameter, schoolyearidParameter);
        }
    
        public virtual ObjectResult<uspSelectPersonInfo_Result> uspSelectPersonInfo(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPersonInfo_Result>("uspSelectPersonInfo", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectPhoneRejectionReasonPL_Result> uspSelectPhoneRejectionReasonPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPhoneRejectionReasonPL_Result>("uspSelectPhoneRejectionReasonPL");
        }
    
        public virtual ObjectResult<uspSelectPhoneTypesPL_Result> uspSelectPhoneTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPhoneTypesPL_Result>("uspSelectPhoneTypesPL");
        }
    
        public virtual ObjectResult<uspSelectPickListDetailsByCategoryID_Result> uspSelectPickListDetailsByCategoryID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPickListDetailsByCategoryID_Result>("uspSelectPickListDetailsByCategoryID", categoryIDParameter);
        }
    
        public virtual ObjectResult<uspSelectPickListDetailsByPickListCategoryID_Result> uspSelectPickListDetailsByPickListCategoryID(Nullable<int> pickListCodeId)
        {
            var pickListCodeIdParameter = pickListCodeId.HasValue ?
                new ObjectParameter("PickListCodeId", pickListCodeId) :
                new ObjectParameter("PickListCodeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPickListDetailsByPickListCategoryID_Result>("uspSelectPickListDetailsByPickListCategoryID", pickListCodeIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalContactAddressDetailsById_Result> uspSelectPortalContactAddressDetailsById(Nullable<int> portalContactAddressId)
        {
            var portalContactAddressIdParameter = portalContactAddressId.HasValue ?
                new ObjectParameter("PortalContactAddressId", portalContactAddressId) :
                new ObjectParameter("PortalContactAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalContactAddressDetailsById_Result>("uspSelectPortalContactAddressDetailsById", portalContactAddressIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalLinkedStudents_Result> uspSelectPortalLinkedStudents(Nullable<int> portalAccountId)
        {
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalLinkedStudents_Result>("uspSelectPortalLinkedStudents", portalAccountIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalSetupByDistrictId_Result> uspSelectPortalSetupByDistrictId(Nullable<int> districtId)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalSetupByDistrictId_Result>("uspSelectPortalSetupByDistrictId", districtIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalSetupBySchoolId_Result> uspSelectPortalSetupBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalSetupBySchoolId_Result>("uspSelectPortalSetupBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalSetupByStudentId_Result> uspSelectPortalSetupByStudentId(Nullable<int> portalAccountId, Nullable<int> studentId, Nullable<int> schoolId)
        {
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalSetupByStudentId_Result>("uspSelectPortalSetupByStudentId", portalAccountIdParameter, studentIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentAddressDetailsById_Result> uspSelectPortalStudentAddressDetailsById(Nullable<int> portalStudentAddressId)
        {
            var portalStudentAddressIdParameter = portalStudentAddressId.HasValue ?
                new ObjectParameter("PortalStudentAddressId", portalStudentAddressId) :
                new ObjectParameter("PortalStudentAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentAddressDetailsById_Result>("uspSelectPortalStudentAddressDetailsById", portalStudentAddressIdParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentAddressForApproval_Result> uspSelectPortalStudentAddressForApproval(Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentAddressForApproval_Result>("uspSelectPortalStudentAddressForApproval", schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentAddressRejectionReasonPL_Result> uspSelectPortalStudentAddressRejectionReasonPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentAddressRejectionReasonPL_Result>("uspSelectPortalStudentAddressRejectionReasonPL");
        }
    
        public virtual ObjectResult<uspSelectPortalStudentContactAddressForApproval_Result> uspSelectPortalStudentContactAddressForApproval(Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentContactAddressForApproval_Result>("uspSelectPortalStudentContactAddressForApproval", schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentContactPhoneForApproval_Result> uspSelectPortalStudentContactPhoneForApproval(Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentContactPhoneForApproval_Result>("uspSelectPortalStudentContactPhoneForApproval", schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentCTERequestsForApproval_Result> uspSelectPortalStudentCTERequestsForApproval(Nullable<int> schoolId, Nullable<int> schoolYearPL, Nullable<int> counselorID, Nullable<int> statusPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var statusPLParameter = statusPL.HasValue ?
                new ObjectParameter("StatusPL", statusPL) :
                new ObjectParameter("StatusPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentCTERequestsForApproval_Result>("uspSelectPortalStudentCTERequestsForApproval", schoolIdParameter, schoolYearPLParameter, counselorIDParameter, statusPLParameter);
        }
    
        public virtual ObjectResult<uspSelectPortalStudentPhonesForApproval_Result> uspSelectPortalStudentPhonesForApproval(Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPortalStudentPhonesForApproval_Result>("uspSelectPortalStudentPhonesForApproval", schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectPreferredPronounsPL_Result> uspSelectPreferredPronounsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPreferredPronounsPL_Result>("uspSelectPreferredPronounsPL");
        }
    
        public virtual ObjectResult<uspSelectPreschoolPovertyTypesPL_Result> uspSelectPreschoolPovertyTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPreschoolPovertyTypesPL_Result>("uspSelectPreschoolPovertyTypesPL");
        }
    
        public virtual ObjectResult<uspSelectPrimaryPhonesSameAsStudent_Result> uspSelectPrimaryPhonesSameAsStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPrimaryPhonesSameAsStudent_Result>("uspSelectPrimaryPhonesSameAsStudent", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectPrivilagesByRole_Result> uspSelectPrivilagesByRole(Nullable<int> rOLEID)
        {
            var rOLEIDParameter = rOLEID.HasValue ?
                new ObjectParameter("ROLEID", rOLEID) :
                new ObjectParameter("ROLEID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPrivilagesByRole_Result>("uspSelectPrivilagesByRole", rOLEIDParameter);
        }
    
        public virtual ObjectResult<uspSelectPrivilagesByUser_Result> uspSelectPrivilagesByUser(Nullable<int> pERSONID)
        {
            var pERSONIDParameter = pERSONID.HasValue ?
                new ObjectParameter("PERSONID", pERSONID) :
                new ObjectParameter("PERSONID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectPrivilagesByUser_Result>("uspSelectPrivilagesByUser", pERSONIDParameter);
        }
    
        public virtual int uspSelectPrivilges(Nullable<int> tadid, Nullable<bool> istab)
        {
            var tadidParameter = tadid.HasValue ?
                new ObjectParameter("tadid", tadid) :
                new ObjectParameter("tadid", typeof(int));
    
            var istabParameter = istab.HasValue ?
                new ObjectParameter("istab", istab) :
                new ObjectParameter("istab", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectPrivilges", tadidParameter, istabParameter);
        }
    
        public virtual ObjectResult<uspSelectProgramByProgramID_Result> uspSelectProgramByProgramID(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectProgramByProgramID_Result>("uspSelectProgramByProgramID", programIdParameter);
        }
    
        public virtual ObjectResult<uspSelectProgramCodesBySchool_Result> uspSelectProgramCodesBySchool(Nullable<int> schoolid, Nullable<int> calendarid, string gradelevels, Nullable<int> option)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var calendaridParameter = calendarid.HasValue ?
                new ObjectParameter("calendarid", calendarid) :
                new ObjectParameter("calendarid", typeof(int));
    
            var gradelevelsParameter = gradelevels != null ?
                new ObjectParameter("gradelevels", gradelevels) :
                new ObjectParameter("gradelevels", typeof(string));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("option", option) :
                new ObjectParameter("option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectProgramCodesBySchool_Result>("uspSelectProgramCodesBySchool", schoolidParameter, calendaridParameter, gradelevelsParameter, optionParameter);
        }
    
        public virtual ObjectResult<uspSelectProgramCodesByStudent_Result> uspSelectProgramCodesByStudent(Nullable<int> studentid, Nullable<int> calendarid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var calendaridParameter = calendarid.HasValue ?
                new ObjectParameter("calendarid", calendarid) :
                new ObjectParameter("calendarid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectProgramCodesByStudent_Result>("uspSelectProgramCodesByStudent", studentidParameter, calendaridParameter);
        }
    
        public virtual ObjectResult<uspSelectProgramCodesFromPicklist_Result> uspSelectProgramCodesFromPicklist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectProgramCodesFromPicklist_Result>("uspSelectProgramCodesFromPicklist");
        }
    
        public virtual ObjectResult<uspSelectProgramCodesPL_Result> uspSelectProgramCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectProgramCodesPL_Result>("uspSelectProgramCodesPL");
        }
    
        public virtual ObjectResult<uspSelectReenrolledStudentInformation_Result> uspSelectReenrolledStudentInformation(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReenrolledStudentInformation_Result>("uspSelectReenrolledStudentInformation", studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectRegionByApplicationID(Nullable<int> studentAPplicationID)
        {
            var studentAPplicationIDParameter = studentAPplicationID.HasValue ?
                new ObjectParameter("StudentAPplicationID", studentAPplicationID) :
                new ObjectParameter("StudentAPplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectRegionByApplicationID", studentAPplicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectRegionByCounty(string county)
        {
            var countyParameter = county != null ?
                new ObjectParameter("County", county) :
                new ObjectParameter("County", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectRegionByCounty", countyParameter);
        }
    
        public virtual ObjectResult<string> uspSelectRegistrationNumber(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectRegistrationNumber", applicationidParameter);
        }
    
        public virtual int uspSelectRegistrationRecords(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectRegistrationRecords", idParameter);
        }
    
        public virtual ObjectResult<uspSelectRejectionReasonFromPL_Result> uspSelectRejectionReasonFromPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRejectionReasonFromPL_Result>("uspSelectRejectionReasonFromPL");
        }
    
        public virtual ObjectResult<uspSelectRelationshipTypesPL_Result> uspSelectRelationshipTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRelationshipTypesPL_Result>("uspSelectRelationshipTypesPL");
        }
    
        public virtual ObjectResult<uspSelectReportByReportPeriodName_Result> uspSelectReportByReportPeriodName(string reportperiod, string reportname)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var reportnameParameter = reportname != null ?
                new ObjectParameter("reportname", reportname) :
                new ObjectParameter("reportname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportByReportPeriodName_Result>("uspSelectReportByReportPeriodName", reportperiodParameter, reportnameParameter);
        }
    
        public virtual int uspSelectReportersByDisciplineIncidentID(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectReportersByDisciplineIncidentID", disciplineincidentidParameter);
        }
    
        public virtual ObjectResult<uspSelectReportFieldsByReportPeriod_Result> uspSelectReportFieldsByReportPeriod(string reportperiod, string reportname)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var reportnameParameter = reportname != null ?
                new ObjectParameter("reportname", reportname) :
                new ObjectParameter("reportname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportFieldsByReportPeriod_Result>("uspSelectReportFieldsByReportPeriod", reportperiodParameter, reportnameParameter);
        }
    
        public virtual ObjectResult<uspSelectReportingPeriodsPL_Result> uspSelectReportingPeriodsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportingPeriodsPL_Result>("uspSelectReportingPeriodsPL");
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetails_Result> uspSelectReportPeriodDetails(string reportperiod, Nullable<int> schoolYearPL, Nullable<int> districtid)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetails_Result>("uspSelectReportPeriodDetails", reportperiodParameter, schoolYearPLParameter, districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetails_old_Result> uspSelectReportPeriodDetails_old(string reportperiod, Nullable<int> schoolYearPL)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetails_old_Result>("uspSelectReportPeriodDetails_old", reportperiodParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetails_xyz_Result> uspSelectReportPeriodDetails_xyz(string reportperiod, Nullable<int> schoolYearPL, Nullable<int> districtid)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetails_xyz_Result>("uspSelectReportPeriodDetails_xyz", reportperiodParameter, schoolYearPLParameter, districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetailsByID_Result> uspSelectReportPeriodDetailsByID(string reportperiodid, Nullable<int> schoolYearPL)
        {
            var reportperiodidParameter = reportperiodid != null ?
                new ObjectParameter("reportperiodid", reportperiodid) :
                new ObjectParameter("reportperiodid", typeof(string));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetailsByID_Result>("uspSelectReportPeriodDetailsByID", reportperiodidParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetailsByIDDistrict_Result> uspSelectReportPeriodDetailsByIDDistrict(string reportperiodid, Nullable<int> districtid, Nullable<int> schoolYearPL)
        {
            var reportperiodidParameter = reportperiodid != null ?
                new ObjectParameter("reportperiodid", reportperiodid) :
                new ObjectParameter("reportperiodid", typeof(string));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetailsByIDDistrict_Result>("uspSelectReportPeriodDetailsByIDDistrict", reportperiodidParameter, districtidParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetailsByIDDistrictTEST_Result> uspSelectReportPeriodDetailsByIDDistrictTEST(string reportperiodid, Nullable<int> districtid, Nullable<int> schoolYearPL)
        {
            var reportperiodidParameter = reportperiodid != null ?
                new ObjectParameter("reportperiodid", reportperiodid) :
                new ObjectParameter("reportperiodid", typeof(string));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetailsByIDDistrictTEST_Result>("uspSelectReportPeriodDetailsByIDDistrictTEST", reportperiodidParameter, districtidParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectReportPeriodDetailsDistrict_Result> uspSelectReportPeriodDetailsDistrict(string reportperiod, Nullable<int> districtid)
        {
            var reportperiodParameter = reportperiod != null ?
                new ObjectParameter("reportperiod", reportperiod) :
                new ObjectParameter("reportperiod", typeof(string));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectReportPeriodDetailsDistrict_Result>("uspSelectReportPeriodDetailsDistrict", reportperiodParameter, districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectRequiredDocuments_Result> uspSelectRequiredDocuments(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRequiredDocuments_Result>("uspSelectRequiredDocuments", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectRequiredTestTypePL_Result> uspSelectRequiredTestTypePL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRequiredTestTypePL_Result>("uspSelectRequiredTestTypePL");
        }
    
        public virtual ObjectResult<uspSelectRetainedStatusTypesPL_Result> uspSelectRetainedStatusTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRetainedStatusTypesPL_Result>("uspSelectRetainedStatusTypesPL");
        }
    
        public virtual ObjectResult<uspSelectRolesPL_Result> uspSelectRolesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRolesPL_Result>("uspSelectRolesPL");
        }
    
        public virtual ObjectResult<uspSelectRoomByStaffID_Result> uspSelectRoomByStaffID(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRoomByStaffID_Result>("uspSelectRoomByStaffID", staffIDParameter);
        }
    
        public virtual ObjectResult<uspSelectRoomByStaffIDForSections_Result> uspSelectRoomByStaffIDForSections(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRoomByStaffIDForSections_Result>("uspSelectRoomByStaffIDForSections", staffIDParameter);
        }
    
        public virtual ObjectResult<uspSelectRoomDetailsByRoomID_Result> uspSelectRoomDetailsByRoomID(Nullable<int> roomid)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRoomDetailsByRoomID_Result>("uspSelectRoomDetailsByRoomID", roomidParameter);
        }
    
        public virtual ObjectResult<uspSelectRooms_Result> uspSelectRooms(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRooms_Result>("uspSelectRooms", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectRoomTypesPL_Result> uspSelectRoomTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRoomTypesPL_Result>("uspSelectRoomTypesPL");
        }
    
        public virtual ObjectResult<uspSelectRosterByHomeroomID_Result> uspSelectRosterByHomeroomID(Nullable<int> homeroomID, Nullable<int> schoolYearID)
        {
            var homeroomIDParameter = homeroomID.HasValue ?
                new ObjectParameter("HomeroomID", homeroomID) :
                new ObjectParameter("HomeroomID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRosterByHomeroomID_Result>("uspSelectRosterByHomeroomID", homeroomIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectRoundToDecimalPL_Result> uspSelectRoundToDecimalPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectRoundToDecimalPL_Result>("uspSelectRoundToDecimalPL");
        }
    
        public virtual ObjectResult<uspSelectSalutationPL_Result> uspSelectSalutationPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSalutationPL_Result>("uspSelectSalutationPL");
        }
    
        public virtual ObjectResult<uspSelectSchoolAlertSettingsByStudentID_Result> uspSelectSchoolAlertSettingsByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAlertSettingsByStudentID_Result>("uspSelectSchoolAlertSettingsByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternByID_Result> uspSelectSchoolAttendancePatternByID(Nullable<int> patternId, Nullable<int> schoolID)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("patternId", patternId) :
                new ObjectParameter("patternId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternByID_Result>("uspSelectSchoolAttendancePatternByID", patternIdParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternEventByID_Result> uspSelectSchoolAttendancePatternEventByID(Nullable<int> schoolAttendancePatternEventID)
        {
            var schoolAttendancePatternEventIDParameter = schoolAttendancePatternEventID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternEventID", schoolAttendancePatternEventID) :
                new ObjectParameter("SchoolAttendancePatternEventID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternEventByID_Result>("uspSelectSchoolAttendancePatternEventByID", schoolAttendancePatternEventIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternEvents_Result> uspSelectSchoolAttendancePatternEvents(Nullable<int> schoolAttendancePatternID)
        {
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternEvents_Result>("uspSelectSchoolAttendancePatternEvents", schoolAttendancePatternIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternEventsForPortal_Result> uspSelectSchoolAttendancePatternEventsForPortal(Nullable<int> schoolAttendancePatternID)
        {
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternEventsForPortal_Result>("uspSelectSchoolAttendancePatternEventsForPortal", schoolAttendancePatternIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatterns_Result> uspSelectSchoolAttendancePatterns(Nullable<int> patternId, Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var patternIdParameter = patternId.HasValue ?
                new ObjectParameter("patternId", patternId) :
                new ObjectParameter("patternId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatterns_Result>("uspSelectSchoolAttendancePatterns", patternIdParameter, schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternsByDataHistory_Result> uspSelectSchoolAttendancePatternsByDataHistory(Nullable<int> studentID, Nullable<int> attendancePatternID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var attendancePatternIDParameter = attendancePatternID.HasValue ?
                new ObjectParameter("AttendancePatternID", attendancePatternID) :
                new ObjectParameter("AttendancePatternID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternsByDataHistory_Result>("uspSelectSchoolAttendancePatternsByDataHistory", studentIDParameter, attendancePatternIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternsByGradeID_Result> uspSelectSchoolAttendancePatternsByGradeID(Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternsByGradeID_Result>("uspSelectSchoolAttendancePatternsByGradeID", studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternsByID_Result> uspSelectSchoolAttendancePatternsByID(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternsByID_Result>("uspSelectSchoolAttendancePatternsByID", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternsForExceptions_Result> uspSelectSchoolAttendancePatternsForExceptions(Nullable<int> schoolID, Nullable<System.DateTime> attendanceDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternsForExceptions_Result>("uspSelectSchoolAttendancePatternsForExceptions", schoolIDParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendancePatternsForPortalByStudentNYGradeLevel_Result> uspSelectSchoolAttendancePatternsForPortalByStudentNYGradeLevel(Nullable<int> studentID, Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendancePatternsForPortalByStudentNYGradeLevel_Result>("uspSelectSchoolAttendancePatternsForPortalByStudentNYGradeLevel", studentIDParameter, schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolAttendanceSettings_Result> uspSelectSchoolAttendanceSettings(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolAttendanceSettings_Result>("uspSelectSchoolAttendanceSettings", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCalendarByCalendarIDandStartDate_Result> uspSelectSchoolCalendarByCalendarIDandStartDate(Nullable<int> calendarid, Nullable<System.DateTime> startDate)
        {
            var calendaridParameter = calendarid.HasValue ?
                new ObjectParameter("Calendarid", calendarid) :
                new ObjectParameter("Calendarid", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCalendarByCalendarIDandStartDate_Result>("uspSelectSchoolCalendarByCalendarIDandStartDate", calendaridParameter, startDateParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolComments_Result> uspSelectSchoolComments(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolComments_Result>("uspSelectSchoolComments", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseByID_Result> uspSelectSchoolCourseByID(Nullable<int> schoolCourseId)
        {
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseByID_Result>("uspSelectSchoolCourseByID", schoolCourseIdParameter);
        }
    
        public virtual ObjectResult<uspselectSchoolCourseByNumber_Result> uspselectSchoolCourseByNumber(string buildingCourseNumber, Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspselectSchoolCourseByNumber_Result>("uspselectSchoolCourseByNumber", buildingCourseNumberParameter, schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseDetailsForGradeEntry_Result> uspSelectSchoolCourseDetailsForGradeEntry(string schoolCourseNumber, Nullable<int> schoolId, Nullable<int> schoolYearPL, Nullable<int> gradReqId)
        {
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var gradReqIdParameter = gradReqId.HasValue ?
                new ObjectParameter("GradReqId", gradReqId) :
                new ObjectParameter("GradReqId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseDetailsForGradeEntry_Result>("uspSelectSchoolCourseDetailsForGradeEntry", schoolCourseNumberParameter, schoolIdParameter, schoolYearPLParameter, gradReqIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourses_Result> uspSelectSchoolCourses(Nullable<int> schoolYearId, Nullable<int> schoolId)
        {
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourses_Result>("uspSelectSchoolCourses", schoolYearIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourses_BAK_Result> uspSelectSchoolCourses_BAK(Nullable<int> schoolYearId, Nullable<int> schoolId)
        {
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourses_BAK_Result>("uspSelectSchoolCourses_BAK", schoolYearIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCoursesByStudentId_Result> uspSelectSchoolCoursesByStudentId(Nullable<int> schoolYearId, Nullable<int> schoolId, Nullable<int> studentId)
        {
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCoursesByStudentId_Result>("uspSelectSchoolCoursesByStudentId", schoolYearIdParameter, schoolIdParameter, studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionByID_Result> uspSelectSchoolCourseSectionByID(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionByID_Result>("uspSelectSchoolCourseSectionByID", sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionByID_06222017_Result> uspSelectSchoolCourseSectionByID_06222017(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionByID_06222017_Result>("uspSelectSchoolCourseSectionByID_06222017", sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSections_Result> uspSelectSchoolCourseSections(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSections_Result>("uspSelectSchoolCourseSections", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionsByCourse_Result> uspSelectSchoolCourseSectionsByCourse(Nullable<int> schoolCourseID)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionsByCourse_Result>("uspSelectSchoolCourseSectionsByCourse", schoolCourseIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionsByCourse_06222017_Result> uspSelectSchoolCourseSectionsByCourse_06222017(Nullable<int> schoolCourseID)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionsByCourse_06222017_Result>("uspSelectSchoolCourseSectionsByCourse_06222017", schoolCourseIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionsSummary_Result> uspSelectSchoolCourseSectionsSummary(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionsSummary_Result>("uspSelectSchoolCourseSectionsSummary", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual int uspSelectSchoolCourseSectionStaffHistory(string buildingCourseNumber, string buildingCourseSectionNumber)
        {
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var buildingCourseSectionNumberParameter = buildingCourseSectionNumber != null ?
                new ObjectParameter("BuildingCourseSectionNumber", buildingCourseSectionNumber) :
                new ObjectParameter("BuildingCourseSectionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolCourseSectionStaffHistory", buildingCourseNumberParameter, buildingCourseSectionNumberParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseSectionSummary_Result> uspSelectSchoolCourseSectionSummary(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseSectionSummary_Result>("uspSelectSchoolCourseSectionSummary", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCoursesForStudentTimeNonCourse_Result> uspSelectSchoolCoursesForStudentTimeNonCourse(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCoursesForStudentTimeNonCourse_Result>("uspSelectSchoolCoursesForStudentTimeNonCourse", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCourseTerms_Result> uspSelectSchoolCourseTerms(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCourseTerms_Result>("uspSelectSchoolCourseTerms", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolCTESetup_Result> uspSelectSchoolCTESetup(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolCTESetup_Result>("uspSelectSchoolCTESetup", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolDayByID_Result> uspSelectSchoolDayByID(Nullable<int> schoolDayID)
        {
            var schoolDayIDParameter = schoolDayID.HasValue ?
                new ObjectParameter("SchoolDayID", schoolDayID) :
                new ObjectParameter("SchoolDayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolDayByID_Result>("uspSelectSchoolDayByID", schoolDayIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolDays_Result> uspSelectSchoolDays(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolDays_Result>("uspSelectSchoolDays", schoolIDParameter);
        }
    
        public virtual int uspSelectSchoolDepartments(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolDepartments", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolDetailsBySchoolID_Result> uspSelectSchoolDetailsBySchoolID(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolDetailsBySchoolID_Result>("uspSelectSchoolDetailsBySchoolID", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGPA_Result> uspSelectSchoolGPA(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGPA_Result>("uspSelectSchoolGPA", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradebookComment_Result> uspSelectSchoolGradebookComment(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradebookComment_Result>("uspSelectSchoolGradebookComment", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradebookPreference_Result> uspSelectSchoolGradebookPreference(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradebookPreference_Result>("uspSelectSchoolGradebookPreference", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradebookPreferenceById_Result> uspSelectSchoolGradebookPreferenceById(Nullable<int> schoolGradeBookPreferenceID)
        {
            var schoolGradeBookPreferenceIDParameter = schoolGradeBookPreferenceID.HasValue ?
                new ObjectParameter("SchoolGradeBookPreferenceID", schoolGradeBookPreferenceID) :
                new ObjectParameter("SchoolGradeBookPreferenceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradebookPreferenceById_Result>("uspSelectSchoolGradebookPreferenceById", schoolGradeBookPreferenceIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeBookPreferences_Result> uspSelectSchoolGradeBookPreferences(Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeBookPreferences_Result>("uspSelectSchoolGradeBookPreferences", schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeLevelByID_Result> uspSelectSchoolGradeLevelByID(Nullable<int> schoolGradeLevelID)
        {
            var schoolGradeLevelIDParameter = schoolGradeLevelID.HasValue ?
                new ObjectParameter("SchoolGradeLevelID", schoolGradeLevelID) :
                new ObjectParameter("SchoolGradeLevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeLevelByID_Result>("uspSelectSchoolGradeLevelByID", schoolGradeLevelIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeLevels_Result> uspSelectSchoolGradeLevels(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeLevels_Result>("uspSelectSchoolGradeLevels", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeLevelsForGradeLevelPage_Result> uspSelectSchoolGradeLevelsForGradeLevelPage(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeLevelsForGradeLevelPage_Result>("uspSelectSchoolGradeLevelsForGradeLevelPage", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeLevelsForTranscriptBySchoolID_Result> uspSelectSchoolGradeLevelsForTranscriptBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeLevelsForTranscriptBySchoolID_Result>("uspSelectSchoolGradeLevelsForTranscriptBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeScale_Result> uspSelectSchoolGradeScale(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeScale_Result>("uspSelectSchoolGradeScale", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeScaleDetails_Result> uspSelectSchoolGradeScaleDetails(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeScaleDetails_Result>("uspSelectSchoolGradeScaleDetails", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeScaleDetailsByID_Result> uspSelectSchoolGradeScaleDetailsByID(Nullable<int> schoolGradeScaleID)
        {
            var schoolGradeScaleIDParameter = schoolGradeScaleID.HasValue ?
                new ObjectParameter("SchoolGradeScaleID", schoolGradeScaleID) :
                new ObjectParameter("SchoolGradeScaleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeScaleDetailsByID_Result>("uspSelectSchoolGradeScaleDetailsByID", schoolGradeScaleIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeScaleDetailsForRC_Result> uspSelectSchoolGradeScaleDetailsForRC(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeScaleDetailsForRC_Result>("uspSelectSchoolGradeScaleDetailsForRC", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolGradeScales_Result> uspSelectSchoolGradeScales(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolGradeScales_Result>("uspSelectSchoolGradeScales", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolHomeRoomAttenadanceType_Result> uspSelectSchoolHomeRoomAttenadanceType(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolHomeRoomAttenadanceType_Result>("uspSelectSchoolHomeRoomAttenadanceType", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolIDsByBulletinID_Result> uspSelectSchoolIDsByBulletinID(Nullable<int> bulletinID)
        {
            var bulletinIDParameter = bulletinID.HasValue ?
                new ObjectParameter("BulletinID", bulletinID) :
                new ObjectParameter("BulletinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolIDsByBulletinID_Result>("uspSelectSchoolIDsByBulletinID", bulletinIDParameter);
        }
    
        public virtual ObjectResult<string> uspSelectSchoolIRNByDistIDSchoolID(Nullable<int> districtid, Nullable<int> schoolid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectSchoolIRNByDistIDSchoolID", districtidParameter, schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolLunchMenu_Result> uspSelectSchoolLunchMenu(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolLunchMenu_Result>("uspSelectSchoolLunchMenu", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolPatternsEventsDates_Result> uspSelectSchoolPatternsEventsDates(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolPatternsEventsDates_Result>("uspSelectSchoolPatternsEventsDates", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolPatternTotalDaysAndEventDays_Result> uspSelectSchoolPatternTotalDaysAndEventDays(Nullable<int> schoolAttendancePatternID, Nullable<int> schoolID, Nullable<decimal> hoursPerDay)
        {
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var hoursPerDayParameter = hoursPerDay.HasValue ?
                new ObjectParameter("HoursPerDay", hoursPerDay) :
                new ObjectParameter("HoursPerDay", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolPatternTotalDaysAndEventDays_Result>("uspSelectSchoolPatternTotalDaysAndEventDays", schoolAttendancePatternIDParameter, schoolIDParameter, hoursPerDayParameter);
        }
    
        public virtual int uspSelectSchoolQuarters(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolQuarters", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolReportPeriodsBySchoolCourseTermId_Result> uspSelectSchoolReportPeriodsBySchoolCourseTermId(Nullable<int> schoolCourseTermId)
        {
            var schoolCourseTermIdParameter = schoolCourseTermId.HasValue ?
                new ObjectParameter("SchoolCourseTermId", schoolCourseTermId) :
                new ObjectParameter("SchoolCourseTermId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolReportPeriodsBySchoolCourseTermId_Result>("uspSelectSchoolReportPeriodsBySchoolCourseTermId", schoolCourseTermIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchools_Result> uspSelectSchools()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchools_Result>("uspSelectSchools");
        }
    
        public virtual ObjectResult<uspSelectSchoolsByDistrictID_Result> uspSelectSchoolsByDistrictID(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsByDistrictID_Result>("uspSelectSchoolsByDistrictID", districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolsByDistrictIDForEMIS_Result> uspSelectSchoolsByDistrictIDForEMIS(Nullable<int> districtid)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsByDistrictIDForEMIS_Result>("uspSelectSchoolsByDistrictIDForEMIS", districtidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolsByDistrictIDForGrades_Result> uspSelectSchoolsByDistrictIDForGrades(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsByDistrictIDForGrades_Result>("uspSelectSchoolsByDistrictIDForGrades", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolsByDistrictList_Result> uspSelectSchoolsByDistrictList(string districtlist)
        {
            var districtlistParameter = districtlist != null ?
                new ObjectParameter("districtlist", districtlist) :
                new ObjectParameter("districtlist", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsByDistrictList_Result>("uspSelectSchoolsByDistrictList", districtlistParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolsByDistricts_Result> uspSelectSchoolsByDistricts(string districts)
        {
            var districtsParameter = districts != null ?
                new ObjectParameter("Districts", districts) :
                new ObjectParameter("Districts", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsByDistricts_Result>("uspSelectSchoolsByDistricts", districtsParameter);
        }
    
        public virtual int uspSelectSchoolSemesters(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolSemesters", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual int uspSelectSchoolSemTermQuarters(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolSemTermQuarters", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolsHavingTerms_Result> uspSelectSchoolsHavingTerms(Nullable<int> districtSchoolYearId)
        {
            var districtSchoolYearIdParameter = districtSchoolYearId.HasValue ?
                new ObjectParameter("DistrictSchoolYearId", districtSchoolYearId) :
                new ObjectParameter("DistrictSchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolsHavingTerms_Result>("uspSelectSchoolsHavingTerms", districtSchoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolStaffDetails_Result> uspSelectSchoolStaffDetails(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolStaffDetails_Result>("uspSelectSchoolStaffDetails", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolStaffDetailsbyStaffID_Result> uspSelectSchoolStaffDetailsbyStaffID(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolStaffDetailsbyStaffID_Result>("uspSelectSchoolStaffDetailsbyStaffID", staffIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolStudentBannerItems_Result> uspSelectSchoolStudentBannerItems(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("Schoolid", schoolid) :
                new ObjectParameter("Schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolStudentBannerItems_Result>("uspSelectSchoolStudentBannerItems", schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchooltAttendancePatterns_Result> uspSelectSchooltAttendancePatterns(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchooltAttendancePatterns_Result>("uspSelectSchooltAttendancePatterns", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolTermDates_Result> uspSelectSchoolTermDates(Nullable<int> schoolTermID, string schoolTermName, Nullable<int> schoolId, Nullable<int> schoolYearPL)
        {
            var schoolTermIDParameter = schoolTermID.HasValue ?
                new ObjectParameter("SchoolTermID", schoolTermID) :
                new ObjectParameter("SchoolTermID", typeof(int));
    
            var schoolTermNameParameter = schoolTermName != null ?
                new ObjectParameter("SchoolTermName", schoolTermName) :
                new ObjectParameter("SchoolTermName", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolTermDates_Result>("uspSelectSchoolTermDates", schoolTermIDParameter, schoolTermNameParameter, schoolIdParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolTerms_Result> uspSelectSchoolTerms(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolTerms_Result>("uspSelectSchoolTerms", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual int uspSelectSchoolTrimesters(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolTrimesters", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual int uspSelectSchoolTrimestersTerms(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolTrimestersTerms", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYearDatesByID_Result> uspSelectSchoolYearDatesByID(Nullable<int> schoolYearID, Nullable<int> schoolID)
        {
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearDatesByID_Result>("uspSelectSchoolYearDatesByID", schoolYearIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspselectschoolyeardetailsByID_Result> uspselectschoolyeardetailsByID(Nullable<int> schoolYearID)
        {
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspselectschoolyeardetailsByID_Result>("uspselectschoolyeardetailsByID", schoolYearIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspSelectSchoolYearLastDay(Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspSelectSchoolYearLastDay", schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYears_Result> uspSelectSchoolYears(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYears_Result>("uspSelectSchoolYears", schoolidParameter);
        }
    
        public virtual int uspSelectSchoolYearsByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolYearsByID", idParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYearsBySchoolID_Result> uspSelectSchoolYearsBySchoolID(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearsBySchoolID_Result>("uspSelectSchoolYearsBySchoolID", schoolidParameter);
        }
    
        public virtual int uspSelectSchoolYearsDetailsBySchoolYearIDQuarter(Nullable<int> schoolyearid)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolYearsDetailsBySchoolYearIDQuarter", schoolyearidParameter);
        }
    
        public virtual int uspSelectSchoolYearsDetailsBySchoolYearIDSemester(Nullable<int> schoolyearid)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolYearsDetailsBySchoolYearIDSemester", schoolyearidParameter);
        }
    
        public virtual int uspSelectSchoolYearsDetailsBySchoolYearIDTrimesters(Nullable<int> schoolyearid)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolYearsDetailsBySchoolYearIDTrimesters", schoolyearidParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYearsForMasterBySchool_Result> uspSelectSchoolYearsForMasterBySchool(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearsForMasterBySchool_Result>("uspSelectSchoolYearsForMasterBySchool", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYearsPL_Result> uspSelectSchoolYearsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearsPL_Result>("uspSelectSchoolYearsPL");
        }
    
        public virtual ObjectResult<uspSelectSchoolYearsPLForDistrictCourse_Result> uspSelectSchoolYearsPLForDistrictCourse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearsPLForDistrictCourse_Result>("uspSelectSchoolYearsPLForDistrictCourse");
        }
    
        public virtual ObjectResult<uspSelectSchoolYearTermsPL_Result> uspSelectSchoolYearTermsPL(Nullable<int> termTypeID)
        {
            var termTypeIDParameter = termTypeID.HasValue ?
                new ObjectParameter("TermTypeID", termTypeID) :
                new ObjectParameter("TermTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearTermsPL_Result>("uspSelectSchoolYearTermsPL", termTypeIDParameter);
        }
    
        public virtual int uspSelectSchoolYearType(Nullable<int> schoolid, Nullable<int> schoolYearId)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSchoolYearType", schoolidParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSchoolYearTypeForSections_Result> uspSelectSchoolYearTypeForSections(Nullable<int> schoolid, Nullable<int> schoolYearId)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSchoolYearTypeForSections_Result>("uspSelectSchoolYearTypeForSections", schoolidParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectScoreNotReportedPL_Result> uspSelectScoreNotReportedPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectScoreNotReportedPL_Result>("uspSelectScoreNotReportedPL");
        }
    
        public virtual int uspSelectSectionPeriodDetailsByID(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSectionPeriodDetailsByID", sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSectionPeriodsByID_Result> uspSelectSectionPeriodsByID(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSectionPeriodsByID_Result>("uspSelectSectionPeriodsByID", sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSectionsByCourseNumber_Result> uspSelectSectionsByCourseNumber(Nullable<int> schoolID, string courseNumber, Nullable<int> personID, Nullable<int> schoolYearID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSectionsByCourseNumber_Result>("uspSelectSectionsByCourseNumber", schoolIDParameter, courseNumberParameter, personIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSectionsBySchoolCourseID_Result> uspSelectSectionsBySchoolCourseID(Nullable<int> schoolCourseID)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSectionsBySchoolCourseID_Result>("uspSelectSectionsBySchoolCourseID", schoolCourseIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSectionStaffByID_Result> uspSelectSectionStaffByID(Nullable<int> sectionId)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSectionStaffByID_Result>("uspSelectSectionStaffByID", sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSectionStaffSummary_Result> uspSelectSectionStaffSummary(Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<int> sectionId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSectionStaffSummary_Result>("uspSelectSectionStaffSummary", schoolIdParameter, schoolYearIdParameter, sectionIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSecurityQuestionsByUserId_Result> uspSelectSecurityQuestionsByUserId(Nullable<int> portalAccountId, string userName)
        {
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSecurityQuestionsByUserId_Result>("uspSelectSecurityQuestionsByUserId", portalAccountIdParameter, userNameParameter);
        }
    
        public virtual ObjectResult<uspSelectSecurityQuestionsPL_Result> uspSelectSecurityQuestionsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSecurityQuestionsPL_Result>("uspSelectSecurityQuestionsPL");
        }
    
        public virtual ObjectResult<uspSelectSemester1PL_Result> uspSelectSemester1PL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSemester1PL_Result>("uspSelectSemester1PL");
        }
    
        public virtual ObjectResult<uspSelectSemester2PL_Result> uspSelectSemester2PL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSemester2PL_Result>("uspSelectSemester2PL");
        }
    
        public virtual ObjectResult<uspSelectSemesterCodesPL_Result> uspSelectSemesterCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSemesterCodesPL_Result>("uspSelectSemesterCodesPL");
        }
    
        public virtual int uspSelectSemQuarters(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSemQuarters", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSentToDistrictReasonTypesPL_Result> uspSelectSentToDistrictReasonTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSentToDistrictReasonTypesPL_Result>("uspSelectSentToDistrictReasonTypesPL");
        }
    
        public virtual ObjectResult<uspSelectServiceLevelPL_Result> uspSelectServiceLevelPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectServiceLevelPL_Result>("uspSelectServiceLevelPL");
        }
    
        public virtual int uspSelectShoolTermDates(Nullable<int> schoolId, Nullable<int> schoolYearId, string selectedTermName)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var selectedTermNameParameter = selectedTermName != null ?
                new ObjectParameter("SelectedTermName", selectedTermName) :
                new ObjectParameter("SelectedTermName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectShoolTermDates", schoolIdParameter, schoolYearIdParameter, selectedTermNameParameter);
        }
    
        public virtual ObjectResult<uspSelectSocialTypesPL_Result> uspSelectSocialTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSocialTypesPL_Result>("uspSelectSocialTypesPL");
        }
    
        public virtual int uspSelectSpecialEducationProgramTypesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSpecialEducationProgramTypesInfo");
        }
    
        public virtual ObjectResult<uspSelectSpecialEducationTypesPL_Result> uspSelectSpecialEducationTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSpecialEducationTypesPL_Result>("uspSelectSpecialEducationTypesPL");
        }
    
        public virtual ObjectResult<uspSelectSPEDGoalsPL_Result> uspSelectSPEDGoalsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSPEDGoalsPL_Result>("uspSelectSPEDGoalsPL");
        }
    
        public virtual ObjectResult<uspSelectSPEDProgramsPL_Result> uspSelectSPEDProgramsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSPEDProgramsPL_Result>("uspSelectSPEDProgramsPL");
        }
    
        public virtual ObjectResult<uspSelectStaffByDistrictID_Result> uspSelectStaffByDistrictID(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffByDistrictID_Result>("uspSelectStaffByDistrictID", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffBySchoolID_Result> uspSelectStaffBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffBySchoolID_Result>("uspSelectStaffBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffDetailsBySchool_Result> uspSelectStaffDetailsBySchool(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffDetailsBySchool_Result>("uspSelectStaffDetailsBySchool", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffHQTPL_Result> uspSelectStaffHQTPL(Nullable<int> staffId)
        {
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffHQTPL_Result>("uspSelectStaffHQTPL", staffIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffIDByPersonID_Result> uspSelectStaffIDByPersonID(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffIDByPersonID_Result>("uspSelectStaffIDByPersonID", personIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffLicenseNumberByDistrictID_Result> uspSelectStaffLicenseNumberByDistrictID(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffLicenseNumberByDistrictID_Result>("uspSelectStaffLicenseNumberByDistrictID", districtIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffSections_Result> uspSelectStaffSections(Nullable<int> staffID, Nullable<int> schoolID, Nullable<int> schoolYearID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffSections_Result>("uspSelectStaffSections", staffIDParameter, schoolIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffSectionsForDayAttendance_Result> uspSelectStaffSectionsForDayAttendance(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffSectionsForDayAttendance_Result>("uspSelectStaffSectionsForDayAttendance", staffIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStaffSectionsStudentForDayAttendance_Result> uspSelectStaffSectionsStudentForDayAttendance(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStaffSectionsStudentForDayAttendance_Result>("uspSelectStaffSectionsStudentForDayAttendance", staffIDParameter);
        }
    
        public virtual int uspSelectStandardsAllViewBySchoolForAssignment(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStandardsAllViewBySchoolForAssignment", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStateSubjectCodesPL_Result> uspSelectStateSubjectCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStateSubjectCodesPL_Result>("uspSelectStateSubjectCodesPL");
        }
    
        public virtual ObjectResult<uspSelectStatusFromPL_Result> uspSelectStatusFromPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStatusFromPL_Result>("uspSelectStatusFromPL");
        }
    
        public virtual ObjectResult<uspSelectStreetTypesPL_Result> uspSelectStreetTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStreetTypesPL_Result>("uspSelectStreetTypesPL");
        }
    
        public virtual ObjectResult<uspSelectStudent504Dates_Result> uspSelectStudent504Dates(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudent504Dates_Result>("uspSelectStudent504Dates", studentIdParameter);
        }
    
        public virtual int uspSelectStudentAccommodationInformation(Nullable<int> accommodationType, Nullable<int> studentId)
        {
            var accommodationTypeParameter = accommodationType.HasValue ?
                new ObjectParameter("AccommodationType", accommodationType) :
                new ObjectParameter("AccommodationType", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentAccommodationInformation", accommodationTypeParameter, studentIdParameter);
        }
    
        public virtual int uspSelectStudentAccommodationsInformation(Nullable<int> accommodationType, Nullable<int> studentId)
        {
            var accommodationTypeParameter = accommodationType.HasValue ?
                new ObjectParameter("AccommodationType", accommodationType) :
                new ObjectParameter("AccommodationType", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentAccommodationsInformation", accommodationTypeParameter, studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentACT_Result> uspSelectStudentACT(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentACT_Result>("uspSelectStudentACT", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentActiveAddressForPortal_Result> uspSelectStudentActiveAddressForPortal(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentActiveAddressForPortal_Result>("uspSelectStudentActiveAddressForPortal", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentActiveETRDisabilityCode_Result> uspSelectStudentActiveETRDisabilityCode(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentActiveETRDisabilityCode_Result>("uspSelectStudentActiveETRDisabilityCode", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentActivePhoneForPortal_Result> uspSelectStudentActivePhoneForPortal(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentActivePhoneForPortal_Result>("uspSelectStudentActivePhoneForPortal", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAddressesByStudentID_Result> uspSelectStudentAddressesByStudentID(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAddressesByStudentID_Result>("uspSelectStudentAddressesByStudentID", studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAddressesHistory_Result> uspSelectStudentAddressesHistory(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAddressesHistory_Result>("uspSelectStudentAddressesHistory", studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAlertsHistory_Result> uspSelectStudentAlertsHistory(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAlertsHistory_Result>("uspSelectStudentAlertsHistory", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAllAssessmentAccommodations_Result> uspSelectStudentAllAssessmentAccommodations(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAllAssessmentAccommodations_Result>("uspSelectStudentAllAssessmentAccommodations", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAlternateInfo_Result> uspSelectStudentAlternateInfo(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAlternateInfo_Result>("uspSelectStudentAlternateInfo", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentApplicationFullname_Result> uspSelectStudentApplicationFullname(Nullable<int> studentApplicationID)
        {
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentApplicationFullname_Result>("uspSelectStudentApplicationFullname", studentApplicationIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentAccommodations_Result> uspSelectStudentAssessmentAccommodations(Nullable<int> assessmentPL, Nullable<int> studentID, Nullable<System.DateTime> iEPDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentAccommodations_Result>("uspSelectStudentAssessmentAccommodations", assessmentPLParameter, studentIDParameter, iEPDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentAreasByAssessmentPL_Result> uspSelectStudentAssessmentAreasByAssessmentPL(Nullable<int> studentId, Nullable<int> assessmentPL)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentAreasByAssessmentPL_Result>("uspSelectStudentAssessmentAreasByAssessmentPL", studentIdParameter, assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentAssessmentAreaByAssessment_Result> uspSelectStudentAssessmentAssessmentAreaByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentAssessmentAreaByAssessment_Result>("uspSelectStudentAssessmentAssessmentAreaByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentByStudent_Result> uspSelectStudentAssessmentByStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentByStudent_Result>("uspSelectStudentAssessmentByStudent", studentIDParameter);
        }
    
        public virtual int uspSelectStudentAssessmentByStudentSchoolYearAssessment(Nullable<int> studentID, Nullable<int> assessmentPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentAssessmentByStudentSchoolYearAssessment", studentIDParameter, assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentByStudentSchoolYearAssessmentDate_Result> uspSelectStudentAssessmentByStudentSchoolYearAssessmentDate(Nullable<int> studentID, Nullable<int> assessmentPL, Nullable<System.DateTime> assessmentDate, Nullable<int> districtId, Nullable<int> schoolId)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentByStudentSchoolYearAssessmentDate_Result>("uspSelectStudentAssessmentByStudentSchoolYearAssessmentDate", studentIDParameter, assessmentPLParameter, assessmentDateParameter, districtIdParameter, schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentDiagnosticByAssessment_Result> uspSelectStudentAssessmentDiagnosticByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentDiagnosticByAssessment_Result>("uspSelectStudentAssessmentDiagnosticByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentExemptionFlagByAssessmentPL_Result> uspSelectStudentAssessmentExemptionFlagByAssessmentPL(Nullable<int> studentID, Nullable<int> assessmentPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentExemptionFlagByAssessmentPL_Result>("uspSelectStudentAssessmentExemptionFlagByAssessmentPL", studentIDParameter, assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentGradePerformanceByAssessmentPL_Result> uspSelectStudentAssessmentGradePerformanceByAssessmentPL(Nullable<int> studentID, Nullable<int> assessmentPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentGradePerformanceByAssessmentPL_Result>("uspSelectStudentAssessmentGradePerformanceByAssessmentPL", studentIDParameter, assessmentPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentGradPerformanceLevelsByAssessment_Result> uspSelectStudentAssessmentGradPerformanceLevelsByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentGradPerformanceLevelsByAssessment_Result>("uspSelectStudentAssessmentGradPerformanceLevelsByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentScoreByAssessmentDate_Result> uspSelectStudentAssessmentScoreByAssessmentDate(Nullable<int> studentID, Nullable<int> assessmentPL, Nullable<System.DateTime> assessmentDate, Nullable<int> districtId, Nullable<int> schoolId, string assessmentArea)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var assessmentAreaParameter = assessmentArea != null ?
                new ObjectParameter("AssessmentArea", assessmentArea) :
                new ObjectParameter("AssessmentArea", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentScoreByAssessmentDate_Result>("uspSelectStudentAssessmentScoreByAssessmentDate", studentIDParameter, assessmentPLParameter, assessmentDateParameter, districtIdParameter, schoolIdParameter, assessmentAreaParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentScoreNotReportedByAssessment_Result> uspSelectStudentAssessmentScoreNotReportedByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentScoreNotReportedByAssessment_Result>("uspSelectStudentAssessmentScoreNotReportedByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentTestAccommodationTypesByAssessment_Result> uspSelectStudentAssessmentTestAccommodationTypesByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentTestAccommodationTypesByAssessment_Result>("uspSelectStudentAssessmentTestAccommodationTypesByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentTestGradeLevelsByAssessment_Result> uspSelectStudentAssessmentTestGradeLevelsByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentTestGradeLevelsByAssessment_Result>("uspSelectStudentAssessmentTestGradeLevelsByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentTestTypesByAssessment_Result> uspSelectStudentAssessmentTestTypesByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentTestTypesByAssessment_Result>("uspSelectStudentAssessmentTestTypesByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssessmentValidScoresByAssessment_Result> uspSelectStudentAssessmentValidScoresByAssessment(Nullable<int> assessmentPL, Nullable<int> districtID, Nullable<System.DateTime> assessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssessmentValidScoresByAssessment_Result>("uspSelectStudentAssessmentValidScoresByAssessment", assessmentPLParameter, districtIDParameter, assessmentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAssignmentStatusAndComments_Result> uspSelectStudentAssignmentStatusAndComments(Nullable<int> studentID, Nullable<int> assignmentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAssignmentStatusAndComments_Result>("uspSelectStudentAssignmentStatusAndComments", studentIDParameter, assignmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAttendanceDatesForCalendar_Result> uspSelectStudentAttendanceDatesForCalendar(Nullable<int> studentID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAttendanceDatesForCalendar_Result>("uspSelectStudentAttendanceDatesForCalendar", studentIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAttendanceDatesForSummary_Result> uspSelectStudentAttendanceDatesForSummary(Nullable<int> studentID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAttendanceDatesForSummary_Result>("uspSelectStudentAttendanceDatesForSummary", studentIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAttendanceForTranscript_Result> uspSelectStudentAttendanceForTranscript(Nullable<int> studentID, Nullable<int> schoolYearID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAttendanceForTranscript_Result>("uspSelectStudentAttendanceForTranscript", studentIDParameter, schoolYearIDParameter);
        }
    
        public virtual int uspSelectStudentAttendancePatternEvent(Nullable<int> studentID, Nullable<System.DateTime> attendanceDate, ObjectParameter matchedEventDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentAttendancePatternEvent", studentIDParameter, attendanceDateParameter, matchedEventDate);
        }
    
        public virtual ObjectResult<uspSelectStudentAttendanceRecordForCalendar_Result> uspSelectStudentAttendanceRecordForCalendar(Nullable<int> studentID, Nullable<System.DateTime> attendanceDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAttendanceRecordForCalendar_Result>("uspSelectStudentAttendanceRecordForCalendar", studentIDParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentAttendanceSummary_Result> uspSelectStudentAttendanceSummary(Nullable<int> studentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAttendanceSummary_Result>("uspSelectStudentAttendanceSummary", studentIDParameter, fromDateParameter, endDateParameter);
        }
    
        public virtual int uspSelectStudentAvailableDates(Nullable<int> studentID, Nullable<System.DateTime> matchedDate, Nullable<System.DateTime> studentAttendancePatternEndDate, ObjectParameter matchedAvailableDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var matchedDateParameter = matchedDate.HasValue ?
                new ObjectParameter("MatchedDate", matchedDate) :
                new ObjectParameter("MatchedDate", typeof(System.DateTime));
    
            var studentAttendancePatternEndDateParameter = studentAttendancePatternEndDate.HasValue ?
                new ObjectParameter("StudentAttendancePatternEndDate", studentAttendancePatternEndDate) :
                new ObjectParameter("StudentAttendancePatternEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentAvailableDates", studentIDParameter, matchedDateParameter, studentAttendancePatternEndDateParameter, matchedAvailableDate);
        }
    
        public virtual ObjectResult<uspSelectStudentAverageByAssignmentForGraphs_Result> uspSelectStudentAverageByAssignmentForGraphs(Nullable<int> assignmentId)
        {
            var assignmentIdParameter = assignmentId.HasValue ?
                new ObjectParameter("AssignmentId", assignmentId) :
                new ObjectParameter("AssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentAverageByAssignmentForGraphs_Result>("uspSelectStudentAverageByAssignmentForGraphs", assignmentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentBannerFields2_Result> uspSelectStudentBannerFields2(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentBannerFields2_Result>("uspSelectStudentBannerFields2", schoolIdParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentBannerFieldsWithLinePositions_Result> uspSelectStudentBannerFieldsWithLinePositions(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentBannerFieldsWithLinePositions_Result>("uspSelectStudentBannerFieldsWithLinePositions", schoolIdParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentBannerFieldsWithValues_Result> uspSelectStudentBannerFieldsWithValues(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("schoolId", schoolId) :
                new ObjectParameter("schoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentBannerFieldsWithValues_Result>("uspSelectStudentBannerFieldsWithValues", schoolIdParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentBannerLookUpItems_Result> uspSelectStudentBannerLookUpItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentBannerLookUpItems_Result>("uspSelectStudentBannerLookUpItems");
        }
    
        public virtual ObjectResult<uspSelectStudentBannerSearch_Result> uspSelectStudentBannerSearch(string searchTerm, Nullable<int> schoolID)
        {
            var searchTermParameter = searchTerm != null ?
                new ObjectParameter("SearchTerm", searchTerm) :
                new ObjectParameter("SearchTerm", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentBannerSearch_Result>("uspSelectStudentBannerSearch", searchTermParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentByStudentId_Result> uspSelectStudentByStudentId(string portalCode, string firstName, string lastName)
        {
            var portalCodeParameter = portalCode != null ?
                new ObjectParameter("PortalCode", portalCode) :
                new ObjectParameter("PortalCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentByStudentId_Result>("uspSelectStudentByStudentId", portalCodeParameter, firstNameParameter, lastNameParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactActiveAddressForPortal_Result> uspSelectStudentContactActiveAddressForPortal(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactActiveAddressForPortal_Result>("uspSelectStudentContactActiveAddressForPortal", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactCurrentAndSubmittedAddress_Result> uspSelectStudentContactCurrentAndSubmittedAddress(Nullable<int> studentID, Nullable<int> contactTypePL, Nullable<int> schoolYearPL, Nullable<int> currentContactAddressId)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var contactTypePLParameter = contactTypePL.HasValue ?
                new ObjectParameter("ContactTypePL", contactTypePL) :
                new ObjectParameter("ContactTypePL", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var currentContactAddressIdParameter = currentContactAddressId.HasValue ?
                new ObjectParameter("CurrentContactAddressId", currentContactAddressId) :
                new ObjectParameter("CurrentContactAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactCurrentAndSubmittedAddress_Result>("uspSelectStudentContactCurrentAndSubmittedAddress", studentIDParameter, contactTypePLParameter, schoolYearPLParameter, currentContactAddressIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactCurrentAndSubmittedPhone_Result> uspSelectStudentContactCurrentAndSubmittedPhone(Nullable<int> studentId, Nullable<int> phoneTypePL, Nullable<int> contactCurrentPhoneId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var phoneTypePLParameter = phoneTypePL.HasValue ?
                new ObjectParameter("PhoneTypePL", phoneTypePL) :
                new ObjectParameter("PhoneTypePL", typeof(int));
    
            var contactCurrentPhoneIdParameter = contactCurrentPhoneId.HasValue ?
                new ObjectParameter("ContactCurrentPhoneId", contactCurrentPhoneId) :
                new ObjectParameter("ContactCurrentPhoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactCurrentAndSubmittedPhone_Result>("uspSelectStudentContactCurrentAndSubmittedPhone", studentIdParameter, phoneTypePLParameter, contactCurrentPhoneIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactsByStudentID_Result> uspSelectStudentContactsByStudentID(Nullable<int> studentid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactsByStudentID_Result>("uspSelectStudentContactsByStudentID", studentidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactsDetailsByContactID_Result> uspSelectStudentContactsDetailsByContactID(Nullable<int> studentContactID)
        {
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactsDetailsByContactID_Result>("uspSelectStudentContactsDetailsByContactID", studentContactIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactsHistory_Result> uspSelectStudentContactsHistory(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactsHistory_Result>("uspSelectStudentContactsHistory", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentContactsInfo_Result> uspSelectStudentContactsInfo(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentContactsInfo_Result>("uspSelectStudentContactsInfo", applicationidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_Result> uspSelectStudentCourseHistoryandGradesForTranscript(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_Result>("uspSelectStudentCourseHistoryandGradesForTranscript", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_05252017_Result> uspSelectStudentCourseHistoryandGradesForTranscript_05252017(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_05252017_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_05252017", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_09282016_Result> uspSelectStudentCourseHistoryandGradesForTranscript_09282016(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_09282016_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_09282016", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_11082016_Result> uspSelectStudentCourseHistoryandGradesForTranscript_11082016(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_11082016_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_11082016", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_12192016_Result> uspSelectStudentCourseHistoryandGradesForTranscript_12192016(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_12192016_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_12192016", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_BKP_Result> uspSelectStudentCourseHistoryandGradesForTranscript_BKP(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_BKP_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_BKP", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript_Duplicate_Result> uspSelectStudentCourseHistoryandGradesForTranscript_Duplicate(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript_Duplicate_Result>("uspSelectStudentCourseHistoryandGradesForTranscript_Duplicate", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseHistoryandGradesForTranscript10202016_Result> uspSelectStudentCourseHistoryandGradesForTranscript10202016(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseHistoryandGradesForTranscript10202016_Result>("uspSelectStudentCourseHistoryandGradesForTranscript10202016", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourses_Result> uspSelectStudentCourses(Nullable<int> studentID, Nullable<int> schoolID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourses_Result>("uspSelectStudentCourses", studentIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCoursesForGPACalculation_Result> uspSelectStudentCoursesForGPACalculation(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCoursesForGPACalculation_Result>("uspSelectStudentCoursesForGPACalculation", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCourseStatusPL_Result> uspSelectStudentCourseStatusPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCourseStatusPL_Result>("uspSelectStudentCourseStatusPL");
        }
    
        public virtual ObjectResult<uspSelectStudentCoursesToDrop_Result> uspSelectStudentCoursesToDrop(Nullable<int> studentId, Nullable<int> schoolYearId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCoursesToDrop_Result>("uspSelectStudentCoursesToDrop", studentIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCTEProgramStatusPL_Result> uspSelectStudentCTEProgramStatusPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCTEProgramStatusPL_Result>("uspSelectStudentCTEProgramStatusPL");
        }
    
        public virtual ObjectResult<uspSelectStudentCurrentAndHistoricalGrades_Result> uspSelectStudentCurrentAndHistoricalGrades(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCurrentAndHistoricalGrades_Result>("uspSelectStudentCurrentAndHistoricalGrades", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCurrentAndHistoricalGrades_EMIS_Result> uspSelectStudentCurrentAndHistoricalGrades_EMIS(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCurrentAndHistoricalGrades_EMIS_Result>("uspSelectStudentCurrentAndHistoricalGrades_EMIS", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCurrentAndSubmittedAddress_Result> uspSelectStudentCurrentAndSubmittedAddress(Nullable<int> studentId, Nullable<int> addressTypePL, Nullable<int> schoolYearPL, Nullable<int> currentAddressId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var addressTypePLParameter = addressTypePL.HasValue ?
                new ObjectParameter("AddressTypePL", addressTypePL) :
                new ObjectParameter("AddressTypePL", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var currentAddressIdParameter = currentAddressId.HasValue ?
                new ObjectParameter("CurrentAddressId", currentAddressId) :
                new ObjectParameter("CurrentAddressId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCurrentAndSubmittedAddress_Result>("uspSelectStudentCurrentAndSubmittedAddress", studentIdParameter, addressTypePLParameter, schoolYearPLParameter, currentAddressIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentCurrentAndSubmittedPhone_Result> uspSelectStudentCurrentAndSubmittedPhone(Nullable<int> studentId, Nullable<int> phoneTypePL, Nullable<int> schoolYearPL, Nullable<int> currentPhoneId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var phoneTypePLParameter = phoneTypePL.HasValue ?
                new ObjectParameter("PhoneTypePL", phoneTypePL) :
                new ObjectParameter("PhoneTypePL", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var currentPhoneIdParameter = currentPhoneId.HasValue ?
                new ObjectParameter("CurrentPhoneId", currentPhoneId) :
                new ObjectParameter("CurrentPhoneId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentCurrentAndSubmittedPhone_Result>("uspSelectStudentCurrentAndSubmittedPhone", studentIdParameter, phoneTypePLParameter, schoolYearPLParameter, currentPhoneIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDailyAttendanceSummary_Result> uspSelectStudentDailyAttendanceSummary(Nullable<int> studentID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDailyAttendanceSummary_Result>("uspSelectStudentDailyAttendanceSummary", studentIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDemographicsForRC_Result> uspSelectStudentDemographicsForRC(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDemographicsForRC_Result>("uspSelectStudentDemographicsForRC", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDemographicsForReportCard_Result> uspSelectStudentDemographicsForReportCard(Nullable<int> studentID, Nullable<int> studentNameDisplay)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentNameDisplayParameter = studentNameDisplay.HasValue ?
                new ObjectParameter("StudentNameDisplay", studentNameDisplay) :
                new ObjectParameter("StudentNameDisplay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDemographicsForReportCard_Result>("uspSelectStudentDemographicsForReportCard", studentIDParameter, studentNameDisplayParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDemographicsForTranscript_Result> uspSelectStudentDemographicsForTranscript(Nullable<int> studentID, Nullable<int> studentNameDisplay)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentNameDisplayParameter = studentNameDisplay.HasValue ?
                new ObjectParameter("StudentNameDisplay", studentNameDisplay) :
                new ObjectParameter("StudentNameDisplay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDemographicsForTranscript_Result>("uspSelectStudentDemographicsForTranscript", studentIDParameter, studentNameDisplayParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDemographicsInfo_Result> uspSelectStudentDemographicsInfo(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDemographicsInfo_Result>("uspSelectStudentDemographicsInfo", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDetailsByStudentId_Result> uspSelectStudentDetailsByStudentId(Nullable<int> studentId, Nullable<System.DateTime> currentDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDetailsByStudentId_Result>("uspSelectStudentDetailsByStudentId", studentIdParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDetailsByStudentId1_Result> uspSelectStudentDetailsByStudentId1(Nullable<int> studentId, Nullable<System.DateTime> currentDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var currentDateParameter = currentDate.HasValue ?
                new ObjectParameter("CurrentDate", currentDate) :
                new ObjectParameter("CurrentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDetailsByStudentId1_Result>("uspSelectStudentDetailsByStudentId1", studentIdParameter, currentDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentDynamicContacts_Result> uspSelectStudentDynamicContacts(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentDynamicContacts_Result>("uspSelectStudentDynamicContacts", studentIDParameter);
        }
    
        public virtual ObjectResult<string> uspSelectStudentEmailByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspSelectStudentEmailByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentEndOfCourseExams_Result> uspSelectStudentEndOfCourseExams(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentEndOfCourseExams_Result>("uspSelectStudentEndOfCourseExams", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentEndOfCourseExams_05162017_Result> uspSelectStudentEndOfCourseExams_05162017(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentEndOfCourseExams_05162017_Result>("uspSelectStudentEndOfCourseExams_05162017", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentEnrollmentByYearDetails_Result> uspSelectStudentEnrollmentByYearDetails(Nullable<int> studentID, Nullable<int> disrtictID, Nullable<int> schoolYear)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var disrtictIDParameter = disrtictID.HasValue ?
                new ObjectParameter("DisrtictID", disrtictID) :
                new ObjectParameter("DisrtictID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentEnrollmentByYearDetails_Result>("uspSelectStudentEnrollmentByYearDetails", studentIDParameter, disrtictIDParameter, schoolYearParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentEnrollmentByYearDetailsBYEnrollmentYearID_Result> uspSelectStudentEnrollmentByYearDetailsBYEnrollmentYearID(Nullable<int> enrollmentByYearID)
        {
            var enrollmentByYearIDParameter = enrollmentByYearID.HasValue ?
                new ObjectParameter("EnrollmentByYearID", enrollmentByYearID) :
                new ObjectParameter("EnrollmentByYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentEnrollmentByYearDetailsBYEnrollmentYearID_Result>("uspSelectStudentEnrollmentByYearDetailsBYEnrollmentYearID", enrollmentByYearIDParameter);
        }
    
        public virtual int uspSelectStudentEnrollments(Nullable<int> studentid, Nullable<int> schoolid)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentEnrollments", studentidParameter, schoolidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentETRDisabilityCode_Result> uspSelectStudentETRDisabilityCode(Nullable<int> studentId, Nullable<int> studentIEPId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var studentIEPIdParameter = studentIEPId.HasValue ?
                new ObjectParameter("StudentIEPId", studentIEPId) :
                new ObjectParameter("StudentIEPId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentETRDisabilityCode_Result>("uspSelectStudentETRDisabilityCode", studentIdParameter, studentIEPIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentExcessiveHabitualAbsBySEHAID_Result> uspSelectStudentExcessiveHabitualAbsBySEHAID(Nullable<int> sEHAID)
        {
            var sEHAIDParameter = sEHAID.HasValue ?
                new ObjectParameter("SEHAID", sEHAID) :
                new ObjectParameter("SEHAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentExcessiveHabitualAbsBySEHAID_Result>("uspSelectStudentExcessiveHabitualAbsBySEHAID", sEHAIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentExcessiveHabitualAbsByStudentID_Result> uspSelectStudentExcessiveHabitualAbsByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentExcessiveHabitualAbsByStudentID_Result>("uspSelectStudentExcessiveHabitualAbsByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGPAForTranscript_Result> uspSelectStudentGPAForTranscript(Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGPAForTranscript_Result>("uspSelectStudentGPAForTranscript", studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGrades_Result> uspSelectStudentGrades(Nullable<int> studentId, string schoolYearName)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGrades_Result>("uspSelectStudentGrades", studentIdParameter, schoolYearNameParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradesForReportCard_Result> uspSelectStudentGradesForReportCard(Nullable<int> studentID, Nullable<int> schoolYearID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradesForReportCard_Result>("uspSelectStudentGradesForReportCard", studentIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradesForTranscript_Result> uspSelectStudentGradesForTranscript(Nullable<int> studentID, Nullable<int> schoolYearID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradesForTranscript_Result>("uspSelectStudentGradesForTranscript", studentIDParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradReqId_Result> uspSelectStudentGradReqId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradReqId_Result>("uspSelectStudentGradReqId", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradRequirementById_Result> uspSelectStudentGradRequirementById(Nullable<int> studentGradRequirementId)
        {
            var studentGradRequirementIdParameter = studentGradRequirementId.HasValue ?
                new ObjectParameter("StudentGradRequirementId", studentGradRequirementId) :
                new ObjectParameter("StudentGradRequirementId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradRequirementById_Result>("uspSelectStudentGradRequirementById", studentGradRequirementIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradRequirementDetailsByDateAndAssessmentType_Result> uspSelectStudentGradRequirementDetailsByDateAndAssessmentType(Nullable<int> studentGradRequirementId, Nullable<int> studentID, Nullable<System.DateTime> iEPDate, Nullable<int> assessmentTypePL)
        {
            var studentGradRequirementIdParameter = studentGradRequirementId.HasValue ?
                new ObjectParameter("StudentGradRequirementId", studentGradRequirementId) :
                new ObjectParameter("StudentGradRequirementId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var assessmentTypePLParameter = assessmentTypePL.HasValue ?
                new ObjectParameter("AssessmentTypePL", assessmentTypePL) :
                new ObjectParameter("AssessmentTypePL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradRequirementDetailsByDateAndAssessmentType_Result>("uspSelectStudentGradRequirementDetailsByDateAndAssessmentType", studentGradRequirementIdParameter, studentIDParameter, iEPDateParameter, assessmentTypePLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradRequirements_Result> uspSelectStudentGradRequirements(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradRequirements_Result>("uspSelectStudentGradRequirements", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentGradSummary_Result> uspSelectStudentGradSummary(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentGradSummary_Result>("uspSelectStudentGradSummary", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentHistoricalGradeByID_Result> uspSelectStudentHistoricalGradeByID(Nullable<int> studentGradeID)
        {
            var studentGradeIDParameter = studentGradeID.HasValue ?
                new ObjectParameter("StudentGradeID", studentGradeID) :
                new ObjectParameter("StudentGradeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentHistoricalGradeByID_Result>("uspSelectStudentHistoricalGradeByID", studentGradeIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentHistoricalGrades_Result> uspSelectStudentHistoricalGrades(Nullable<int> studentId, string schoolYearName)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentHistoricalGrades_Result>("uspSelectStudentHistoricalGrades", studentIdParameter, schoolYearNameParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentIDByPersonID_Result> uspSelectStudentIDByPersonID(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentIDByPersonID_Result>("uspSelectStudentIDByPersonID", personIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentIEPSummary_Result> uspSelectStudentIEPSummary(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentIEPSummary_Result>("uspSelectStudentIEPSummary", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentInfo_Result> uspSelectStudentInfo(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentInfo_Result>("uspSelectStudentInfo", applicationidParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentInterventionStaff_Result> uspSelectStudentInterventionStaff(Nullable<int> scheduleId)
        {
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentInterventionStaff_Result>("uspSelectStudentInterventionStaff", scheduleIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentListBySchool_Result> uspSelectStudentListBySchool(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentListBySchool_Result>("uspSelectStudentListBySchool", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentListBySchoolID_Result> uspSelectStudentListBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentListBySchoolID_Result>("uspSelectStudentListBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentListForTranscriptBySchoolID_Result> uspSelectStudentListForTranscriptBySchoolID(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentListForTranscriptBySchoolID_Result>("uspSelectStudentListForTranscriptBySchoolID", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentMoreInfo_Result> uspSelectStudentMoreInfo(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentMoreInfo_Result>("uspSelectStudentMoreInfo", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentMoreInfo_Backup_Result> uspSelectStudentMoreInfo_Backup(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentMoreInfo_Backup_Result>("uspSelectStudentMoreInfo_Backup", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearData_Result> uspSelectStudentNextYearData(Nullable<int> nextSchoolID, Nullable<int> counselorID, string gradeIDs, Nullable<int> schoolYearID, string studentIDS, string pullStatus)
        {
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var gradeIDsParameter = gradeIDs != null ?
                new ObjectParameter("GradeIDs", gradeIDs) :
                new ObjectParameter("GradeIDs", typeof(string));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var pullStatusParameter = pullStatus != null ?
                new ObjectParameter("PullStatus", pullStatus) :
                new ObjectParameter("PullStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearData_Result>("uspSelectStudentNextYearData", nextSchoolIDParameter, counselorIDParameter, gradeIDsParameter, schoolYearIDParameter, studentIDSParameter, pullStatusParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearData_BKP_Result> uspSelectStudentNextYearData_BKP(Nullable<int> nextSchoolID, Nullable<int> counselorID, string gradeIDs, Nullable<int> schoolYearID, string studentIDS, string pullStatus)
        {
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var gradeIDsParameter = gradeIDs != null ?
                new ObjectParameter("GradeIDs", gradeIDs) :
                new ObjectParameter("GradeIDs", typeof(string));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var pullStatusParameter = pullStatus != null ?
                new ObjectParameter("PullStatus", pullStatus) :
                new ObjectParameter("PullStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearData_BKP_Result>("uspSelectStudentNextYearData_BKP", nextSchoolIDParameter, counselorIDParameter, gradeIDsParameter, schoolYearIDParameter, studentIDSParameter, pullStatusParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearDataForEvolution_Result> uspSelectStudentNextYearDataForEvolution(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearDataForEvolution_Result>("uspSelectStudentNextYearDataForEvolution", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearDataForValidate_Result> uspSelectStudentNextYearDataForValidate(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearDataForValidate_Result>("uspSelectStudentNextYearDataForValidate", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearHomeRoomData_Result> uspSelectStudentNextYearHomeRoomData(Nullable<int> nextSchoolID, Nullable<int> counselorID, string gradeIDs, Nullable<int> schoolYearID, string studentIDS, string pullStatus)
        {
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var counselorIDParameter = counselorID.HasValue ?
                new ObjectParameter("CounselorID", counselorID) :
                new ObjectParameter("CounselorID", typeof(int));
    
            var gradeIDsParameter = gradeIDs != null ?
                new ObjectParameter("GradeIDs", gradeIDs) :
                new ObjectParameter("GradeIDs", typeof(string));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var pullStatusParameter = pullStatus != null ?
                new ObjectParameter("PullStatus", pullStatus) :
                new ObjectParameter("PullStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearHomeRoomData_Result>("uspSelectStudentNextYearHomeRoomData", nextSchoolIDParameter, counselorIDParameter, gradeIDsParameter, schoolYearIDParameter, studentIDSParameter, pullStatusParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearMassAddAP_Result> uspSelectStudentNextYearMassAddAP(Nullable<int> schoolID, string gradeIDs)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var gradeIDsParameter = gradeIDs != null ?
                new ObjectParameter("GradeIDs", gradeIDs) :
                new ObjectParameter("GradeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearMassAddAP_Result>("uspSelectStudentNextYearMassAddAP", schoolIDParameter, gradeIDsParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNextYearMissingData_Result> uspSelectStudentNextYearMissingData(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNextYearMissingData_Result>("uspSelectStudentNextYearMissingData", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNoteByNoteId_Result> uspSelectStudentNoteByNoteId(Nullable<int> studentNoteId)
        {
            var studentNoteIdParameter = studentNoteId.HasValue ?
                new ObjectParameter("StudentNoteId", studentNoteId) :
                new ObjectParameter("StudentNoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNoteByNoteId_Result>("uspSelectStudentNoteByNoteId", studentNoteIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNotesBySchoolID_Result> uspSelectStudentNotesBySchoolID(Nullable<int> schoolId, Nullable<int> schoolYearID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNotesBySchoolID_Result>("uspSelectStudentNotesBySchoolID", schoolIdParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNotesByStudentId_Result> uspSelectStudentNotesByStudentId(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNotesByStudentId_Result>("uspSelectStudentNotesByStudentId", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentNoteView_Result> uspSelectStudentNoteView(Nullable<int> studentNoteId)
        {
            var studentNoteIdParameter = studentNoteId.HasValue ?
                new ObjectParameter("StudentNoteId", studentNoteId) :
                new ObjectParameter("StudentNoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentNoteView_Result>("uspSelectStudentNoteView", studentNoteIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentOhioTest_Result> uspSelectStudentOhioTest(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentOhioTest_Result>("uspSelectStudentOhioTest", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentOhioTest_05262017_Result> uspSelectStudentOhioTest_05262017(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentOhioTest_05262017_Result>("uspSelectStudentOhioTest_05262017", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentOrientationDetails_Result> uspSelectStudentOrientationDetails(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentOrientationDetails_Result>("uspSelectStudentOrientationDetails", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentOrientationDetailsByOrientationID_Result> uspSelectStudentOrientationDetailsByOrientationID(Nullable<int> orientationscheduleid)
        {
            var orientationscheduleidParameter = orientationscheduleid.HasValue ?
                new ObjectParameter("orientationscheduleid", orientationscheduleid) :
                new ObjectParameter("orientationscheduleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentOrientationDetailsByOrientationID_Result>("uspSelectStudentOrientationDetailsByOrientationID", orientationscheduleidParameter);
        }
    
        public virtual int uspSelectStudentPhoneNumbers(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectStudentPhoneNumbers", idParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentPopulationPL_Result> uspSelectStudentPopulationPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentPopulationPL_Result>("uspSelectStudentPopulationPL");
        }
    
        public virtual ObjectResult<uspSelectStudentProgramsHistory_Result> uspSelectStudentProgramsHistory(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentProgramsHistory_Result>("uspSelectStudentProgramsHistory", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentRosterBySectionId_Result> uspSelectStudentRosterBySectionId(string schoolCourseNumber, string sectionNumber, Nullable<int> rosterByValue, Nullable<int> schoolCourseID, Nullable<int> schoolCourseSectionId, Nullable<int> schoolID, Nullable<int> schoolYearPL)
        {
            var schoolCourseNumberParameter = schoolCourseNumber != null ?
                new ObjectParameter("SchoolCourseNumber", schoolCourseNumber) :
                new ObjectParameter("SchoolCourseNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var rosterByValueParameter = rosterByValue.HasValue ?
                new ObjectParameter("RosterByValue", rosterByValue) :
                new ObjectParameter("RosterByValue", typeof(int));
    
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var schoolCourseSectionIdParameter = schoolCourseSectionId.HasValue ?
                new ObjectParameter("SchoolCourseSectionId", schoolCourseSectionId) :
                new ObjectParameter("SchoolCourseSectionId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentRosterBySectionId_Result>("uspSelectStudentRosterBySectionId", schoolCourseNumberParameter, sectionNumberParameter, rosterByValueParameter, schoolCourseIDParameter, schoolCourseSectionIdParameter, schoolIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentRosterForTeacherSchedule_Result> uspSelectStudentRosterForTeacherSchedule(Nullable<int> schoolCourseSectionID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentRosterForTeacherSchedule_Result>("uspSelectStudentRosterForTeacherSchedule", schoolCourseSectionIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentSAT_Result> uspSelectStudentSAT(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentSAT_Result>("uspSelectStudentSAT", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsByCourseForTimeEntry_Result> uspSelectStudentsByCourseForTimeEntry(Nullable<int> schoolCourseId, string courseNumber, Nullable<int> personID, Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<System.DateTime> selectedDate)
        {
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsByCourseForTimeEntry_Result>("uspSelectStudentsByCourseForTimeEntry", schoolCourseIdParameter, courseNumberParameter, personIDParameter, schoolIDParameter, schoolYearPLParameter, selectedDateParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsByHomeroomsOrByGradeLevels_Result> uspSelectStudentsByHomeroomsOrByGradeLevels(Nullable<int> schoolID, Nullable<int> schoolYearID, string studentIds, string homeroomTeacherIds, string gradeLevelIds, string councelorIds, string printAllORActiveOnly, Nullable<bool> sortByName, Nullable<bool> sortByZip, Nullable<bool> sortByHomeroom)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentIdsParameter = studentIds != null ?
                new ObjectParameter("StudentIds", studentIds) :
                new ObjectParameter("StudentIds", typeof(string));
    
            var homeroomTeacherIdsParameter = homeroomTeacherIds != null ?
                new ObjectParameter("HomeroomTeacherIds", homeroomTeacherIds) :
                new ObjectParameter("HomeroomTeacherIds", typeof(string));
    
            var gradeLevelIdsParameter = gradeLevelIds != null ?
                new ObjectParameter("GradeLevelIds", gradeLevelIds) :
                new ObjectParameter("GradeLevelIds", typeof(string));
    
            var councelorIdsParameter = councelorIds != null ?
                new ObjectParameter("CouncelorIds", councelorIds) :
                new ObjectParameter("CouncelorIds", typeof(string));
    
            var printAllORActiveOnlyParameter = printAllORActiveOnly != null ?
                new ObjectParameter("PrintAllORActiveOnly", printAllORActiveOnly) :
                new ObjectParameter("PrintAllORActiveOnly", typeof(string));
    
            var sortByNameParameter = sortByName.HasValue ?
                new ObjectParameter("SortByName", sortByName) :
                new ObjectParameter("SortByName", typeof(bool));
    
            var sortByZipParameter = sortByZip.HasValue ?
                new ObjectParameter("SortByZip", sortByZip) :
                new ObjectParameter("SortByZip", typeof(bool));
    
            var sortByHomeroomParameter = sortByHomeroom.HasValue ?
                new ObjectParameter("SortByHomeroom", sortByHomeroom) :
                new ObjectParameter("SortByHomeroom", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsByHomeroomsOrByGradeLevels_Result>("uspSelectStudentsByHomeroomsOrByGradeLevels", schoolIDParameter, schoolYearIDParameter, studentIdsParameter, homeroomTeacherIdsParameter, gradeLevelIdsParameter, councelorIdsParameter, printAllORActiveOnlyParameter, sortByNameParameter, sortByZipParameter, sortByHomeroomParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsByHomeRoomTeacher_Result> uspSelectStudentsByHomeRoomTeacher(Nullable<int> advisorID, Nullable<int> schoolID)
        {
            var advisorIDParameter = advisorID.HasValue ?
                new ObjectParameter("AdvisorID", advisorID) :
                new ObjectParameter("AdvisorID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsByHomeRoomTeacher_Result>("uspSelectStudentsByHomeRoomTeacher", advisorIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsBySchoolCourseSectionID_Result> uspSelectStudentsBySchoolCourseSectionID(Nullable<int> schoolCourseSectionID, Nullable<int> schoolID, Nullable<int> assignmentID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsBySchoolCourseSectionID_Result>("uspSelectStudentsBySchoolCourseSectionID", schoolCourseSectionIDParameter, schoolIDParameter, assignmentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsBySchoolId_Result> uspSelectStudentsBySchoolId(Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsBySchoolId_Result>("uspSelectStudentsBySchoolId", schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentSchedule_Result> uspSelectStudentSchedule(Nullable<int> studentId, Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentSchedule_Result>("uspSelectStudentSchedule", studentIdParameter, schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentScheduleForPortal_Result> uspSelectStudentScheduleForPortal(Nullable<int> studentId, Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentScheduleForPortal_Result>("uspSelectStudentScheduleForPortal", studentIdParameter, schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentSectionsBySchoolCourseID_Result> uspSelectStudentSectionsBySchoolCourseID(Nullable<int> schoolCourseID, Nullable<int> studentID)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentSectionsBySchoolCourseID_Result>("uspSelectStudentSectionsBySchoolCourseID", schoolCourseIDParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsETRInformation_Result> uspSelectStudentsETRInformation(Nullable<int> studentsETRID)
        {
            var studentsETRIDParameter = studentsETRID.HasValue ?
                new ObjectParameter("StudentsETRID", studentsETRID) :
                new ObjectParameter("StudentsETRID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsETRInformation_Result>("uspSelectStudentsETRInformation", studentsETRIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsETRInformationByID_Result> uspSelectStudentsETRInformationByID(Nullable<int> informationId)
        {
            var informationIdParameter = informationId.HasValue ?
                new ObjectParameter("InformationId", informationId) :
                new ObjectParameter("InformationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsETRInformationByID_Result>("uspSelectStudentsETRInformationByID", informationIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsForGradeEntryBySectionID_Result> uspSelectStudentsForGradeEntryBySectionID(string courseNumber, Nullable<int> sectionID, Nullable<int> schoolYearPL)
        {
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsForGradeEntryBySectionID_Result>("uspSelectStudentsForGradeEntryBySectionID", courseNumberParameter, sectionIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsForHomeRoomAttendance_Result> uspSelectStudentsForHomeRoomAttendance(Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, Nullable<int> schoolYearID, Nullable<int> schoolID)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsForHomeRoomAttendance_Result>("uspSelectStudentsForHomeRoomAttendance", attendanceDateParameter, attendanceTakenByParameter, schoolYearIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsForPeriodAttendance_Result> uspSelectStudentsForPeriodAttendance(Nullable<int> schoolCourseSectionID, Nullable<System.DateTime> attendanceDate, Nullable<int> attendanceTakenBy, Nullable<int> schoolYearID)
        {
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsForPeriodAttendance_Result>("uspSelectStudentsForPeriodAttendance", schoolCourseSectionIDParameter, attendanceDateParameter, attendanceTakenByParameter, schoolYearIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsHavingStudentNote_Result> uspSelectStudentsHavingStudentNote(string studentIds, Nullable<System.DateTime> openDate, Nullable<int> categoryId, Nullable<int> subjectId, Nullable<int> methodId, Nullable<bool> followUp, string followUpDate, Nullable<int> staffId, string closedDate, string description)
        {
            var studentIdsParameter = studentIds != null ?
                new ObjectParameter("StudentIds", studentIds) :
                new ObjectParameter("StudentIds", typeof(string));
    
            var openDateParameter = openDate.HasValue ?
                new ObjectParameter("openDate", openDate) :
                new ObjectParameter("openDate", typeof(System.DateTime));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var methodIdParameter = methodId.HasValue ?
                new ObjectParameter("MethodId", methodId) :
                new ObjectParameter("MethodId", typeof(int));
    
            var followUpParameter = followUp.HasValue ?
                new ObjectParameter("FollowUp", followUp) :
                new ObjectParameter("FollowUp", typeof(bool));
    
            var followUpDateParameter = followUpDate != null ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(string));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var closedDateParameter = closedDate != null ?
                new ObjectParameter("ClosedDate", closedDate) :
                new ObjectParameter("ClosedDate", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsHavingStudentNote_Result>("uspSelectStudentsHavingStudentNote", studentIdsParameter, openDateParameter, categoryIdParameter, subjectIdParameter, methodIdParameter, followUpParameter, followUpDateParameter, staffIdParameter, closedDateParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsIEPInformation_Result> uspSelectStudentsIEPInformation(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsIEPInformation_Result>("uspSelectStudentsIEPInformation", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsIEPInformationByID_Result> uspSelectStudentsIEPInformationByID(Nullable<int> informationId)
        {
            var informationIdParameter = informationId.HasValue ?
                new ObjectParameter("InformationId", informationId) :
                new ObjectParameter("InformationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsIEPInformationByID_Result>("uspSelectStudentsIEPInformationByID", informationIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentSPEDGoals_Result> uspSelectStudentSPEDGoals(Nullable<int> studentID, Nullable<int> schoolYearPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentSPEDGoals_Result>("uspSelectStudentSPEDGoals", studentIDParameter, schoolYearPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentSPEDSummary_Result> uspSelectStudentSPEDSummary(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentSPEDSummary_Result>("uspSelectStudentSPEDSummary", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentsSortedListByHomeroomsOrByGradeLevelsOrStudentID_Result> uspSelectStudentsSortedListByHomeroomsOrByGradeLevelsOrStudentID(Nullable<int> schoolID, Nullable<int> schoolYearID, string studentIds, string homeroomTeacherIds, string gradeLevelIds, Nullable<bool> sortByName, Nullable<bool> sortByZip, Nullable<bool> sortByHomeroom, string counselorIDs, string status)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var studentIdsParameter = studentIds != null ?
                new ObjectParameter("StudentIds", studentIds) :
                new ObjectParameter("StudentIds", typeof(string));
    
            var homeroomTeacherIdsParameter = homeroomTeacherIds != null ?
                new ObjectParameter("HomeroomTeacherIds", homeroomTeacherIds) :
                new ObjectParameter("HomeroomTeacherIds", typeof(string));
    
            var gradeLevelIdsParameter = gradeLevelIds != null ?
                new ObjectParameter("GradeLevelIds", gradeLevelIds) :
                new ObjectParameter("GradeLevelIds", typeof(string));
    
            var sortByNameParameter = sortByName.HasValue ?
                new ObjectParameter("SortByName", sortByName) :
                new ObjectParameter("SortByName", typeof(bool));
    
            var sortByZipParameter = sortByZip.HasValue ?
                new ObjectParameter("SortByZip", sortByZip) :
                new ObjectParameter("SortByZip", typeof(bool));
    
            var sortByHomeroomParameter = sortByHomeroom.HasValue ?
                new ObjectParameter("SortByHomeroom", sortByHomeroom) :
                new ObjectParameter("SortByHomeroom", typeof(bool));
    
            var counselorIDsParameter = counselorIDs != null ?
                new ObjectParameter("CounselorIDs", counselorIDs) :
                new ObjectParameter("CounselorIDs", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentsSortedListByHomeroomsOrByGradeLevelsOrStudentID_Result>("uspSelectStudentsSortedListByHomeroomsOrByGradeLevelsOrStudentID", schoolIDParameter, schoolYearIDParameter, studentIdsParameter, homeroomTeacherIdsParameter, gradeLevelIdsParameter, sortByNameParameter, sortByZipParameter, sortByHomeroomParameter, counselorIDsParameter, statusParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentStatusInformation_Result> uspSelectStudentStatusInformation(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentStatusInformation_Result>("uspSelectStudentStatusInformation", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentTime_Result> uspSelectStudentTime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTime_Result>("uspSelectStudentTime");
        }
    
        public virtual ObjectResult<uspSelectStudentTimeEntriesByActivity_Result> uspSelectStudentTimeEntriesByActivity(Nullable<int> studentID, Nullable<int> activityPL)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var activityPLParameter = activityPL.HasValue ?
                new ObjectParameter("ActivityPL", activityPL) :
                new ObjectParameter("ActivityPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTimeEntriesByActivity_Result>("uspSelectStudentTimeEntriesByActivity", studentIDParameter, activityPLParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentTimesForApproval_Result> uspSelectStudentTimesForApproval(Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<int> personID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTimesForApproval_Result>("uspSelectStudentTimesForApproval", schoolIdParameter, schoolYearIdParameter, personIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentTimesForApprovalByStudentId_Result> uspSelectStudentTimesForApprovalByStudentId(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTimesForApprovalByStudentId_Result>("uspSelectStudentTimesForApprovalByStudentId", schoolIdParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentTimesForApprovalByStudentId_04062018_Result> uspSelectStudentTimesForApprovalByStudentId_04062018(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTimesForApprovalByStudentId_04062018_Result>("uspSelectStudentTimesForApprovalByStudentId_04062018", schoolIdParameter, studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectStudentTimeSummary_Result> uspSelectStudentTimeSummary(Nullable<int> studentId, Nullable<int> schoolId, Nullable<int> schoolCourseId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolCourseIdParameter = schoolCourseId.HasValue ?
                new ObjectParameter("SchoolCourseId", schoolCourseId) :
                new ObjectParameter("SchoolCourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectStudentTimeSummary_Result>("uspSelectStudentTimeSummary", studentIdParameter, schoolIdParameter, schoolCourseIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSubjectAreasPL_Result> uspSelectSubjectAreasPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubjectAreasPL_Result>("uspSelectSubjectAreasPL");
        }
    
        public virtual ObjectResult<uspSelectSubjectsByAssessmentType_Result> uspSelectSubjectsByAssessmentType(Nullable<int> gradReqID, Nullable<int> assessmentType)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var assessmentTypeParameter = assessmentType.HasValue ?
                new ObjectParameter("AssessmentType", assessmentType) :
                new ObjectParameter("AssessmentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubjectsByAssessmentType_Result>("uspSelectSubjectsByAssessmentType", gradReqIDParameter, assessmentTypeParameter);
        }
    
        public virtual int uspSelectSubjectsByStandardSetIdForAssignment(Nullable<int> standardSetId)
        {
            var standardSetIdParameter = standardSetId.HasValue ?
                new ObjectParameter("StandardSetId", standardSetId) :
                new ObjectParameter("StandardSetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSubjectsByStandardSetIdForAssignment", standardSetIdParameter);
        }
    
        public virtual ObjectResult<uspSelectSubjectsFromPickListPL_Result> uspSelectSubjectsFromPickListPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubjectsFromPickListPL_Result>("uspSelectSubjectsFromPickListPL");
        }
    
        public virtual ObjectResult<uspSelectSubjectsPL_Result> uspSelectSubjectsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubjectsPL_Result>("uspSelectSubjectsPL");
        }
    
        public virtual ObjectResult<uspSelectSubLevelMenu_Result> uspSelectSubLevelMenu(Nullable<int> parentMenuID)
        {
            var parentMenuIDParameter = parentMenuID.HasValue ?
                new ObjectParameter("ParentMenuID", parentMenuID) :
                new ObjectParameter("ParentMenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubLevelMenu_Result>("uspSelectSubLevelMenu", parentMenuIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSubLevelMenuByRole_Result> uspSelectSubLevelMenuByRole(Nullable<int> parentMenuID, Nullable<int> roleid)
        {
            var parentMenuIDParameter = parentMenuID.HasValue ?
                new ObjectParameter("ParentMenuID", parentMenuID) :
                new ObjectParameter("ParentMenuID", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubLevelMenuByRole_Result>("uspSelectSubLevelMenuByRole", parentMenuIDParameter, roleidParameter);
        }
    
        public virtual ObjectResult<uspSelectSubLevelMenusByLevel_Result> uspSelectSubLevelMenusByLevel(Nullable<int> parentMenuID)
        {
            var parentMenuIDParameter = parentMenuID.HasValue ?
                new ObjectParameter("ParentMenuID", parentMenuID) :
                new ObjectParameter("ParentMenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubLevelMenusByLevel_Result>("uspSelectSubLevelMenusByLevel", parentMenuIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSubLevelMenusByLevelUserIDRoleID_Result> uspSelectSubLevelMenusByLevelUserIDRoleID(Nullable<int> parentMenuID, Nullable<int> roleid, Nullable<int> personid)
        {
            var parentMenuIDParameter = parentMenuID.HasValue ?
                new ObjectParameter("ParentMenuID", parentMenuID) :
                new ObjectParameter("ParentMenuID", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSubLevelMenusByLevelUserIDRoleID_Result>("uspSelectSubLevelMenusByLevelUserIDRoleID", parentMenuIDParameter, roleidParameter, personidParameter);
        }
    
        public virtual int uspSelectSubMenus(string mainmenuid)
        {
            var mainmenuidParameter = mainmenuid != null ?
                new ObjectParameter("mainmenuid", mainmenuid) :
                new ObjectParameter("mainmenuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSubMenus", mainmenuidParameter);
        }
    
        public virtual int uspSelectSubMenusByMenuID(Nullable<int> menuid, Nullable<int> userroleid)
        {
            var menuidParameter = menuid.HasValue ?
                new ObjectParameter("menuid", menuid) :
                new ObjectParameter("menuid", typeof(int));
    
            var userroleidParameter = userroleid.HasValue ?
                new ObjectParameter("userroleid", userroleid) :
                new ObjectParameter("userroleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectSubMenusByMenuID", menuidParameter, userroleidParameter);
        }
    
        public virtual ObjectResult<uspSelectSuffixListPL_Result> uspSelectSuffixListPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSuffixListPL_Result>("uspSelectSuffixListPL");
        }
    
        public virtual ObjectResult<uspSelectSuggestedMinimumGradeLevelsPL_Result> uspSelectSuggestedMinimumGradeLevelsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSuggestedMinimumGradeLevelsPL_Result>("uspSelectSuggestedMinimumGradeLevelsPL");
        }
    
        public virtual ObjectResult<uspSelectSurveyQuestions_Result> uspSelectSurveyQuestions(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSurveyQuestions_Result>("uspSelectSurveyQuestions", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectSystemSchools_Result> uspSelectSystemSchools()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSystemSchools_Result>("uspSelectSystemSchools");
        }
    
        public virtual ObjectResult<uspSelectSystemStaffDetails_Result> uspSelectSystemStaffDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSystemStaffDetails_Result>("uspSelectSystemStaffDetails");
        }
    
        public virtual ObjectResult<uspSelectSystemStaffDetailsbyStaffID_Result> uspSelectSystemStaffDetailsbyStaffID(Nullable<int> staffID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectSystemStaffDetailsbyStaffID_Result>("uspSelectSystemStaffDetailsbyStaffID", staffIDParameter);
        }
    
        public virtual int uspSelectTabsList(string submenuitemid)
        {
            var submenuitemidParameter = submenuitemid != null ?
                new ObjectParameter("submenuitemid", submenuitemid) :
                new ObjectParameter("submenuitemid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectTabsList", submenuitemidParameter);
        }
    
        public virtual ObjectResult<uspSelectTeacherBySchoolID_Result> uspSelectTeacherBySchoolID(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTeacherBySchoolID_Result>("uspSelectTeacherBySchoolID", schoolIdParameter);
        }
    
        public virtual int uspSelectTeachersAttendanceStatus(Nullable<int> schoolId, Nullable<System.DateTime> attendanceDate)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectTeachersAttendanceStatus", schoolIdParameter, attendanceDateParameter);
        }
    
        public virtual int uspSelectTeachersAttendanceStatusTest(Nullable<int> schoolId, Nullable<System.DateTime> attendanceDate)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectTeachersAttendanceStatusTest", schoolIdParameter, attendanceDateParameter);
        }
    
        public virtual ObjectResult<uspSelectTeacherSchedule_Result> uspSelectTeacherSchedule(Nullable<int> staffID, Nullable<int> schoolID)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTeacherSchedule_Result>("uspSelectTeacherSchedule", staffIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectTeacherStudentsAttendance_Result> uspSelectTeacherStudentsAttendance(Nullable<System.DateTime> attendanceDate, Nullable<int> teacherID, Nullable<int> schoolYearID, Nullable<int> schoolID)
        {
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTeacherStudentsAttendance_Result>("uspSelectTeacherStudentsAttendance", attendanceDateParameter, teacherIDParameter, schoolYearIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectTermsPL_Result> uspSelectTermsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTermsPL_Result>("uspSelectTermsPL");
        }
    
        public virtual ObjectResult<uspSelectTranscript_Result> uspSelectTranscript(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTranscript_Result>("uspSelectTranscript", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectTransferOfRightsByStudentID_Result> uspSelectTransferOfRightsByStudentID(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTransferOfRightsByStudentID_Result>("uspSelectTransferOfRightsByStudentID", studentIdParameter);
        }
    
        public virtual ObjectResult<uspSelecttStudentAlertsTextByStudentID_Result> uspSelecttStudentAlertsTextByStudentID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelecttStudentAlertsTextByStudentID_Result>("uspSelecttStudentAlertsTextByStudentID", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectTuitionStatusTypesPL_Result> uspSelectTuitionStatusTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTuitionStatusTypesPL_Result>("uspSelectTuitionStatusTypesPL");
        }
    
        public virtual ObjectResult<uspSelectTypeOfAccommodationPL_Result> uspSelectTypeOfAccommodationPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTypeOfAccommodationPL_Result>("uspSelectTypeOfAccommodationPL");
        }
    
        public virtual ObjectResult<uspSelectTypeOfTermsPL_Result> uspSelectTypeOfTermsPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTypeOfTermsPL_Result>("uspSelectTypeOfTermsPL");
        }
    
        public virtual ObjectResult<uspSelectTypesOfHoursPL_Result> uspSelectTypesOfHoursPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectTypesOfHoursPL_Result>("uspSelectTypesOfHoursPL");
        }
    
        public virtual ObjectResult<uspSelectUnaccompaniedYouthTypesPL_Result> uspSelectUnaccompaniedYouthTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUnaccompaniedYouthTypesPL_Result>("uspSelectUnaccompaniedYouthTypesPL");
        }
    
        public virtual ObjectResult<uspSelectUnAssignedSectionsByStudentId_Result> uspSelectUnAssignedSectionsByStudentId(Nullable<int> studentId, Nullable<int> schoolId, Nullable<int> schoolYearId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUnAssignedSectionsByStudentId_Result>("uspSelectUnAssignedSectionsByStudentId", studentIdParameter, schoolIdParameter, schoolYearIdParameter);
        }
    
        public virtual ObjectResult<uspSelectUserIDByEmailAndSecurityQuestions_Result> uspSelectUserIDByEmailAndSecurityQuestions(Nullable<int> sQ1PL, Nullable<int> sQ2PL, string sQ1A, string sQ2A, string email)
        {
            var sQ1PLParameter = sQ1PL.HasValue ?
                new ObjectParameter("SQ1PL", sQ1PL) :
                new ObjectParameter("SQ1PL", typeof(int));
    
            var sQ2PLParameter = sQ2PL.HasValue ?
                new ObjectParameter("SQ2PL", sQ2PL) :
                new ObjectParameter("SQ2PL", typeof(int));
    
            var sQ1AParameter = sQ1A != null ?
                new ObjectParameter("SQ1A", sQ1A) :
                new ObjectParameter("SQ1A", typeof(string));
    
            var sQ2AParameter = sQ2A != null ?
                new ObjectParameter("SQ2A", sQ2A) :
                new ObjectParameter("SQ2A", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUserIDByEmailAndSecurityQuestions_Result>("uspSelectUserIDByEmailAndSecurityQuestions", sQ1PLParameter, sQ2PLParameter, sQ1AParameter, sQ2AParameter, emailParameter);
        }
    
        public virtual ObjectResult<uspSelectUserPrivilegesByUserID_Result> uspSelectUserPrivilegesByUserID(Nullable<int> personid, Nullable<int> menuid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var menuidParameter = menuid.HasValue ?
                new ObjectParameter("menuid", menuid) :
                new ObjectParameter("menuid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUserPrivilegesByUserID_Result>("uspSelectUserPrivilegesByUserID", personidParameter, menuidParameter);
        }
    
        public virtual ObjectResult<uspSelectUserRoles_Result> uspSelectUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUserRoles_Result>("uspSelectUserRoles");
        }
    
        public virtual ObjectResult<uspSelectUsersByDistIDSchoolID_Result> uspSelectUsersByDistIDSchoolID(Nullable<int> distID, Nullable<int> schoolID)
        {
            var distIDParameter = distID.HasValue ?
                new ObjectParameter("DistID", distID) :
                new ObjectParameter("DistID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUsersByDistIDSchoolID_Result>("uspSelectUsersByDistIDSchoolID", distIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectUsersByRole_Result> uspSelectUsersByRole(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUsersByRole_Result>("uspSelectUsersByRole", roleidParameter);
        }
    
        public virtual ObjectResult<uspSelectUsersByRoleID_Result> uspSelectUsersByRoleID(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectUsersByRoleID_Result>("uspSelectUsersByRoleID", roleIdParameter);
        }
    
        public virtual ObjectResult<uspSelectVictimOffenderReporterTypesPL_Result> uspSelectVictimOffenderReporterTypesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectVictimOffenderReporterTypesPL_Result>("uspSelectVictimOffenderReporterTypesPL");
        }
    
        public virtual int uspSelectVictimsByDisciplineIncidentID(Nullable<int> disciplineincidentid)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectVictimsByDisciplineIncidentID", disciplineincidentidParameter);
        }
    
        public virtual ObjectResult<uspSelectViewMessageDetailsByID_Result> uspSelectViewMessageDetailsByID(Nullable<int> bulletinID)
        {
            var bulletinIDParameter = bulletinID.HasValue ?
                new ObjectParameter("BulletinID", bulletinID) :
                new ObjectParameter("BulletinID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectViewMessageDetailsByID_Result>("uspSelectViewMessageDetailsByID", bulletinIDParameter);
        }
    
        public virtual int uspSelectWithdrawlCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSelectWithdrawlCodes");
        }
    
        public virtual ObjectResult<uspSelectWithdrawlCodesPL_Result> uspSelectWithdrawlCodesPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectWithdrawlCodesPL_Result>("uspSelectWithdrawlCodesPL");
        }
    
        public virtual ObjectResult<uspSelectWithdrawlDetailsByWithdrawlID_Result> uspSelectWithdrawlDetailsByWithdrawlID(Nullable<int> withdrawlID)
        {
            var withdrawlIDParameter = withdrawlID.HasValue ?
                new ObjectParameter("WithdrawlID", withdrawlID) :
                new ObjectParameter("WithdrawlID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectWithdrawlDetailsByWithdrawlID_Result>("uspSelectWithdrawlDetailsByWithdrawlID", withdrawlIDParameter);
        }
    
        public virtual ObjectResult<uspSelectWithdrawls_Result> uspSelectWithdrawls(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectWithdrawls_Result>("uspSelectWithdrawls", studentIDParameter);
        }
    
        public virtual ObjectResult<uspSelectWithdrawlStudents_Result> uspSelectWithdrawlStudents(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectWithdrawlStudents_Result>("uspSelectWithdrawlStudents", schoolIDParameter);
        }
    
        public virtual ObjectResult<uspSelectYearPL_Result> uspSelectYearPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectYearPL_Result>("uspSelectYearPL");
        }
    
        public virtual ObjectResult<uspSelectYTDDetailsByStudentId_Result> uspSelectYTDDetailsByStudentId(Nullable<int> schoolId, Nullable<int> studentID)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSelectYTDDetailsByStudentId_Result>("uspSelectYTDDetailsByStudentId", schoolIdParameter, studentIDParameter);
        }
    
        public virtual int uspSPEDAccommodationsGetFromPicklist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSPEDAccommodationsGetFromPicklist");
        }
    
        public virtual ObjectResult<uspSPEDAccommodationsGetFromPicklistPL_Result> uspSPEDAccommodationsGetFromPicklistPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSPEDAccommodationsGetFromPicklistPL_Result>("uspSPEDAccommodationsGetFromPicklistPL");
        }
    
        public virtual ObjectResult<uspSPEDProgramsGetFromPicklistPL_Result> uspSPEDProgramsGetFromPicklistPL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSPEDProgramsGetFromPicklistPL_Result>("uspSPEDProgramsGetFromPicklistPL");
        }
    
        public virtual int uspStaffGet(Nullable<int> districtID, Nullable<int> schoolID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStaffGet", districtIDParameter, schoolIDParameter);
        }
    
        public virtual int uspStaffGetByDept(Nullable<int> districtID, Nullable<int> schoolID, Nullable<int> deptid)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("Deptid", deptid) :
                new ObjectParameter("Deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStaffGetByDept", districtIDParameter, schoolIDParameter, deptidParameter);
        }
    
        public virtual ObjectResult<uspStaffMappingsGet_Result> uspStaffMappingsGet(string districtID, string staffId, string schoolID)
        {
            var districtIDParameter = districtID != null ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(string));
    
            var staffIdParameter = staffId != null ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(string));
    
            var schoolIDParameter = schoolID != null ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStaffMappingsGet_Result>("uspStaffMappingsGet", districtIDParameter, staffIdParameter, schoolIDParameter);
        }
    
        public virtual int uspStandardSetsGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStandardSetsGetBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspStudentAlertInsert(Nullable<int> studentID, Nullable<int> lookupID, string message, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspStudentAlertInsert", studentIDParameter, lookupIDParameter, messageParameter, startDateParameter, endDateParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<uspStudentAlertSelect_Result> uspStudentAlertSelect(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStudentAlertSelect_Result>("uspStudentAlertSelect", studentIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspStudentAlertUpdate(Nullable<int> studentID, Nullable<int> lookupID, string message, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> studentAlertID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var lookupIDParameter = lookupID.HasValue ?
                new ObjectParameter("LookupID", lookupID) :
                new ObjectParameter("LookupID", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var studentAlertIDParameter = studentAlertID.HasValue ?
                new ObjectParameter("StudentAlertID", studentAlertID) :
                new ObjectParameter("StudentAlertID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspStudentAlertUpdate", studentIDParameter, lookupIDParameter, messageParameter, startDateParameter, endDateParameter, studentAlertIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<uspStudentApplicationForChangeStatus_Result> uspStudentApplicationForChangeStatus(Nullable<int> schoolid)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStudentApplicationForChangeStatus_Result>("uspStudentApplicationForChangeStatus", schoolidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspStudentCourseTransfer(Nullable<int> studentID, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> fromCourseSectionID, Nullable<System.DateTime> endDate, Nullable<int> toCourseSectionID, Nullable<System.DateTime> startDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var fromCourseSectionIDParameter = fromCourseSectionID.HasValue ?
                new ObjectParameter("FromCourseSectionID", fromCourseSectionID) :
                new ObjectParameter("FromCourseSectionID", typeof(int));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var toCourseSectionIDParameter = toCourseSectionID.HasValue ?
                new ObjectParameter("ToCourseSectionID", toCourseSectionID) :
                new ObjectParameter("ToCourseSectionID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspStudentCourseTransfer", studentIDParameter, schoolIDParameter, schoolYearIDParameter, fromCourseSectionIDParameter, endDateParameter, toCourseSectionIDParameter, startDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspStudentDropFromCourseSection(string valuesArray, Nullable<int> studentId, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStudentDropFromCourseSection", valuesArrayParameter, studentIdParameter, schoolIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual int uspStudentGradeLevelsGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStudentGradeLevelsGetBySchoolId", schoolIdParameter);
        }
    
        public virtual int uspStudentsAttendanceGetByClassId(Nullable<int> classId, Nullable<int> scheduledMonth, Nullable<int> scheduledYear)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var scheduledMonthParameter = scheduledMonth.HasValue ?
                new ObjectParameter("ScheduledMonth", scheduledMonth) :
                new ObjectParameter("ScheduledMonth", typeof(int));
    
            var scheduledYearParameter = scheduledYear.HasValue ?
                new ObjectParameter("ScheduledYear", scheduledYear) :
                new ObjectParameter("ScheduledYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStudentsAttendanceGetByClassId", classIdParameter, scheduledMonthParameter, scheduledYearParameter);
        }
    
        public virtual int uspStudentsGetByAssignmentIdForGradeBook(Nullable<int> classAssignmentId)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStudentsGetByAssignmentIdForGradeBook", classAssignmentIdParameter);
        }
    
        public virtual int uspStudentsPeriodsStaticGet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStudentsPeriodsStaticGet");
        }
    
        public virtual ObjectResult<uspStudentsWaitingForApprovalGet_Result> uspStudentsWaitingForApprovalGet(Nullable<int> schoolid, Nullable<int> applicationtype)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var applicationtypeParameter = applicationtype.HasValue ?
                new ObjectParameter("applicationtype", applicationtype) :
                new ObjectParameter("applicationtype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStudentsWaitingForApprovalGet_Result>("uspStudentsWaitingForApprovalGet", schoolidParameter, applicationtypeParameter);
        }
    
        public virtual int uspSubjectsGetBySchoolId(Nullable<int> schoolId)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSubjectsGetBySchoolId", schoolIdParameter);
        }
    
        public virtual ObjectResult<uspSystemSearch_Result> uspSystemSearch(string searchStr, string option1, string option2, string option3, string option4, Nullable<bool> isName, Nullable<bool> isAdds, Nullable<bool> isPhone, Nullable<int> personID)
        {
            var searchStrParameter = searchStr != null ?
                new ObjectParameter("SearchStr", searchStr) :
                new ObjectParameter("SearchStr", typeof(string));
    
            var option1Parameter = option1 != null ?
                new ObjectParameter("Option1", option1) :
                new ObjectParameter("Option1", typeof(string));
    
            var option2Parameter = option2 != null ?
                new ObjectParameter("Option2", option2) :
                new ObjectParameter("Option2", typeof(string));
    
            var option3Parameter = option3 != null ?
                new ObjectParameter("Option3", option3) :
                new ObjectParameter("Option3", typeof(string));
    
            var option4Parameter = option4 != null ?
                new ObjectParameter("Option4", option4) :
                new ObjectParameter("Option4", typeof(string));
    
            var isNameParameter = isName.HasValue ?
                new ObjectParameter("IsName", isName) :
                new ObjectParameter("IsName", typeof(bool));
    
            var isAddsParameter = isAdds.HasValue ?
                new ObjectParameter("IsAdds", isAdds) :
                new ObjectParameter("IsAdds", typeof(bool));
    
            var isPhoneParameter = isPhone.HasValue ?
                new ObjectParameter("IsPhone", isPhone) :
                new ObjectParameter("IsPhone", typeof(bool));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspSystemSearch_Result>("uspSystemSearch", searchStrParameter, option1Parameter, option2Parameter, option3Parameter, option4Parameter, isNameParameter, isAddsParameter, isPhoneParameter, personIDParameter);
        }
    
        public virtual int uspTeacherClassesGet(Nullable<int> teacherId, Nullable<int> gradingPeriodId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var gradingPeriodIdParameter = gradingPeriodId.HasValue ?
                new ObjectParameter("GradingPeriodId", gradingPeriodId) :
                new ObjectParameter("GradingPeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTeacherClassesGet", teacherIdParameter, gradingPeriodIdParameter);
        }
    
        public virtual int uspTeacherClassesGetByTeacherId(Nullable<int> teacherID, Nullable<int> gradePeriodId)
        {
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTeacherClassesGetByTeacherId", teacherIDParameter, gradePeriodIdParameter);
        }
    
        public virtual int uspTeacherCoursesGet(Nullable<int> teacherId, Nullable<int> classId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspTeacherCoursesGet", teacherIdParameter, classIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateApplicationAprove(Nullable<int> applicationid, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateApplicationAprove", applicationidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateApplicationDNDStatus(Nullable<int> studentApplicationID, Nullable<bool> doNotDelete, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            var doNotDeleteParameter = doNotDelete.HasValue ?
                new ObjectParameter("DoNotDelete", doNotDelete) :
                new ObjectParameter("DoNotDelete", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateApplicationDNDStatus", studentApplicationIDParameter, doNotDeleteParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateApplicationReject(Nullable<int> applicationid)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateApplicationReject", applicationidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateApplicationStatusToPending(Nullable<int> studentApplicationID)
        {
            var studentApplicationIDParameter = studentApplicationID.HasValue ?
                new ObjectParameter("StudentApplicationID", studentApplicationID) :
                new ObjectParameter("StudentApplicationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateApplicationStatusToPending", studentApplicationIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateAssignment(Nullable<int> assignmentID, string assignmentName, Nullable<int> categoryPL, Nullable<decimal> maxPoints, Nullable<System.DateTime> assignedDate, Nullable<System.DateTime> dueDate, Nullable<bool> missingGradeCount, Nullable<decimal> assignmentWeight, Nullable<bool> isIncludeInFinalGrade, Nullable<int> schoolCourseSectionID, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<bool> hasAttachment, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var assignmentIDParameter = assignmentID.HasValue ?
                new ObjectParameter("AssignmentID", assignmentID) :
                new ObjectParameter("AssignmentID", typeof(int));
    
            var assignmentNameParameter = assignmentName != null ?
                new ObjectParameter("AssignmentName", assignmentName) :
                new ObjectParameter("AssignmentName", typeof(string));
    
            var categoryPLParameter = categoryPL.HasValue ?
                new ObjectParameter("CategoryPL", categoryPL) :
                new ObjectParameter("CategoryPL", typeof(int));
    
            var maxPointsParameter = maxPoints.HasValue ?
                new ObjectParameter("MaxPoints", maxPoints) :
                new ObjectParameter("MaxPoints", typeof(decimal));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var missingGradeCountParameter = missingGradeCount.HasValue ?
                new ObjectParameter("MissingGradeCount", missingGradeCount) :
                new ObjectParameter("MissingGradeCount", typeof(bool));
    
            var assignmentWeightParameter = assignmentWeight.HasValue ?
                new ObjectParameter("AssignmentWeight", assignmentWeight) :
                new ObjectParameter("AssignmentWeight", typeof(decimal));
    
            var isIncludeInFinalGradeParameter = isIncludeInFinalGrade.HasValue ?
                new ObjectParameter("IsIncludeInFinalGrade", isIncludeInFinalGrade) :
                new ObjectParameter("IsIncludeInFinalGrade", typeof(bool));
    
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var hasAttachmentParameter = hasAttachment.HasValue ?
                new ObjectParameter("HasAttachment", hasAttachment) :
                new ObjectParameter("HasAttachment", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateAssignment", assignmentIDParameter, assignmentNameParameter, categoryPLParameter, maxPointsParameter, assignedDateParameter, dueDateParameter, missingGradeCountParameter, assignmentWeightParameter, isIncludeInFinalGradeParameter, schoolCourseSectionIDParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, hasAttachmentParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateAssignmentDetails(Nullable<int> assignmentId, string assignmentName, string assignedDate, string dueDate, Nullable<int> categoryId, Nullable<int> gradeMethodId, Nullable<decimal> maxPoints, Nullable<decimal> multiplier, Nullable<bool> includeInGradeCalculation)
        {
            var assignmentIdParameter = assignmentId.HasValue ?
                new ObjectParameter("AssignmentId", assignmentId) :
                new ObjectParameter("AssignmentId", typeof(int));
    
            var assignmentNameParameter = assignmentName != null ?
                new ObjectParameter("AssignmentName", assignmentName) :
                new ObjectParameter("AssignmentName", typeof(string));
    
            var assignedDateParameter = assignedDate != null ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(string));
    
            var dueDateParameter = dueDate != null ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var gradeMethodIdParameter = gradeMethodId.HasValue ?
                new ObjectParameter("GradeMethodId", gradeMethodId) :
                new ObjectParameter("GradeMethodId", typeof(int));
    
            var maxPointsParameter = maxPoints.HasValue ?
                new ObjectParameter("MaxPoints", maxPoints) :
                new ObjectParameter("MaxPoints", typeof(decimal));
    
            var multiplierParameter = multiplier.HasValue ?
                new ObjectParameter("Multiplier", multiplier) :
                new ObjectParameter("Multiplier", typeof(decimal));
    
            var includeInGradeCalculationParameter = includeInGradeCalculation.HasValue ?
                new ObjectParameter("IncludeInGradeCalculation", includeInGradeCalculation) :
                new ObjectParameter("IncludeInGradeCalculation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAssignmentDetails", assignmentIdParameter, assignmentNameParameter, assignedDateParameter, dueDateParameter, categoryIdParameter, gradeMethodIdParameter, maxPointsParameter, multiplierParameter, includeInGradeCalculationParameter);
        }
    
        public virtual int uspUpdateAssignmentTopicWeight(Nullable<int> classAssignmentId, Nullable<int> topicId, Nullable<double> weight)
        {
            var classAssignmentIdParameter = classAssignmentId.HasValue ?
                new ObjectParameter("ClassAssignmentId", classAssignmentId) :
                new ObjectParameter("ClassAssignmentId", typeof(int));
    
            var topicIdParameter = topicId.HasValue ?
                new ObjectParameter("TopicId", topicId) :
                new ObjectParameter("TopicId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAssignmentTopicWeight", classAssignmentIdParameter, topicIdParameter, weightParameter);
        }
    
        public virtual int uspUpdateAssociatedIncidents(Nullable<int> disciplineincidentid, Nullable<int> associatedincidentid1, Nullable<int> associatedincidentid2, Nullable<int> associatedincidentid3, Nullable<int> associatedincidentid4, Nullable<int> associatedincidentid5, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var associatedincidentid1Parameter = associatedincidentid1.HasValue ?
                new ObjectParameter("associatedincidentid1", associatedincidentid1) :
                new ObjectParameter("associatedincidentid1", typeof(int));
    
            var associatedincidentid2Parameter = associatedincidentid2.HasValue ?
                new ObjectParameter("associatedincidentid2", associatedincidentid2) :
                new ObjectParameter("associatedincidentid2", typeof(int));
    
            var associatedincidentid3Parameter = associatedincidentid3.HasValue ?
                new ObjectParameter("associatedincidentid3", associatedincidentid3) :
                new ObjectParameter("associatedincidentid3", typeof(int));
    
            var associatedincidentid4Parameter = associatedincidentid4.HasValue ?
                new ObjectParameter("associatedincidentid4", associatedincidentid4) :
                new ObjectParameter("associatedincidentid4", typeof(int));
    
            var associatedincidentid5Parameter = associatedincidentid5.HasValue ?
                new ObjectParameter("associatedincidentid5", associatedincidentid5) :
                new ObjectParameter("associatedincidentid5", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAssociatedIncidents", disciplineincidentidParameter, associatedincidentid1Parameter, associatedincidentid2Parameter, associatedincidentid3Parameter, associatedincidentid4Parameter, associatedincidentid5Parameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateAttendancePatterns(string patternIds, string valuesArray, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdsParameter = patternIds != null ?
                new ObjectParameter("PatternIds", patternIds) :
                new ObjectParameter("PatternIds", typeof(string));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAttendancePatterns", patternIdsParameter, valuesArrayParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateBellScheduleInfo(Nullable<int> bellScheduleID, string bellScheduleName, string bellScheduleDescription, Nullable<int> schoolId, Nullable<int> schoolYearId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string grades, string days, string perioddetails, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var bellScheduleIDParameter = bellScheduleID.HasValue ?
                new ObjectParameter("BellScheduleID", bellScheduleID) :
                new ObjectParameter("BellScheduleID", typeof(int));
    
            var bellScheduleNameParameter = bellScheduleName != null ?
                new ObjectParameter("BellScheduleName", bellScheduleName) :
                new ObjectParameter("BellScheduleName", typeof(string));
    
            var bellScheduleDescriptionParameter = bellScheduleDescription != null ?
                new ObjectParameter("BellScheduleDescription", bellScheduleDescription) :
                new ObjectParameter("BellScheduleDescription", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var gradesParameter = grades != null ?
                new ObjectParameter("Grades", grades) :
                new ObjectParameter("Grades", typeof(string));
    
            var daysParameter = days != null ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(string));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateBellScheduleInfo", bellScheduleIDParameter, bellScheduleNameParameter, bellScheduleDescriptionParameter, schoolIdParameter, schoolYearIdParameter, startDateParameter, endDateParameter, gradesParameter, daysParameter, perioddetailsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateBuildingDetails(Nullable<int> buildingid, string buildingname, string buidlingirn, string streetnumber, string strretname, string streettype, string trailingdirection, string leadingdreiction, string zipcode, string city, string state, string country, string contactperson, string contactemail, string contactphone, string contactphonetype, string contactfax, Nullable<int> numberoffloors, Nullable<int> numberofrooms, string longitudelatitude, Nullable<bool> istestcenterlocation, Nullable<bool> isactive)
        {
            var buildingidParameter = buildingid.HasValue ?
                new ObjectParameter("buildingid", buildingid) :
                new ObjectParameter("buildingid", typeof(int));
    
            var buildingnameParameter = buildingname != null ?
                new ObjectParameter("buildingname", buildingname) :
                new ObjectParameter("buildingname", typeof(string));
    
            var buidlingirnParameter = buidlingirn != null ?
                new ObjectParameter("buidlingirn", buidlingirn) :
                new ObjectParameter("buidlingirn", typeof(string));
    
            var streetnumberParameter = streetnumber != null ?
                new ObjectParameter("streetnumber", streetnumber) :
                new ObjectParameter("streetnumber", typeof(string));
    
            var strretnameParameter = strretname != null ?
                new ObjectParameter("strretname", strretname) :
                new ObjectParameter("strretname", typeof(string));
    
            var streettypeParameter = streettype != null ?
                new ObjectParameter("streettype", streettype) :
                new ObjectParameter("streettype", typeof(string));
    
            var trailingdirectionParameter = trailingdirection != null ?
                new ObjectParameter("trailingdirection", trailingdirection) :
                new ObjectParameter("trailingdirection", typeof(string));
    
            var leadingdreictionParameter = leadingdreiction != null ?
                new ObjectParameter("leadingdreiction", leadingdreiction) :
                new ObjectParameter("leadingdreiction", typeof(string));
    
            var zipcodeParameter = zipcode != null ?
                new ObjectParameter("zipcode", zipcode) :
                new ObjectParameter("zipcode", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var contactpersonParameter = contactperson != null ?
                new ObjectParameter("contactperson", contactperson) :
                new ObjectParameter("contactperson", typeof(string));
    
            var contactemailParameter = contactemail != null ?
                new ObjectParameter("contactemail", contactemail) :
                new ObjectParameter("contactemail", typeof(string));
    
            var contactphoneParameter = contactphone != null ?
                new ObjectParameter("contactphone", contactphone) :
                new ObjectParameter("contactphone", typeof(string));
    
            var contactphonetypeParameter = contactphonetype != null ?
                new ObjectParameter("contactphonetype", contactphonetype) :
                new ObjectParameter("contactphonetype", typeof(string));
    
            var contactfaxParameter = contactfax != null ?
                new ObjectParameter("contactfax", contactfax) :
                new ObjectParameter("contactfax", typeof(string));
    
            var numberoffloorsParameter = numberoffloors.HasValue ?
                new ObjectParameter("numberoffloors", numberoffloors) :
                new ObjectParameter("numberoffloors", typeof(int));
    
            var numberofroomsParameter = numberofrooms.HasValue ?
                new ObjectParameter("numberofrooms", numberofrooms) :
                new ObjectParameter("numberofrooms", typeof(int));
    
            var longitudelatitudeParameter = longitudelatitude != null ?
                new ObjectParameter("longitudelatitude", longitudelatitude) :
                new ObjectParameter("longitudelatitude", typeof(string));
    
            var istestcenterlocationParameter = istestcenterlocation.HasValue ?
                new ObjectParameter("istestcenterlocation", istestcenterlocation) :
                new ObjectParameter("istestcenterlocation", typeof(bool));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateBuildingDetails", buildingidParameter, buildingnameParameter, buidlingirnParameter, streetnumberParameter, strretnameParameter, streettypeParameter, trailingdirectionParameter, leadingdreictionParameter, zipcodeParameter, cityParameter, stateParameter, countryParameter, contactpersonParameter, contactemailParameter, contactphoneParameter, contactphonetypeParameter, contactfaxParameter, numberoffloorsParameter, numberofroomsParameter, longitudelatitudeParameter, istestcenterlocationParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateBulletin(Nullable<int> bulletinID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string name, string description, Nullable<short> type, string districts, string schools, Nullable<int> modifiedBy, Nullable<bool> isParent, Nullable<bool> isChild)
        {
            var bulletinIDParameter = bulletinID.HasValue ?
                new ObjectParameter("BulletinID", bulletinID) :
                new ObjectParameter("BulletinID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(short));
    
            var districtsParameter = districts != null ?
                new ObjectParameter("Districts", districts) :
                new ObjectParameter("Districts", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var isParentParameter = isParent.HasValue ?
                new ObjectParameter("IsParent", isParent) :
                new ObjectParameter("IsParent", typeof(bool));
    
            var isChildParameter = isChild.HasValue ?
                new ObjectParameter("IsChild", isChild) :
                new ObjectParameter("IsChild", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateBulletin", bulletinIDParameter, startDateParameter, endDateParameter, nameParameter, descriptionParameter, typeParameter, districtsParameter, schoolsParameter, modifiedByParameter, isParentParameter, isChildParameter);
        }
    
        public virtual int uspUpdateClassCategory(Nullable<int> classId, string catgvaluesArray)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var catgvaluesArrayParameter = catgvaluesArray != null ?
                new ObjectParameter("CatgvaluesArray", catgvaluesArray) :
                new ObjectParameter("CatgvaluesArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateClassCategory", classIdParameter, catgvaluesArrayParameter);
        }
    
        public virtual int uspUpdateClassCategoryByClassIDCatgs(Nullable<int> classId, string catgvaluesArray)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var catgvaluesArrayParameter = catgvaluesArray != null ?
                new ObjectParameter("CatgvaluesArray", catgvaluesArray) :
                new ObjectParameter("CatgvaluesArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateClassCategoryByClassIDCatgs", classIdParameter, catgvaluesArrayParameter);
        }
    
        public virtual int uspUpdateClassDetails(Nullable<int> classId, string className, Nullable<int> subjectId, Nullable<int> courseId, string gradeLevel, Nullable<int> defaultStandardId, string startTime, string endTime, Nullable<int> teacherId, Nullable<int> secondaryTeacherId, string scheduleDays, Nullable<int> gradeScaleId, Nullable<bool> usedForAttendance, Nullable<bool> usedForScheduling, string roomName, string sectionName)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            var gradeLevelParameter = gradeLevel != null ?
                new ObjectParameter("GradeLevel", gradeLevel) :
                new ObjectParameter("GradeLevel", typeof(string));
    
            var defaultStandardIdParameter = defaultStandardId.HasValue ?
                new ObjectParameter("DefaultStandardId", defaultStandardId) :
                new ObjectParameter("DefaultStandardId", typeof(int));
    
            var startTimeParameter = startTime != null ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(string));
    
            var endTimeParameter = endTime != null ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(string));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("TeacherId", teacherId) :
                new ObjectParameter("TeacherId", typeof(int));
    
            var secondaryTeacherIdParameter = secondaryTeacherId.HasValue ?
                new ObjectParameter("SecondaryTeacherId", secondaryTeacherId) :
                new ObjectParameter("SecondaryTeacherId", typeof(int));
    
            var scheduleDaysParameter = scheduleDays != null ?
                new ObjectParameter("ScheduleDays", scheduleDays) :
                new ObjectParameter("ScheduleDays", typeof(string));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var usedForAttendanceParameter = usedForAttendance.HasValue ?
                new ObjectParameter("UsedForAttendance", usedForAttendance) :
                new ObjectParameter("UsedForAttendance", typeof(bool));
    
            var usedForSchedulingParameter = usedForScheduling.HasValue ?
                new ObjectParameter("UsedForScheduling", usedForScheduling) :
                new ObjectParameter("UsedForScheduling", typeof(bool));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var sectionNameParameter = sectionName != null ?
                new ObjectParameter("SectionName", sectionName) :
                new ObjectParameter("SectionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateClassDetails", classIdParameter, classNameParameter, subjectIdParameter, courseIdParameter, gradeLevelParameter, defaultStandardIdParameter, startTimeParameter, endTimeParameter, teacherIdParameter, secondaryTeacherIdParameter, scheduleDaysParameter, gradeScaleIdParameter, usedForAttendanceParameter, usedForSchedulingParameter, roomNameParameter, sectionNameParameter);
        }
    
        public virtual int uspUpdateClassGradePeriods(Nullable<int> classId, Nullable<int> schoolId, string gradePeriodIds)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var gradePeriodIdsParameter = gradePeriodIds != null ?
                new ObjectParameter("GradePeriodIds", gradePeriodIds) :
                new ObjectParameter("GradePeriodIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateClassGradePeriods", classIdParameter, schoolIdParameter, gradePeriodIdsParameter);
        }
    
        public virtual int uspUpdateClassGradePeriodWeight(Nullable<int> classId, Nullable<int> gradePeriodId, Nullable<int> weight)
        {
            var classIdParameter = classId.HasValue ?
                new ObjectParameter("ClassId", classId) :
                new ObjectParameter("ClassId", typeof(int));
    
            var gradePeriodIdParameter = gradePeriodId.HasValue ?
                new ObjectParameter("GradePeriodId", gradePeriodId) :
                new ObjectParameter("GradePeriodId", typeof(int));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateClassGradePeriodWeight", classIdParameter, gradePeriodIdParameter, weightParameter);
        }
    
        public virtual int uspUpdateDemographics(Nullable<int> demographicsid, string firstname, string middlename, string lastname, string suffix, string nickname, string mothersmaidenname, string homeaddress1, string homeaddress2, string homeadress3, string homeadress4, string homeadress5, string homestate, string homecity, string homecountry, string homezipcode, Nullable<bool> ishomeprivate, string homephonenumber, Nullable<bool> ishomealtprivate, string alternatephonenumber, Nullable<bool> mailingaddresssameashomeaddress, string mailingaddress1, string mailingaddress2, string mailingaddress3, string mailingaddress4, string mailingaddress5, string mailingstate, string mailingcity, string mailingzipcode, Nullable<System.DateTime> dateofbirth, string age, Nullable<bool> areyouhispanic, Nullable<bool> racecheck1, Nullable<bool> racecheck2, Nullable<bool> racecheck3, Nullable<bool> racecheck4, Nullable<bool> racecheck5, string gender, Nullable<int> schoolid, string filepath, string homephonenumtype, string altphonenumtype, Nullable<int> militarypl)
        {
            var demographicsidParameter = demographicsid.HasValue ?
                new ObjectParameter("demographicsid", demographicsid) :
                new ObjectParameter("demographicsid", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(string));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var mothersmaidennameParameter = mothersmaidenname != null ?
                new ObjectParameter("mothersmaidenname", mothersmaidenname) :
                new ObjectParameter("mothersmaidenname", typeof(string));
    
            var homeaddress1Parameter = homeaddress1 != null ?
                new ObjectParameter("homeaddress1", homeaddress1) :
                new ObjectParameter("homeaddress1", typeof(string));
    
            var homeaddress2Parameter = homeaddress2 != null ?
                new ObjectParameter("homeaddress2", homeaddress2) :
                new ObjectParameter("homeaddress2", typeof(string));
    
            var homeadress3Parameter = homeadress3 != null ?
                new ObjectParameter("homeadress3", homeadress3) :
                new ObjectParameter("homeadress3", typeof(string));
    
            var homeadress4Parameter = homeadress4 != null ?
                new ObjectParameter("homeadress4", homeadress4) :
                new ObjectParameter("homeadress4", typeof(string));
    
            var homeadress5Parameter = homeadress5 != null ?
                new ObjectParameter("homeadress5", homeadress5) :
                new ObjectParameter("homeadress5", typeof(string));
    
            var homestateParameter = homestate != null ?
                new ObjectParameter("homestate", homestate) :
                new ObjectParameter("homestate", typeof(string));
    
            var homecityParameter = homecity != null ?
                new ObjectParameter("homecity", homecity) :
                new ObjectParameter("homecity", typeof(string));
    
            var homecountryParameter = homecountry != null ?
                new ObjectParameter("homecountry", homecountry) :
                new ObjectParameter("homecountry", typeof(string));
    
            var homezipcodeParameter = homezipcode != null ?
                new ObjectParameter("homezipcode", homezipcode) :
                new ObjectParameter("homezipcode", typeof(string));
    
            var ishomeprivateParameter = ishomeprivate.HasValue ?
                new ObjectParameter("ishomeprivate", ishomeprivate) :
                new ObjectParameter("ishomeprivate", typeof(bool));
    
            var homephonenumberParameter = homephonenumber != null ?
                new ObjectParameter("homephonenumber", homephonenumber) :
                new ObjectParameter("homephonenumber", typeof(string));
    
            var ishomealtprivateParameter = ishomealtprivate.HasValue ?
                new ObjectParameter("ishomealtprivate", ishomealtprivate) :
                new ObjectParameter("ishomealtprivate", typeof(bool));
    
            var alternatephonenumberParameter = alternatephonenumber != null ?
                new ObjectParameter("alternatephonenumber", alternatephonenumber) :
                new ObjectParameter("alternatephonenumber", typeof(string));
    
            var mailingaddresssameashomeaddressParameter = mailingaddresssameashomeaddress.HasValue ?
                new ObjectParameter("mailingaddresssameashomeaddress", mailingaddresssameashomeaddress) :
                new ObjectParameter("mailingaddresssameashomeaddress", typeof(bool));
    
            var mailingaddress1Parameter = mailingaddress1 != null ?
                new ObjectParameter("mailingaddress1", mailingaddress1) :
                new ObjectParameter("mailingaddress1", typeof(string));
    
            var mailingaddress2Parameter = mailingaddress2 != null ?
                new ObjectParameter("mailingaddress2", mailingaddress2) :
                new ObjectParameter("mailingaddress2", typeof(string));
    
            var mailingaddress3Parameter = mailingaddress3 != null ?
                new ObjectParameter("mailingaddress3", mailingaddress3) :
                new ObjectParameter("mailingaddress3", typeof(string));
    
            var mailingaddress4Parameter = mailingaddress4 != null ?
                new ObjectParameter("mailingaddress4", mailingaddress4) :
                new ObjectParameter("mailingaddress4", typeof(string));
    
            var mailingaddress5Parameter = mailingaddress5 != null ?
                new ObjectParameter("mailingaddress5", mailingaddress5) :
                new ObjectParameter("mailingaddress5", typeof(string));
    
            var mailingstateParameter = mailingstate != null ?
                new ObjectParameter("mailingstate", mailingstate) :
                new ObjectParameter("mailingstate", typeof(string));
    
            var mailingcityParameter = mailingcity != null ?
                new ObjectParameter("mailingcity", mailingcity) :
                new ObjectParameter("mailingcity", typeof(string));
    
            var mailingzipcodeParameter = mailingzipcode != null ?
                new ObjectParameter("mailingzipcode", mailingzipcode) :
                new ObjectParameter("mailingzipcode", typeof(string));
    
            var dateofbirthParameter = dateofbirth.HasValue ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(System.DateTime));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var areyouhispanicParameter = areyouhispanic.HasValue ?
                new ObjectParameter("areyouhispanic", areyouhispanic) :
                new ObjectParameter("areyouhispanic", typeof(bool));
    
            var racecheck1Parameter = racecheck1.HasValue ?
                new ObjectParameter("racecheck1", racecheck1) :
                new ObjectParameter("racecheck1", typeof(bool));
    
            var racecheck2Parameter = racecheck2.HasValue ?
                new ObjectParameter("racecheck2", racecheck2) :
                new ObjectParameter("racecheck2", typeof(bool));
    
            var racecheck3Parameter = racecheck3.HasValue ?
                new ObjectParameter("racecheck3", racecheck3) :
                new ObjectParameter("racecheck3", typeof(bool));
    
            var racecheck4Parameter = racecheck4.HasValue ?
                new ObjectParameter("racecheck4", racecheck4) :
                new ObjectParameter("racecheck4", typeof(bool));
    
            var racecheck5Parameter = racecheck5.HasValue ?
                new ObjectParameter("racecheck5", racecheck5) :
                new ObjectParameter("racecheck5", typeof(bool));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var filepathParameter = filepath != null ?
                new ObjectParameter("filepath", filepath) :
                new ObjectParameter("filepath", typeof(string));
    
            var homephonenumtypeParameter = homephonenumtype != null ?
                new ObjectParameter("homephonenumtype", homephonenumtype) :
                new ObjectParameter("homephonenumtype", typeof(string));
    
            var altphonenumtypeParameter = altphonenumtype != null ?
                new ObjectParameter("altphonenumtype", altphonenumtype) :
                new ObjectParameter("altphonenumtype", typeof(string));
    
            var militaryplParameter = militarypl.HasValue ?
                new ObjectParameter("militarypl", militarypl) :
                new ObjectParameter("militarypl", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDemographics", demographicsidParameter, firstnameParameter, middlenameParameter, lastnameParameter, suffixParameter, nicknameParameter, mothersmaidennameParameter, homeaddress1Parameter, homeaddress2Parameter, homeadress3Parameter, homeadress4Parameter, homeadress5Parameter, homestateParameter, homecityParameter, homecountryParameter, homezipcodeParameter, ishomeprivateParameter, homephonenumberParameter, ishomealtprivateParameter, alternatephonenumberParameter, mailingaddresssameashomeaddressParameter, mailingaddress1Parameter, mailingaddress2Parameter, mailingaddress3Parameter, mailingaddress4Parameter, mailingaddress5Parameter, mailingstateParameter, mailingcityParameter, mailingzipcodeParameter, dateofbirthParameter, ageParameter, areyouhispanicParameter, racecheck1Parameter, racecheck2Parameter, racecheck3Parameter, racecheck4Parameter, racecheck5Parameter, genderParameter, schoolidParameter, filepathParameter, homephonenumtypeParameter, altphonenumtypeParameter, militaryplParameter);
        }
    
        public virtual int uspUpdateDepartment(Nullable<int> departmentid, string departmentname, string description, Nullable<int> schoolid, Nullable<int> departmentheadone, Nullable<int> departmentheadtwo, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var departmentnameParameter = departmentname != null ?
                new ObjectParameter("departmentname", departmentname) :
                new ObjectParameter("departmentname", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var departmentheadoneParameter = departmentheadone.HasValue ?
                new ObjectParameter("departmentheadone", departmentheadone) :
                new ObjectParameter("departmentheadone", typeof(int));
    
            var departmentheadtwoParameter = departmentheadtwo.HasValue ?
                new ObjectParameter("departmentheadtwo", departmentheadtwo) :
                new ObjectParameter("departmentheadtwo", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDepartment", departmentidParameter, departmentnameParameter, descriptionParameter, schoolidParameter, departmentheadoneParameter, departmentheadtwoParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateDisciplineIncident(Nullable<int> disciplineincidentid, Nullable<System.DateTime> incidentdate, Nullable<int> disciplinecategory, string schoolyear, string term, string description, Nullable<int> location, string nonfirearmsconfiscated, string firearmsconfiscated, Nullable<bool> tobaccolettersenttoparents, Nullable<bool> notifiedpolice, string stateincidentnumber, Nullable<int> publishnow, string publishcomment, string summary, Nullable<System.DateTime> actionstartdate, Nullable<System.DateTime> actionenddate, Nullable<int> actiontakentype, Nullable<int> suspensiondays, string actiondescription, Nullable<int> schoolid, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var disciplineincidentidParameter = disciplineincidentid.HasValue ?
                new ObjectParameter("disciplineincidentid", disciplineincidentid) :
                new ObjectParameter("disciplineincidentid", typeof(int));
    
            var incidentdateParameter = incidentdate.HasValue ?
                new ObjectParameter("incidentdate", incidentdate) :
                new ObjectParameter("incidentdate", typeof(System.DateTime));
    
            var disciplinecategoryParameter = disciplinecategory.HasValue ?
                new ObjectParameter("disciplinecategory", disciplinecategory) :
                new ObjectParameter("disciplinecategory", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var termParameter = term != null ?
                new ObjectParameter("term", term) :
                new ObjectParameter("term", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var nonfirearmsconfiscatedParameter = nonfirearmsconfiscated != null ?
                new ObjectParameter("nonfirearmsconfiscated", nonfirearmsconfiscated) :
                new ObjectParameter("nonfirearmsconfiscated", typeof(string));
    
            var firearmsconfiscatedParameter = firearmsconfiscated != null ?
                new ObjectParameter("firearmsconfiscated", firearmsconfiscated) :
                new ObjectParameter("firearmsconfiscated", typeof(string));
    
            var tobaccolettersenttoparentsParameter = tobaccolettersenttoparents.HasValue ?
                new ObjectParameter("tobaccolettersenttoparents", tobaccolettersenttoparents) :
                new ObjectParameter("tobaccolettersenttoparents", typeof(bool));
    
            var notifiedpoliceParameter = notifiedpolice.HasValue ?
                new ObjectParameter("notifiedpolice", notifiedpolice) :
                new ObjectParameter("notifiedpolice", typeof(bool));
    
            var stateincidentnumberParameter = stateincidentnumber != null ?
                new ObjectParameter("stateincidentnumber", stateincidentnumber) :
                new ObjectParameter("stateincidentnumber", typeof(string));
    
            var publishnowParameter = publishnow.HasValue ?
                new ObjectParameter("publishnow", publishnow) :
                new ObjectParameter("publishnow", typeof(int));
    
            var publishcommentParameter = publishcomment != null ?
                new ObjectParameter("publishcomment", publishcomment) :
                new ObjectParameter("publishcomment", typeof(string));
    
            var summaryParameter = summary != null ?
                new ObjectParameter("summary", summary) :
                new ObjectParameter("summary", typeof(string));
    
            var actionstartdateParameter = actionstartdate.HasValue ?
                new ObjectParameter("actionstartdate", actionstartdate) :
                new ObjectParameter("actionstartdate", typeof(System.DateTime));
    
            var actionenddateParameter = actionenddate.HasValue ?
                new ObjectParameter("actionenddate", actionenddate) :
                new ObjectParameter("actionenddate", typeof(System.DateTime));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var suspensiondaysParameter = suspensiondays.HasValue ?
                new ObjectParameter("suspensiondays", suspensiondays) :
                new ObjectParameter("suspensiondays", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDisciplineIncident", disciplineincidentidParameter, incidentdateParameter, disciplinecategoryParameter, schoolyearParameter, termParameter, descriptionParameter, locationParameter, nonfirearmsconfiscatedParameter, firearmsconfiscatedParameter, tobaccolettersenttoparentsParameter, notifiedpoliceParameter, stateincidentnumberParameter, publishnowParameter, publishcommentParameter, summaryParameter, actionstartdateParameter, actionenddateParameter, actiontakentypeParameter, suspensiondaysParameter, actiondescriptionParameter, schoolidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrict(Nullable<int> districtid, Nullable<int> districttypeid, string districtirn, string districtname, Nullable<bool> excludefromstatereporting, byte[] districtpicture, byte[] districtlogo, string districtaddresstypes, string districtstreetnumbers, string districtstreetnames, string districtcities, string districtstates, string districtcountries, string districtzipcodes, string districtcounties, string districtneighbourhoods, string districtaddresses, string districtphones, string districtphonetypes, Nullable<bool> isevolvedistrict, string faxnumber, string recordsemail, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var districttypeidParameter = districttypeid.HasValue ?
                new ObjectParameter("districttypeid", districttypeid) :
                new ObjectParameter("districttypeid", typeof(int));
    
            var districtirnParameter = districtirn != null ?
                new ObjectParameter("districtirn", districtirn) :
                new ObjectParameter("districtirn", typeof(string));
    
            var districtnameParameter = districtname != null ?
                new ObjectParameter("districtname", districtname) :
                new ObjectParameter("districtname", typeof(string));
    
            var excludefromstatereportingParameter = excludefromstatereporting.HasValue ?
                new ObjectParameter("excludefromstatereporting", excludefromstatereporting) :
                new ObjectParameter("excludefromstatereporting", typeof(bool));
    
            var districtpictureParameter = districtpicture != null ?
                new ObjectParameter("districtpicture", districtpicture) :
                new ObjectParameter("districtpicture", typeof(byte[]));
    
            var districtlogoParameter = districtlogo != null ?
                new ObjectParameter("districtlogo", districtlogo) :
                new ObjectParameter("districtlogo", typeof(byte[]));
    
            var districtaddresstypesParameter = districtaddresstypes != null ?
                new ObjectParameter("districtaddresstypes", districtaddresstypes) :
                new ObjectParameter("districtaddresstypes", typeof(string));
    
            var districtstreetnumbersParameter = districtstreetnumbers != null ?
                new ObjectParameter("districtstreetnumbers", districtstreetnumbers) :
                new ObjectParameter("districtstreetnumbers", typeof(string));
    
            var districtstreetnamesParameter = districtstreetnames != null ?
                new ObjectParameter("districtstreetnames", districtstreetnames) :
                new ObjectParameter("districtstreetnames", typeof(string));
    
            var districtcitiesParameter = districtcities != null ?
                new ObjectParameter("districtcities", districtcities) :
                new ObjectParameter("districtcities", typeof(string));
    
            var districtstatesParameter = districtstates != null ?
                new ObjectParameter("districtstates", districtstates) :
                new ObjectParameter("districtstates", typeof(string));
    
            var districtcountriesParameter = districtcountries != null ?
                new ObjectParameter("districtcountries", districtcountries) :
                new ObjectParameter("districtcountries", typeof(string));
    
            var districtzipcodesParameter = districtzipcodes != null ?
                new ObjectParameter("districtzipcodes", districtzipcodes) :
                new ObjectParameter("districtzipcodes", typeof(string));
    
            var districtcountiesParameter = districtcounties != null ?
                new ObjectParameter("districtcounties", districtcounties) :
                new ObjectParameter("districtcounties", typeof(string));
    
            var districtneighbourhoodsParameter = districtneighbourhoods != null ?
                new ObjectParameter("districtneighbourhoods", districtneighbourhoods) :
                new ObjectParameter("districtneighbourhoods", typeof(string));
    
            var districtaddressesParameter = districtaddresses != null ?
                new ObjectParameter("districtaddresses", districtaddresses) :
                new ObjectParameter("districtaddresses", typeof(string));
    
            var districtphonesParameter = districtphones != null ?
                new ObjectParameter("districtphones", districtphones) :
                new ObjectParameter("districtphones", typeof(string));
    
            var districtphonetypesParameter = districtphonetypes != null ?
                new ObjectParameter("districtphonetypes", districtphonetypes) :
                new ObjectParameter("districtphonetypes", typeof(string));
    
            var isevolvedistrictParameter = isevolvedistrict.HasValue ?
                new ObjectParameter("isevolvedistrict", isevolvedistrict) :
                new ObjectParameter("isevolvedistrict", typeof(bool));
    
            var faxnumberParameter = faxnumber != null ?
                new ObjectParameter("faxnumber", faxnumber) :
                new ObjectParameter("faxnumber", typeof(string));
    
            var recordsemailParameter = recordsemail != null ?
                new ObjectParameter("recordsemail", recordsemail) :
                new ObjectParameter("recordsemail", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrict", districtidParameter, districttypeidParameter, districtirnParameter, districtnameParameter, excludefromstatereportingParameter, districtpictureParameter, districtlogoParameter, districtaddresstypesParameter, districtstreetnumbersParameter, districtstreetnamesParameter, districtcitiesParameter, districtstatesParameter, districtcountriesParameter, districtzipcodesParameter, districtcountiesParameter, districtneighbourhoodsParameter, districtaddressesParameter, districtphonesParameter, districtphonetypesParameter, isevolvedistrictParameter, faxnumberParameter, recordsemailParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictArea(Nullable<int> districtAreaId, Nullable<int> districtID, string areaName, Nullable<int> areaLeaderId, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAreaIdParameter = districtAreaId.HasValue ?
                new ObjectParameter("DistrictAreaId", districtAreaId) :
                new ObjectParameter("DistrictAreaId", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaLeaderIdParameter = areaLeaderId.HasValue ?
                new ObjectParameter("AreaLeaderId", areaLeaderId) :
                new ObjectParameter("AreaLeaderId", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictArea", districtAreaIdParameter, districtIDParameter, areaNameParameter, areaLeaderIdParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictAttendancePattern(Nullable<int> districtAttendancePatternID, string patternName, string patternDescription, string scheduleSchools, Nullable<System.DateTime> patternStartDate, Nullable<System.DateTime> patternEndDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAttendancePatternIDParameter = districtAttendancePatternID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternID", districtAttendancePatternID) :
                new ObjectParameter("DistrictAttendancePatternID", typeof(int));
    
            var patternNameParameter = patternName != null ?
                new ObjectParameter("PatternName", patternName) :
                new ObjectParameter("PatternName", typeof(string));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var scheduleSchoolsParameter = scheduleSchools != null ?
                new ObjectParameter("ScheduleSchools", scheduleSchools) :
                new ObjectParameter("ScheduleSchools", typeof(string));
    
            var patternStartDateParameter = patternStartDate.HasValue ?
                new ObjectParameter("PatternStartDate", patternStartDate) :
                new ObjectParameter("PatternStartDate", typeof(System.DateTime));
    
            var patternEndDateParameter = patternEndDate.HasValue ?
                new ObjectParameter("PatternEndDate", patternEndDate) :
                new ObjectParameter("PatternEndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictAttendancePattern", districtAttendancePatternIDParameter, patternNameParameter, patternDescriptionParameter, scheduleSchoolsParameter, patternStartDateParameter, patternEndDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateDistrictAttendancePatternEvent(Nullable<int> districtAttendancePatternEventID, Nullable<int> schoolAttendancePatternID, Nullable<int> districtAttendancePatternID, string patternDescription, Nullable<int> calendarEventPL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> hours, string scheduledSchools, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtAttendancePatternEventIDParameter = districtAttendancePatternEventID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternEventID", districtAttendancePatternEventID) :
                new ObjectParameter("DistrictAttendancePatternEventID", typeof(int));
    
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            var districtAttendancePatternIDParameter = districtAttendancePatternID.HasValue ?
                new ObjectParameter("DistrictAttendancePatternID", districtAttendancePatternID) :
                new ObjectParameter("DistrictAttendancePatternID", typeof(int));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var calendarEventPLParameter = calendarEventPL.HasValue ?
                new ObjectParameter("CalendarEventPL", calendarEventPL) :
                new ObjectParameter("CalendarEventPL", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var scheduledSchoolsParameter = scheduledSchools != null ?
                new ObjectParameter("ScheduledSchools", scheduledSchools) :
                new ObjectParameter("ScheduledSchools", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateDistrictAttendancePatternEvent", districtAttendancePatternEventIDParameter, schoolAttendancePatternIDParameter, districtAttendancePatternIDParameter, patternDescriptionParameter, calendarEventPLParameter, startDateParameter, endDateParameter, hoursParameter, scheduledSchoolsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictAttendancePatterns(string patternIds, string valuesArray, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var patternIdsParameter = patternIds != null ?
                new ObjectParameter("PatternIds", patternIds) :
                new ObjectParameter("PatternIds", typeof(string));
    
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictAttendancePatterns", patternIdsParameter, valuesArrayParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictCalendarEndSetupSettings(Nullable<int> districtCalendarSetupID, Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<bool> courses, Nullable<bool> students, Nullable<bool> retention, Nullable<bool> fees, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtCalendarSetupIDParameter = districtCalendarSetupID.HasValue ?
                new ObjectParameter("DistrictCalendarSetupID", districtCalendarSetupID) :
                new ObjectParameter("DistrictCalendarSetupID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var coursesParameter = courses.HasValue ?
                new ObjectParameter("Courses", courses) :
                new ObjectParameter("Courses", typeof(bool));
    
            var studentsParameter = students.HasValue ?
                new ObjectParameter("Students", students) :
                new ObjectParameter("Students", typeof(bool));
    
            var retentionParameter = retention.HasValue ?
                new ObjectParameter("Retention", retention) :
                new ObjectParameter("Retention", typeof(bool));
    
            var feesParameter = fees.HasValue ?
                new ObjectParameter("Fees", fees) :
                new ObjectParameter("Fees", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictCalendarEndSetupSettings", districtCalendarSetupIDParameter, districtIDParameter, schoolYearPLParameter, coursesParameter, studentsParameter, retentionParameter, feesParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictComment(Nullable<int> districtCommentID, Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<int> commentTypePL, string commentDescription, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtCommentIDParameter = districtCommentID.HasValue ?
                new ObjectParameter("DistrictCommentID", districtCommentID) :
                new ObjectParameter("DistrictCommentID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var commentTypePLParameter = commentTypePL.HasValue ?
                new ObjectParameter("CommentTypePL", commentTypePL) :
                new ObjectParameter("CommentTypePL", typeof(int));
    
            var commentDescriptionParameter = commentDescription != null ?
                new ObjectParameter("CommentDescription", commentDescription) :
                new ObjectParameter("CommentDescription", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictComment", districtCommentIDParameter, districtIDParameter, schoolYearPLParameter, commentTypePLParameter, commentDescriptionParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictCourse(string districtCourseName, string districtCourseNumber, string schools, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<System.DateTime> startDate, string endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolYearId, string termLength, string mode, Nullable<int> districtId, string buttonName, Nullable<int> districtCourseId, Nullable<bool> isStateReporting)
        {
            var districtCourseNameParameter = districtCourseName != null ?
                new ObjectParameter("DistrictCourseName", districtCourseName) :
                new ObjectParameter("DistrictCourseName", typeof(string));
    
            var districtCourseNumberParameter = districtCourseNumber != null ?
                new ObjectParameter("DistrictCourseNumber", districtCourseNumber) :
                new ObjectParameter("DistrictCourseNumber", typeof(string));
    
            var schoolsParameter = schools != null ?
                new ObjectParameter("Schools", schools) :
                new ObjectParameter("Schools", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var termLengthParameter = termLength != null ?
                new ObjectParameter("TermLength", termLength) :
                new ObjectParameter("TermLength", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            var districtCourseIdParameter = districtCourseId.HasValue ?
                new ObjectParameter("DistrictCourseId", districtCourseId) :
                new ObjectParameter("DistrictCourseId", typeof(int));
    
            var isStateReportingParameter = isStateReporting.HasValue ?
                new ObjectParameter("IsStateReporting", isStateReporting) :
                new ObjectParameter("IsStateReporting", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictCourse", districtCourseNameParameter, districtCourseNumberParameter, schoolsParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter, schoolYearIdParameter, termLengthParameter, modeParameter, districtIdParameter, buttonNameParameter, districtCourseIdParameter, isStateReportingParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictCourseDates(Nullable<int> districtCourseHistoryId, Nullable<System.DateTime> startDate, string endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtCourseHistoryIdParameter = districtCourseHistoryId.HasValue ?
                new ObjectParameter("DistrictCourseHistoryId", districtCourseHistoryId) :
                new ObjectParameter("DistrictCourseHistoryId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictCourseDates", districtCourseHistoryIdParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictGPA(Nullable<int> districtGPASetupID, string gPAName, string gPAFormula, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGPASetupIDParameter = districtGPASetupID.HasValue ?
                new ObjectParameter("DistrictGPASetupID", districtGPASetupID) :
                new ObjectParameter("DistrictGPASetupID", typeof(int));
    
            var gPANameParameter = gPAName != null ?
                new ObjectParameter("GPAName", gPAName) :
                new ObjectParameter("GPAName", typeof(string));
    
            var gPAFormulaParameter = gPAFormula != null ?
                new ObjectParameter("GPAFormula", gPAFormula) :
                new ObjectParameter("GPAFormula", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictGPA", districtGPASetupIDParameter, gPANameParameter, gPAFormulaParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictGradebookPreference(Nullable<int> districtGradebookPreferenceID, Nullable<int> districtID, Nullable<int> schoolYearPL, Nullable<int> assignmentCategoryPL, string gradeReasonTypePLs, Nullable<bool> isMissingScore, Nullable<int> roundToDecimalPL, string districtCommentPLs, Nullable<bool> isSchoolCreateNewComments, string assignmentCategoryColorCode, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGradebookPreferenceIDParameter = districtGradebookPreferenceID.HasValue ?
                new ObjectParameter("DistrictGradebookPreferenceID", districtGradebookPreferenceID) :
                new ObjectParameter("DistrictGradebookPreferenceID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var assignmentCategoryPLParameter = assignmentCategoryPL.HasValue ?
                new ObjectParameter("AssignmentCategoryPL", assignmentCategoryPL) :
                new ObjectParameter("AssignmentCategoryPL", typeof(int));
    
            var gradeReasonTypePLsParameter = gradeReasonTypePLs != null ?
                new ObjectParameter("GradeReasonTypePLs", gradeReasonTypePLs) :
                new ObjectParameter("GradeReasonTypePLs", typeof(string));
    
            var isMissingScoreParameter = isMissingScore.HasValue ?
                new ObjectParameter("IsMissingScore", isMissingScore) :
                new ObjectParameter("IsMissingScore", typeof(bool));
    
            var roundToDecimalPLParameter = roundToDecimalPL.HasValue ?
                new ObjectParameter("RoundToDecimalPL", roundToDecimalPL) :
                new ObjectParameter("RoundToDecimalPL", typeof(int));
    
            var districtCommentPLsParameter = districtCommentPLs != null ?
                new ObjectParameter("DistrictCommentPLs", districtCommentPLs) :
                new ObjectParameter("DistrictCommentPLs", typeof(string));
    
            var isSchoolCreateNewCommentsParameter = isSchoolCreateNewComments.HasValue ?
                new ObjectParameter("IsSchoolCreateNewComments", isSchoolCreateNewComments) :
                new ObjectParameter("IsSchoolCreateNewComments", typeof(bool));
    
            var assignmentCategoryColorCodeParameter = assignmentCategoryColorCode != null ?
                new ObjectParameter("AssignmentCategoryColorCode", assignmentCategoryColorCode) :
                new ObjectParameter("AssignmentCategoryColorCode", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictGradebookPreference", districtGradebookPreferenceIDParameter, districtIDParameter, schoolYearPLParameter, assignmentCategoryPLParameter, gradeReasonTypePLsParameter, isMissingScoreParameter, roundToDecimalPLParameter, districtCommentPLsParameter, isSchoolCreateNewCommentsParameter, assignmentCategoryColorCodeParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictGradeScale(Nullable<int> districtGradeScaleID, Nullable<int> districtID, string gradeScaleName, Nullable<bool> @default, Nullable<bool> canEditAtSchool, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGradeScaleIDParameter = districtGradeScaleID.HasValue ?
                new ObjectParameter("DistrictGradeScaleID", districtGradeScaleID) :
                new ObjectParameter("DistrictGradeScaleID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gradeScaleNameParameter = gradeScaleName != null ?
                new ObjectParameter("GradeScaleName", gradeScaleName) :
                new ObjectParameter("GradeScaleName", typeof(string));
    
            var defaultParameter = @default.HasValue ?
                new ObjectParameter("Default", @default) :
                new ObjectParameter("Default", typeof(bool));
    
            var canEditAtSchoolParameter = canEditAtSchool.HasValue ?
                new ObjectParameter("CanEditAtSchool", canEditAtSchool) :
                new ObjectParameter("CanEditAtSchool", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictGradeScale", districtGradeScaleIDParameter, districtIDParameter, gradeScaleNameParameter, defaultParameter, canEditAtSchoolParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictGradeScaleDetails(Nullable<int> districtGradeScaleDetailID, Nullable<decimal> minValue, Nullable<decimal> maxValue, string grade, string description, Nullable<bool> validForGPA, Nullable<int> districtID, Nullable<decimal> gradePoints, Nullable<bool> isEarnsCredit, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtGradeScaleDetailIDParameter = districtGradeScaleDetailID.HasValue ?
                new ObjectParameter("DistrictGradeScaleDetailID", districtGradeScaleDetailID) :
                new ObjectParameter("DistrictGradeScaleDetailID", typeof(int));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(decimal));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(decimal));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var validForGPAParameter = validForGPA.HasValue ?
                new ObjectParameter("ValidForGPA", validForGPA) :
                new ObjectParameter("ValidForGPA", typeof(bool));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gradePointsParameter = gradePoints.HasValue ?
                new ObjectParameter("GradePoints", gradePoints) :
                new ObjectParameter("GradePoints", typeof(decimal));
    
            var isEarnsCreditParameter = isEarnsCredit.HasValue ?
                new ObjectParameter("IsEarnsCredit", isEarnsCredit) :
                new ObjectParameter("IsEarnsCredit", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictGradeScaleDetails", districtGradeScaleDetailIDParameter, minValueParameter, maxValueParameter, gradeParameter, descriptionParameter, validForGPAParameter, districtIDParameter, gradePointsParameter, isEarnsCreditParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictRegion(Nullable<int> districtRegionId, Nullable<int> districtID, string regionName, Nullable<int> coordinatorId, string counties, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtRegionIdParameter = districtRegionId.HasValue ?
                new ObjectParameter("DistrictRegionId", districtRegionId) :
                new ObjectParameter("DistrictRegionId", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("RegionName", regionName) :
                new ObjectParameter("RegionName", typeof(string));
    
            var coordinatorIdParameter = coordinatorId.HasValue ?
                new ObjectParameter("CoordinatorId", coordinatorId) :
                new ObjectParameter("CoordinatorId", typeof(int));
    
            var countiesParameter = counties != null ?
                new ObjectParameter("Counties", counties) :
                new ObjectParameter("Counties", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictRegion", districtRegionIdParameter, districtIDParameter, regionNameParameter, coordinatorIdParameter, countiesParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDistrictSchoolYear(Nullable<int> districtID, Nullable<int> districtSchoolYearID, Nullable<int> districtSchoolYear, string abbrivation, Nullable<bool> isDefault, Nullable<System.DateTime> firstDayofSchool, Nullable<System.DateTime> lastdayofSchool, string districtSchoolYearTerms, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var districtSchoolYearIDParameter = districtSchoolYearID.HasValue ?
                new ObjectParameter("DistrictSchoolYearID", districtSchoolYearID) :
                new ObjectParameter("DistrictSchoolYearID", typeof(int));
    
            var districtSchoolYearParameter = districtSchoolYear.HasValue ?
                new ObjectParameter("DistrictSchoolYear", districtSchoolYear) :
                new ObjectParameter("DistrictSchoolYear", typeof(int));
    
            var abbrivationParameter = abbrivation != null ?
                new ObjectParameter("Abbrivation", abbrivation) :
                new ObjectParameter("Abbrivation", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var firstDayofSchoolParameter = firstDayofSchool.HasValue ?
                new ObjectParameter("FirstDayofSchool", firstDayofSchool) :
                new ObjectParameter("FirstDayofSchool", typeof(System.DateTime));
    
            var lastdayofSchoolParameter = lastdayofSchool.HasValue ?
                new ObjectParameter("LastdayofSchool", lastdayofSchool) :
                new ObjectParameter("LastdayofSchool", typeof(System.DateTime));
    
            var districtSchoolYearTermsParameter = districtSchoolYearTerms != null ?
                new ObjectParameter("DistrictSchoolYearTerms", districtSchoolYearTerms) :
                new ObjectParameter("DistrictSchoolYearTerms", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDistrictSchoolYear", districtIDParameter, districtSchoolYearIDParameter, districtSchoolYearParameter, abbrivationParameter, isDefaultParameter, firstDayofSchoolParameter, lastdayofSchoolParameter, districtSchoolYearTermsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateDocumentForNotes(string studentNoteIds, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentNoteIdsParameter = studentNoteIds != null ?
                new ObjectParameter("StudentNoteIds", studentNoteIds) :
                new ObjectParameter("StudentNoteIds", typeof(string));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateDocumentForNotes", studentNoteIdsParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateForcedStatus(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateForcedStatus", userNameParameter);
        }
    
        public virtual int uspUpdateGPADefinition(Nullable<int> id, string methodname, string methodtype, string description, string formula, string calctype, string gradescale, Nullable<System.DateTime> gradestatusdate, Nullable<bool> excludecourses, Nullable<bool> excludegroups)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            var methodtypeParameter = methodtype != null ?
                new ObjectParameter("methodtype", methodtype) :
                new ObjectParameter("methodtype", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var formulaParameter = formula != null ?
                new ObjectParameter("formula", formula) :
                new ObjectParameter("formula", typeof(string));
    
            var calctypeParameter = calctype != null ?
                new ObjectParameter("calctype", calctype) :
                new ObjectParameter("calctype", typeof(string));
    
            var gradescaleParameter = gradescale != null ?
                new ObjectParameter("gradescale", gradescale) :
                new ObjectParameter("gradescale", typeof(string));
    
            var gradestatusdateParameter = gradestatusdate.HasValue ?
                new ObjectParameter("gradestatusdate", gradestatusdate) :
                new ObjectParameter("gradestatusdate", typeof(System.DateTime));
    
            var excludecoursesParameter = excludecourses.HasValue ?
                new ObjectParameter("excludecourses", excludecourses) :
                new ObjectParameter("excludecourses", typeof(bool));
    
            var excludegroupsParameter = excludegroups.HasValue ?
                new ObjectParameter("excludegroups", excludegroups) :
                new ObjectParameter("excludegroups", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGPADefinition", idParameter, methodnameParameter, methodtypeParameter, descriptionParameter, formulaParameter, calctypeParameter, gradescaleParameter, gradestatusdateParameter, excludecoursesParameter, excludegroupsParameter);
        }
    
        public virtual int uspUpdateGradeMethods(Nullable<int> id, string methodname, string methodtype)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var methodnameParameter = methodname != null ?
                new ObjectParameter("methodname", methodname) :
                new ObjectParameter("methodname", typeof(string));
    
            var methodtypeParameter = methodtype != null ?
                new ObjectParameter("methodtype", methodtype) :
                new ObjectParameter("methodtype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateGradeMethods", idParameter, methodnameParameter, methodtypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateGradReqSubject(Nullable<int> gradReqDetailID, string gradCode, string subject, Nullable<decimal> credits, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> displayOrder)
        {
            var gradReqDetailIDParameter = gradReqDetailID.HasValue ?
                new ObjectParameter("GradReqDetailID", gradReqDetailID) :
                new ObjectParameter("GradReqDetailID", typeof(int));
    
            var gradCodeParameter = gradCode != null ?
                new ObjectParameter("GradCode", gradCode) :
                new ObjectParameter("GradCode", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var creditsParameter = credits.HasValue ?
                new ObjectParameter("Credits", credits) :
                new ObjectParameter("Credits", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateGradReqSubject", gradReqDetailIDParameter, gradCodeParameter, subjectParameter, creditsParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter, displayOrderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateGradRequirement(Nullable<int> gradReqID, Nullable<int> schoolID, string title, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var gradReqIDParameter = gradReqID.HasValue ?
                new ObjectParameter("GradReqID", gradReqID) :
                new ObjectParameter("GradReqID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateGradRequirement", gradReqIDParameter, schoolIDParameter, titleParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateHomeroom(Nullable<int> homeroomID, string homeroomName, Nullable<int> roomID, string staffDetails, Nullable<int> maxSeats, Nullable<int> actualSeats, string startDate, string endDate, Nullable<int> schoolID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var homeroomIDParameter = homeroomID.HasValue ?
                new ObjectParameter("HomeroomID", homeroomID) :
                new ObjectParameter("HomeroomID", typeof(int));
    
            var homeroomNameParameter = homeroomName != null ?
                new ObjectParameter("HomeroomName", homeroomName) :
                new ObjectParameter("HomeroomName", typeof(string));
    
            var roomIDParameter = roomID.HasValue ?
                new ObjectParameter("RoomID", roomID) :
                new ObjectParameter("RoomID", typeof(int));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var maxSeatsParameter = maxSeats.HasValue ?
                new ObjectParameter("MaxSeats", maxSeats) :
                new ObjectParameter("MaxSeats", typeof(int));
    
            var actualSeatsParameter = actualSeats.HasValue ?
                new ObjectParameter("ActualSeats", actualSeats) :
                new ObjectParameter("ActualSeats", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateHomeroom", homeroomIDParameter, homeroomNameParameter, roomIDParameter, staffDetailsParameter, maxSeatsParameter, actualSeatsParameter, startDateParameter, endDateParameter, schoolIDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateHomeRoomTeacherForStudent(Nullable<int> studentID, Nullable<int> personID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateHomeRoomTeacherForStudent", studentIDParameter, personIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateMassAddAttendancePattern(string studentIDS, Nullable<int> attendancePattern, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var attendancePatternParameter = attendancePattern.HasValue ?
                new ObjectParameter("AttendancePattern", attendancePattern) :
                new ObjectParameter("AttendancePattern", typeof(int));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateMassAddAttendancePattern", studentIDSParameter, attendancePatternParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateMultipleContactDetailsByStudentID(Nullable<int> studentid, Nullable<int> childlivesewith, string primarycontactlastname, string primarycontactfirstname, string primarycontactmiddlename, Nullable<int> primarycontactrelationshipwithstudent, Nullable<bool> primaryiscontactlegalcustodianofstudent1, Nullable<bool> primarysameasstudentaddress, string primarycontactstreetnumber, string primarycontactstreetname, string primarycontactcountry, string primarycontactcounty, string primarycontactneighbourhood, string primarycontactapartment, string primarycontactlot, string primarycontactother, string primarycontactstate, string primarycontactcity, string primarycontactzipcode, string primaryemailaddress, Nullable<bool> primaryphonesameasstudentphone, Nullable<bool> primaryisprivatecontact, string primarycontactphonenumber, Nullable<bool> primaryisprivatealtcontact, string primarycontactalternatephonenumber, Nullable<int> primaryphonenumtype, Nullable<int> primaryaltphonenumtype, Nullable<bool> primaryiscontactlegalguardian, Nullable<int> primaryprefix, Nullable<int> primarysuffix, Nullable<int> primaryemailtype, string primaryextenstion, string primaryaltextension, Nullable<int> primarypersonid, Nullable<int> primarypriority, Nullable<System.DateTime> primarystartdate, Nullable<System.DateTime> primaryenddate, Nullable<int> primaryflag, string primarycontactphones, string primarycontactphonetypes, string primarycontactphoneextensions, string primarycontactphonesprivate, string secondarycontactlastname, string secondarycontactfirstname, string secondarycontactmiddlename, Nullable<int> secondarycontactrelationshipwithstudent, Nullable<bool> secondaryiscontactlegalcustodianofstudent1, Nullable<bool> secondarysameasstudentaddress, string secondarycontactstreetnumber, string secondarycontactstreetname, string secondarycontactcountry, string secondarycontactcounty, string secondarycontactneighbourhood, string secondarycontactapartment, string secondarycontactlot, string secondarycontactother, string secondarycontactstate, string secondarycontactcity, string secondarycontactzipcode, string secondaryemailaddress, Nullable<bool> secondaryphonesameasstudentphone, Nullable<bool> secondaryisprivatecontact, string secondarycontactphonenumber, Nullable<bool> secondaryisprivatealtcontact, string secondarycontactalternatephonenumber, Nullable<int> secondaryphonenumtype, Nullable<int> secondaryaltphonenumtype, Nullable<bool> secondaryiscontactlegalguardian, Nullable<int> secondaryprefix, Nullable<int> secondarysuffix, Nullable<int> secondaryemailtype, string secondaryextenstion, string secondaryaltextension, Nullable<int> secondarypersonid, Nullable<int> secondarypriority, string secondarycontactphones, string secondarycontactphonetypes, string secondarycontactphoneextensions, string secondarycontactphonesprivate, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var childlivesewithParameter = childlivesewith.HasValue ?
                new ObjectParameter("childlivesewith", childlivesewith) :
                new ObjectParameter("childlivesewith", typeof(int));
    
            var primarycontactlastnameParameter = primarycontactlastname != null ?
                new ObjectParameter("primarycontactlastname", primarycontactlastname) :
                new ObjectParameter("primarycontactlastname", typeof(string));
    
            var primarycontactfirstnameParameter = primarycontactfirstname != null ?
                new ObjectParameter("primarycontactfirstname", primarycontactfirstname) :
                new ObjectParameter("primarycontactfirstname", typeof(string));
    
            var primarycontactmiddlenameParameter = primarycontactmiddlename != null ?
                new ObjectParameter("primarycontactmiddlename", primarycontactmiddlename) :
                new ObjectParameter("primarycontactmiddlename", typeof(string));
    
            var primarycontactrelationshipwithstudentParameter = primarycontactrelationshipwithstudent.HasValue ?
                new ObjectParameter("primarycontactrelationshipwithstudent", primarycontactrelationshipwithstudent) :
                new ObjectParameter("primarycontactrelationshipwithstudent", typeof(int));
    
            var primaryiscontactlegalcustodianofstudent1Parameter = primaryiscontactlegalcustodianofstudent1.HasValue ?
                new ObjectParameter("primaryiscontactlegalcustodianofstudent1", primaryiscontactlegalcustodianofstudent1) :
                new ObjectParameter("primaryiscontactlegalcustodianofstudent1", typeof(bool));
    
            var primarysameasstudentaddressParameter = primarysameasstudentaddress.HasValue ?
                new ObjectParameter("primarysameasstudentaddress", primarysameasstudentaddress) :
                new ObjectParameter("primarysameasstudentaddress", typeof(bool));
    
            var primarycontactstreetnumberParameter = primarycontactstreetnumber != null ?
                new ObjectParameter("primarycontactstreetnumber", primarycontactstreetnumber) :
                new ObjectParameter("primarycontactstreetnumber", typeof(string));
    
            var primarycontactstreetnameParameter = primarycontactstreetname != null ?
                new ObjectParameter("primarycontactstreetname", primarycontactstreetname) :
                new ObjectParameter("primarycontactstreetname", typeof(string));
    
            var primarycontactcountryParameter = primarycontactcountry != null ?
                new ObjectParameter("primarycontactcountry", primarycontactcountry) :
                new ObjectParameter("primarycontactcountry", typeof(string));
    
            var primarycontactcountyParameter = primarycontactcounty != null ?
                new ObjectParameter("primarycontactcounty", primarycontactcounty) :
                new ObjectParameter("primarycontactcounty", typeof(string));
    
            var primarycontactneighbourhoodParameter = primarycontactneighbourhood != null ?
                new ObjectParameter("primarycontactneighbourhood", primarycontactneighbourhood) :
                new ObjectParameter("primarycontactneighbourhood", typeof(string));
    
            var primarycontactapartmentParameter = primarycontactapartment != null ?
                new ObjectParameter("primarycontactapartment", primarycontactapartment) :
                new ObjectParameter("primarycontactapartment", typeof(string));
    
            var primarycontactlotParameter = primarycontactlot != null ?
                new ObjectParameter("primarycontactlot", primarycontactlot) :
                new ObjectParameter("primarycontactlot", typeof(string));
    
            var primarycontactotherParameter = primarycontactother != null ?
                new ObjectParameter("primarycontactother", primarycontactother) :
                new ObjectParameter("primarycontactother", typeof(string));
    
            var primarycontactstateParameter = primarycontactstate != null ?
                new ObjectParameter("primarycontactstate", primarycontactstate) :
                new ObjectParameter("primarycontactstate", typeof(string));
    
            var primarycontactcityParameter = primarycontactcity != null ?
                new ObjectParameter("primarycontactcity", primarycontactcity) :
                new ObjectParameter("primarycontactcity", typeof(string));
    
            var primarycontactzipcodeParameter = primarycontactzipcode != null ?
                new ObjectParameter("primarycontactzipcode", primarycontactzipcode) :
                new ObjectParameter("primarycontactzipcode", typeof(string));
    
            var primaryemailaddressParameter = primaryemailaddress != null ?
                new ObjectParameter("primaryemailaddress", primaryemailaddress) :
                new ObjectParameter("primaryemailaddress", typeof(string));
    
            var primaryphonesameasstudentphoneParameter = primaryphonesameasstudentphone.HasValue ?
                new ObjectParameter("primaryphonesameasstudentphone", primaryphonesameasstudentphone) :
                new ObjectParameter("primaryphonesameasstudentphone", typeof(bool));
    
            var primaryisprivatecontactParameter = primaryisprivatecontact.HasValue ?
                new ObjectParameter("primaryisprivatecontact", primaryisprivatecontact) :
                new ObjectParameter("primaryisprivatecontact", typeof(bool));
    
            var primarycontactphonenumberParameter = primarycontactphonenumber != null ?
                new ObjectParameter("primarycontactphonenumber", primarycontactphonenumber) :
                new ObjectParameter("primarycontactphonenumber", typeof(string));
    
            var primaryisprivatealtcontactParameter = primaryisprivatealtcontact.HasValue ?
                new ObjectParameter("primaryisprivatealtcontact", primaryisprivatealtcontact) :
                new ObjectParameter("primaryisprivatealtcontact", typeof(bool));
    
            var primarycontactalternatephonenumberParameter = primarycontactalternatephonenumber != null ?
                new ObjectParameter("primarycontactalternatephonenumber", primarycontactalternatephonenumber) :
                new ObjectParameter("primarycontactalternatephonenumber", typeof(string));
    
            var primaryphonenumtypeParameter = primaryphonenumtype.HasValue ?
                new ObjectParameter("primaryphonenumtype", primaryphonenumtype) :
                new ObjectParameter("primaryphonenumtype", typeof(int));
    
            var primaryaltphonenumtypeParameter = primaryaltphonenumtype.HasValue ?
                new ObjectParameter("primaryaltphonenumtype", primaryaltphonenumtype) :
                new ObjectParameter("primaryaltphonenumtype", typeof(int));
    
            var primaryiscontactlegalguardianParameter = primaryiscontactlegalguardian.HasValue ?
                new ObjectParameter("primaryiscontactlegalguardian", primaryiscontactlegalguardian) :
                new ObjectParameter("primaryiscontactlegalguardian", typeof(bool));
    
            var primaryprefixParameter = primaryprefix.HasValue ?
                new ObjectParameter("primaryprefix", primaryprefix) :
                new ObjectParameter("primaryprefix", typeof(int));
    
            var primarysuffixParameter = primarysuffix.HasValue ?
                new ObjectParameter("primarysuffix", primarysuffix) :
                new ObjectParameter("primarysuffix", typeof(int));
    
            var primaryemailtypeParameter = primaryemailtype.HasValue ?
                new ObjectParameter("primaryemailtype", primaryemailtype) :
                new ObjectParameter("primaryemailtype", typeof(int));
    
            var primaryextenstionParameter = primaryextenstion != null ?
                new ObjectParameter("primaryextenstion", primaryextenstion) :
                new ObjectParameter("primaryextenstion", typeof(string));
    
            var primaryaltextensionParameter = primaryaltextension != null ?
                new ObjectParameter("primaryaltextension", primaryaltextension) :
                new ObjectParameter("primaryaltextension", typeof(string));
    
            var primarypersonidParameter = primarypersonid.HasValue ?
                new ObjectParameter("primarypersonid", primarypersonid) :
                new ObjectParameter("primarypersonid", typeof(int));
    
            var primarypriorityParameter = primarypriority.HasValue ?
                new ObjectParameter("primarypriority", primarypriority) :
                new ObjectParameter("primarypriority", typeof(int));
    
            var primarystartdateParameter = primarystartdate.HasValue ?
                new ObjectParameter("primarystartdate", primarystartdate) :
                new ObjectParameter("primarystartdate", typeof(System.DateTime));
    
            var primaryenddateParameter = primaryenddate.HasValue ?
                new ObjectParameter("primaryenddate", primaryenddate) :
                new ObjectParameter("primaryenddate", typeof(System.DateTime));
    
            var primaryflagParameter = primaryflag.HasValue ?
                new ObjectParameter("primaryflag", primaryflag) :
                new ObjectParameter("primaryflag", typeof(int));
    
            var primarycontactphonesParameter = primarycontactphones != null ?
                new ObjectParameter("primarycontactphones", primarycontactphones) :
                new ObjectParameter("primarycontactphones", typeof(string));
    
            var primarycontactphonetypesParameter = primarycontactphonetypes != null ?
                new ObjectParameter("primarycontactphonetypes", primarycontactphonetypes) :
                new ObjectParameter("primarycontactphonetypes", typeof(string));
    
            var primarycontactphoneextensionsParameter = primarycontactphoneextensions != null ?
                new ObjectParameter("primarycontactphoneextensions", primarycontactphoneextensions) :
                new ObjectParameter("primarycontactphoneextensions", typeof(string));
    
            var primarycontactphonesprivateParameter = primarycontactphonesprivate != null ?
                new ObjectParameter("primarycontactphonesprivate", primarycontactphonesprivate) :
                new ObjectParameter("primarycontactphonesprivate", typeof(string));
    
            var secondarycontactlastnameParameter = secondarycontactlastname != null ?
                new ObjectParameter("secondarycontactlastname", secondarycontactlastname) :
                new ObjectParameter("secondarycontactlastname", typeof(string));
    
            var secondarycontactfirstnameParameter = secondarycontactfirstname != null ?
                new ObjectParameter("secondarycontactfirstname", secondarycontactfirstname) :
                new ObjectParameter("secondarycontactfirstname", typeof(string));
    
            var secondarycontactmiddlenameParameter = secondarycontactmiddlename != null ?
                new ObjectParameter("secondarycontactmiddlename", secondarycontactmiddlename) :
                new ObjectParameter("secondarycontactmiddlename", typeof(string));
    
            var secondarycontactrelationshipwithstudentParameter = secondarycontactrelationshipwithstudent.HasValue ?
                new ObjectParameter("secondarycontactrelationshipwithstudent", secondarycontactrelationshipwithstudent) :
                new ObjectParameter("secondarycontactrelationshipwithstudent", typeof(int));
    
            var secondaryiscontactlegalcustodianofstudent1Parameter = secondaryiscontactlegalcustodianofstudent1.HasValue ?
                new ObjectParameter("secondaryiscontactlegalcustodianofstudent1", secondaryiscontactlegalcustodianofstudent1) :
                new ObjectParameter("secondaryiscontactlegalcustodianofstudent1", typeof(bool));
    
            var secondarysameasstudentaddressParameter = secondarysameasstudentaddress.HasValue ?
                new ObjectParameter("secondarysameasstudentaddress", secondarysameasstudentaddress) :
                new ObjectParameter("secondarysameasstudentaddress", typeof(bool));
    
            var secondarycontactstreetnumberParameter = secondarycontactstreetnumber != null ?
                new ObjectParameter("secondarycontactstreetnumber", secondarycontactstreetnumber) :
                new ObjectParameter("secondarycontactstreetnumber", typeof(string));
    
            var secondarycontactstreetnameParameter = secondarycontactstreetname != null ?
                new ObjectParameter("secondarycontactstreetname", secondarycontactstreetname) :
                new ObjectParameter("secondarycontactstreetname", typeof(string));
    
            var secondarycontactcountryParameter = secondarycontactcountry != null ?
                new ObjectParameter("secondarycontactcountry", secondarycontactcountry) :
                new ObjectParameter("secondarycontactcountry", typeof(string));
    
            var secondarycontactcountyParameter = secondarycontactcounty != null ?
                new ObjectParameter("secondarycontactcounty", secondarycontactcounty) :
                new ObjectParameter("secondarycontactcounty", typeof(string));
    
            var secondarycontactneighbourhoodParameter = secondarycontactneighbourhood != null ?
                new ObjectParameter("secondarycontactneighbourhood", secondarycontactneighbourhood) :
                new ObjectParameter("secondarycontactneighbourhood", typeof(string));
    
            var secondarycontactapartmentParameter = secondarycontactapartment != null ?
                new ObjectParameter("secondarycontactapartment", secondarycontactapartment) :
                new ObjectParameter("secondarycontactapartment", typeof(string));
    
            var secondarycontactlotParameter = secondarycontactlot != null ?
                new ObjectParameter("secondarycontactlot", secondarycontactlot) :
                new ObjectParameter("secondarycontactlot", typeof(string));
    
            var secondarycontactotherParameter = secondarycontactother != null ?
                new ObjectParameter("secondarycontactother", secondarycontactother) :
                new ObjectParameter("secondarycontactother", typeof(string));
    
            var secondarycontactstateParameter = secondarycontactstate != null ?
                new ObjectParameter("secondarycontactstate", secondarycontactstate) :
                new ObjectParameter("secondarycontactstate", typeof(string));
    
            var secondarycontactcityParameter = secondarycontactcity != null ?
                new ObjectParameter("secondarycontactcity", secondarycontactcity) :
                new ObjectParameter("secondarycontactcity", typeof(string));
    
            var secondarycontactzipcodeParameter = secondarycontactzipcode != null ?
                new ObjectParameter("secondarycontactzipcode", secondarycontactzipcode) :
                new ObjectParameter("secondarycontactzipcode", typeof(string));
    
            var secondaryemailaddressParameter = secondaryemailaddress != null ?
                new ObjectParameter("secondaryemailaddress", secondaryemailaddress) :
                new ObjectParameter("secondaryemailaddress", typeof(string));
    
            var secondaryphonesameasstudentphoneParameter = secondaryphonesameasstudentphone.HasValue ?
                new ObjectParameter("secondaryphonesameasstudentphone", secondaryphonesameasstudentphone) :
                new ObjectParameter("secondaryphonesameasstudentphone", typeof(bool));
    
            var secondaryisprivatecontactParameter = secondaryisprivatecontact.HasValue ?
                new ObjectParameter("secondaryisprivatecontact", secondaryisprivatecontact) :
                new ObjectParameter("secondaryisprivatecontact", typeof(bool));
    
            var secondarycontactphonenumberParameter = secondarycontactphonenumber != null ?
                new ObjectParameter("secondarycontactphonenumber", secondarycontactphonenumber) :
                new ObjectParameter("secondarycontactphonenumber", typeof(string));
    
            var secondaryisprivatealtcontactParameter = secondaryisprivatealtcontact.HasValue ?
                new ObjectParameter("secondaryisprivatealtcontact", secondaryisprivatealtcontact) :
                new ObjectParameter("secondaryisprivatealtcontact", typeof(bool));
    
            var secondarycontactalternatephonenumberParameter = secondarycontactalternatephonenumber != null ?
                new ObjectParameter("secondarycontactalternatephonenumber", secondarycontactalternatephonenumber) :
                new ObjectParameter("secondarycontactalternatephonenumber", typeof(string));
    
            var secondaryphonenumtypeParameter = secondaryphonenumtype.HasValue ?
                new ObjectParameter("secondaryphonenumtype", secondaryphonenumtype) :
                new ObjectParameter("secondaryphonenumtype", typeof(int));
    
            var secondaryaltphonenumtypeParameter = secondaryaltphonenumtype.HasValue ?
                new ObjectParameter("secondaryaltphonenumtype", secondaryaltphonenumtype) :
                new ObjectParameter("secondaryaltphonenumtype", typeof(int));
    
            var secondaryiscontactlegalguardianParameter = secondaryiscontactlegalguardian.HasValue ?
                new ObjectParameter("secondaryiscontactlegalguardian", secondaryiscontactlegalguardian) :
                new ObjectParameter("secondaryiscontactlegalguardian", typeof(bool));
    
            var secondaryprefixParameter = secondaryprefix.HasValue ?
                new ObjectParameter("secondaryprefix", secondaryprefix) :
                new ObjectParameter("secondaryprefix", typeof(int));
    
            var secondarysuffixParameter = secondarysuffix.HasValue ?
                new ObjectParameter("secondarysuffix", secondarysuffix) :
                new ObjectParameter("secondarysuffix", typeof(int));
    
            var secondaryemailtypeParameter = secondaryemailtype.HasValue ?
                new ObjectParameter("secondaryemailtype", secondaryemailtype) :
                new ObjectParameter("secondaryemailtype", typeof(int));
    
            var secondaryextenstionParameter = secondaryextenstion != null ?
                new ObjectParameter("secondaryextenstion", secondaryextenstion) :
                new ObjectParameter("secondaryextenstion", typeof(string));
    
            var secondaryaltextensionParameter = secondaryaltextension != null ?
                new ObjectParameter("secondaryaltextension", secondaryaltextension) :
                new ObjectParameter("secondaryaltextension", typeof(string));
    
            var secondarypersonidParameter = secondarypersonid.HasValue ?
                new ObjectParameter("secondarypersonid", secondarypersonid) :
                new ObjectParameter("secondarypersonid", typeof(int));
    
            var secondarypriorityParameter = secondarypriority.HasValue ?
                new ObjectParameter("secondarypriority", secondarypriority) :
                new ObjectParameter("secondarypriority", typeof(int));
    
            var secondarycontactphonesParameter = secondarycontactphones != null ?
                new ObjectParameter("secondarycontactphones", secondarycontactphones) :
                new ObjectParameter("secondarycontactphones", typeof(string));
    
            var secondarycontactphonetypesParameter = secondarycontactphonetypes != null ?
                new ObjectParameter("secondarycontactphonetypes", secondarycontactphonetypes) :
                new ObjectParameter("secondarycontactphonetypes", typeof(string));
    
            var secondarycontactphoneextensionsParameter = secondarycontactphoneextensions != null ?
                new ObjectParameter("secondarycontactphoneextensions", secondarycontactphoneextensions) :
                new ObjectParameter("secondarycontactphoneextensions", typeof(string));
    
            var secondarycontactphonesprivateParameter = secondarycontactphonesprivate != null ?
                new ObjectParameter("secondarycontactphonesprivate", secondarycontactphonesprivate) :
                new ObjectParameter("secondarycontactphonesprivate", typeof(string));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateMultipleContactDetailsByStudentID", studentidParameter, childlivesewithParameter, primarycontactlastnameParameter, primarycontactfirstnameParameter, primarycontactmiddlenameParameter, primarycontactrelationshipwithstudentParameter, primaryiscontactlegalcustodianofstudent1Parameter, primarysameasstudentaddressParameter, primarycontactstreetnumberParameter, primarycontactstreetnameParameter, primarycontactcountryParameter, primarycontactcountyParameter, primarycontactneighbourhoodParameter, primarycontactapartmentParameter, primarycontactlotParameter, primarycontactotherParameter, primarycontactstateParameter, primarycontactcityParameter, primarycontactzipcodeParameter, primaryemailaddressParameter, primaryphonesameasstudentphoneParameter, primaryisprivatecontactParameter, primarycontactphonenumberParameter, primaryisprivatealtcontactParameter, primarycontactalternatephonenumberParameter, primaryphonenumtypeParameter, primaryaltphonenumtypeParameter, primaryiscontactlegalguardianParameter, primaryprefixParameter, primarysuffixParameter, primaryemailtypeParameter, primaryextenstionParameter, primaryaltextensionParameter, primarypersonidParameter, primarypriorityParameter, primarystartdateParameter, primaryenddateParameter, primaryflagParameter, primarycontactphonesParameter, primarycontactphonetypesParameter, primarycontactphoneextensionsParameter, primarycontactphonesprivateParameter, secondarycontactlastnameParameter, secondarycontactfirstnameParameter, secondarycontactmiddlenameParameter, secondarycontactrelationshipwithstudentParameter, secondaryiscontactlegalcustodianofstudent1Parameter, secondarysameasstudentaddressParameter, secondarycontactstreetnumberParameter, secondarycontactstreetnameParameter, secondarycontactcountryParameter, secondarycontactcountyParameter, secondarycontactneighbourhoodParameter, secondarycontactapartmentParameter, secondarycontactlotParameter, secondarycontactotherParameter, secondarycontactstateParameter, secondarycontactcityParameter, secondarycontactzipcodeParameter, secondaryemailaddressParameter, secondaryphonesameasstudentphoneParameter, secondaryisprivatecontactParameter, secondarycontactphonenumberParameter, secondaryisprivatealtcontactParameter, secondarycontactalternatephonenumberParameter, secondaryphonenumtypeParameter, secondaryaltphonenumtypeParameter, secondaryiscontactlegalguardianParameter, secondaryprefixParameter, secondarysuffixParameter, secondaryemailtypeParameter, secondaryextenstionParameter, secondaryaltextensionParameter, secondarypersonidParameter, secondarypriorityParameter, secondarycontactphonesParameter, secondarycontactphonetypesParameter, secondarycontactphoneextensionsParameter, secondarycontactphonesprivateParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateNextYearValidatedData(string studentIDS, string schoolIDS, string homeRooms, string gradeLevels, string stateGradeLevels, string attendancePatterns, string returningYN, Nullable<int> createdBY, Nullable<System.DateTime> createdDate)
        {
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var schoolIDSParameter = schoolIDS != null ?
                new ObjectParameter("SchoolIDS", schoolIDS) :
                new ObjectParameter("SchoolIDS", typeof(string));
    
            var homeRoomsParameter = homeRooms != null ?
                new ObjectParameter("HomeRooms", homeRooms) :
                new ObjectParameter("HomeRooms", typeof(string));
    
            var gradeLevelsParameter = gradeLevels != null ?
                new ObjectParameter("GradeLevels", gradeLevels) :
                new ObjectParameter("GradeLevels", typeof(string));
    
            var stateGradeLevelsParameter = stateGradeLevels != null ?
                new ObjectParameter("StateGradeLevels", stateGradeLevels) :
                new ObjectParameter("StateGradeLevels", typeof(string));
    
            var attendancePatternsParameter = attendancePatterns != null ?
                new ObjectParameter("AttendancePatterns", attendancePatterns) :
                new ObjectParameter("AttendancePatterns", typeof(string));
    
            var returningYNParameter = returningYN != null ?
                new ObjectParameter("ReturningYN", returningYN) :
                new ObjectParameter("ReturningYN", typeof(string));
    
            var createdBYParameter = createdBY.HasValue ?
                new ObjectParameter("CreatedBY", createdBY) :
                new ObjectParameter("CreatedBY", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateNextYearValidatedData", studentIDSParameter, schoolIDSParameter, homeRoomsParameter, gradeLevelsParameter, stateGradeLevelsParameter, attendancePatternsParameter, returningYNParameter, createdBYParameter, createdDateParameter);
        }
    
        public virtual int uspUpdateOffenders(Nullable<int> offenderid, Nullable<int> offendertype, Nullable<int> studentstatus, Nullable<int> student, Nullable<int> gradelevel, string otheroffenderfullname, Nullable<int> age, Nullable<int> staff, Nullable<System.DateTime> actionstartdate, Nullable<System.DateTime> actionenddate, Nullable<int> actiontakentype, Nullable<int> suspensiondays, string actiondescription, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var offenderidParameter = offenderid.HasValue ?
                new ObjectParameter("offenderid", offenderid) :
                new ObjectParameter("offenderid", typeof(int));
    
            var offendertypeParameter = offendertype.HasValue ?
                new ObjectParameter("offendertype", offendertype) :
                new ObjectParameter("offendertype", typeof(int));
    
            var studentstatusParameter = studentstatus.HasValue ?
                new ObjectParameter("studentstatus", studentstatus) :
                new ObjectParameter("studentstatus", typeof(int));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("student", student) :
                new ObjectParameter("student", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var otheroffenderfullnameParameter = otheroffenderfullname != null ?
                new ObjectParameter("otheroffenderfullname", otheroffenderfullname) :
                new ObjectParameter("otheroffenderfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var staffParameter = staff.HasValue ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(int));
    
            var actionstartdateParameter = actionstartdate.HasValue ?
                new ObjectParameter("actionstartdate", actionstartdate) :
                new ObjectParameter("actionstartdate", typeof(System.DateTime));
    
            var actionenddateParameter = actionenddate.HasValue ?
                new ObjectParameter("actionenddate", actionenddate) :
                new ObjectParameter("actionenddate", typeof(System.DateTime));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var suspensiondaysParameter = suspensiondays.HasValue ?
                new ObjectParameter("suspensiondays", suspensiondays) :
                new ObjectParameter("suspensiondays", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateOffenders", offenderidParameter, offendertypeParameter, studentstatusParameter, studentParameter, gradelevelParameter, otheroffenderfullnameParameter, ageParameter, staffParameter, actionstartdateParameter, actionenddateParameter, actiontakentypeParameter, suspensiondaysParameter, actiondescriptionParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateOrientationDetails(Nullable<int> orientationid, string remarks, Nullable<int> orientaionstatus, Nullable<int> advisorpersonid, Nullable<int> enrollmentcodepl, Nullable<int> districtrelationcode, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var orientationidParameter = orientationid.HasValue ?
                new ObjectParameter("orientationid", orientationid) :
                new ObjectParameter("orientationid", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var orientaionstatusParameter = orientaionstatus.HasValue ?
                new ObjectParameter("orientaionstatus", orientaionstatus) :
                new ObjectParameter("orientaionstatus", typeof(int));
    
            var advisorpersonidParameter = advisorpersonid.HasValue ?
                new ObjectParameter("advisorpersonid", advisorpersonid) :
                new ObjectParameter("advisorpersonid", typeof(int));
    
            var enrollmentcodeplParameter = enrollmentcodepl.HasValue ?
                new ObjectParameter("enrollmentcodepl", enrollmentcodepl) :
                new ObjectParameter("enrollmentcodepl", typeof(int));
    
            var districtrelationcodeParameter = districtrelationcode.HasValue ?
                new ObjectParameter("districtrelationcode", districtrelationcode) :
                new ObjectParameter("districtrelationcode", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateOrientationDetails", orientationidParameter, remarksParameter, orientaionstatusParameter, advisorpersonidParameter, enrollmentcodeplParameter, districtrelationcodeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateOrientationDetailsByOrientationID(Nullable<int> orientationscheduleid, string orientationdate, string orientationtime, Nullable<int> orientationtypepl, Nullable<int> counselorid, Nullable<int> location, Nullable<int> room, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var orientationscheduleidParameter = orientationscheduleid.HasValue ?
                new ObjectParameter("orientationscheduleid", orientationscheduleid) :
                new ObjectParameter("orientationscheduleid", typeof(int));
    
            var orientationdateParameter = orientationdate != null ?
                new ObjectParameter("orientationdate", orientationdate) :
                new ObjectParameter("orientationdate", typeof(string));
    
            var orientationtimeParameter = orientationtime != null ?
                new ObjectParameter("orientationtime", orientationtime) :
                new ObjectParameter("orientationtime", typeof(string));
    
            var orientationtypeplParameter = orientationtypepl.HasValue ?
                new ObjectParameter("orientationtypepl", orientationtypepl) :
                new ObjectParameter("orientationtypepl", typeof(int));
    
            var counseloridParameter = counselorid.HasValue ?
                new ObjectParameter("counselorid", counselorid) :
                new ObjectParameter("counselorid", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var roomParameter = room.HasValue ?
                new ObjectParameter("room", room) :
                new ObjectParameter("room", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateOrientationDetailsByOrientationID", orientationscheduleidParameter, orientationdateParameter, orientationtimeParameter, orientationtypeplParameter, counseloridParameter, locationParameter, roomParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdatePeriodDetails(Nullable<int> periodID, string periodNumber, string periodName, Nullable<int> sortOrder, string abbreviation, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var periodIDParameter = periodID.HasValue ?
                new ObjectParameter("PeriodID", periodID) :
                new ObjectParameter("PeriodID", typeof(int));
    
            var periodNumberParameter = periodNumber != null ?
                new ObjectParameter("PeriodNumber", periodNumber) :
                new ObjectParameter("PeriodNumber", typeof(string));
    
            var periodNameParameter = periodName != null ?
                new ObjectParameter("PeriodName", periodName) :
                new ObjectParameter("PeriodName", typeof(string));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdatePeriodDetails", periodIDParameter, periodNumberParameter, periodNameParameter, sortOrderParameter, abbreviationParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdatePortalUserLoginDetails(Nullable<int> loginUserID, string userRole, Nullable<System.TimeSpan> logoutTime)
        {
            var loginUserIDParameter = loginUserID.HasValue ?
                new ObjectParameter("LoginUserID", loginUserID) :
                new ObjectParameter("LoginUserID", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var logoutTimeParameter = logoutTime.HasValue ?
                new ObjectParameter("LogoutTime", logoutTime) :
                new ObjectParameter("LogoutTime", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdatePortalUserLoginDetails", loginUserIDParameter, userRoleParameter, logoutTimeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateReenrolledStudentAddressContactInfo(Nullable<int> applicationID, Nullable<int> studentID, Nullable<System.DateTime> homeAddressFromDate, Nullable<System.DateTime> homeAddressToDate, Nullable<bool> addressFlag, Nullable<System.DateTime> primaryContactFromDate, Nullable<System.DateTime> primaryContactToDate, Nullable<bool> contactFlag, Nullable<int> createdBy, Nullable<System.DateTime> createdDAte)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var homeAddressFromDateParameter = homeAddressFromDate.HasValue ?
                new ObjectParameter("HomeAddressFromDate", homeAddressFromDate) :
                new ObjectParameter("HomeAddressFromDate", typeof(System.DateTime));
    
            var homeAddressToDateParameter = homeAddressToDate.HasValue ?
                new ObjectParameter("HomeAddressToDate", homeAddressToDate) :
                new ObjectParameter("HomeAddressToDate", typeof(System.DateTime));
    
            var addressFlagParameter = addressFlag.HasValue ?
                new ObjectParameter("AddressFlag", addressFlag) :
                new ObjectParameter("AddressFlag", typeof(bool));
    
            var primaryContactFromDateParameter = primaryContactFromDate.HasValue ?
                new ObjectParameter("PrimaryContactFromDate", primaryContactFromDate) :
                new ObjectParameter("PrimaryContactFromDate", typeof(System.DateTime));
    
            var primaryContactToDateParameter = primaryContactToDate.HasValue ?
                new ObjectParameter("PrimaryContactToDate", primaryContactToDate) :
                new ObjectParameter("PrimaryContactToDate", typeof(System.DateTime));
    
            var contactFlagParameter = contactFlag.HasValue ?
                new ObjectParameter("ContactFlag", contactFlag) :
                new ObjectParameter("ContactFlag", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDAteParameter = createdDAte.HasValue ?
                new ObjectParameter("CreatedDAte", createdDAte) :
                new ObjectParameter("CreatedDAte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateReenrolledStudentAddressContactInfo", applicationIDParameter, studentIDParameter, homeAddressFromDateParameter, homeAddressToDateParameter, addressFlagParameter, primaryContactFromDateParameter, primaryContactToDateParameter, contactFlagParameter, createdByParameter, createdDAteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateRegistrationDemographics(string firstname, string middlename, string lastname, Nullable<int> suffix, string nickname, string mothersmaidenname, string homestreetnumber, string homestreetname, string homestate, string homecity, string homecountry, string homezipcode, string homecounty, string homeneighbourhood, Nullable<bool> ishomeprivate, string homephonenumber, Nullable<bool> ishomealtprivate, string alternatephonenumber, Nullable<bool> mailingaddresssameashomeaddress, string mailingstreetnumber, string mailingstreetname, string mailingstate, string mailingcity, string mailingcountry, string mailingzipcode, string mailingcounty, string mailingneighbourhood, string mailingapartment, string mailinglot, string mailingother, string dateofbirth, string age, Nullable<int> homelesstype, string birthplacecity, Nullable<bool> migrant, Nullable<int> areyouhispanic, Nullable<bool> racecheck1, Nullable<bool> racecheck2, Nullable<bool> racecheck3, Nullable<bool> racecheck4, Nullable<bool> racecheck5, Nullable<int> gender, Nullable<int> schoolid, string filepath, Nullable<int> homephonenumtype, Nullable<int> altphonenumtype, Nullable<int> id, Nullable<int> militarypl, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var suffixParameter = suffix.HasValue ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var mothersmaidennameParameter = mothersmaidenname != null ?
                new ObjectParameter("mothersmaidenname", mothersmaidenname) :
                new ObjectParameter("mothersmaidenname", typeof(string));
    
            var homestreetnumberParameter = homestreetnumber != null ?
                new ObjectParameter("homestreetnumber", homestreetnumber) :
                new ObjectParameter("homestreetnumber", typeof(string));
    
            var homestreetnameParameter = homestreetname != null ?
                new ObjectParameter("homestreetname", homestreetname) :
                new ObjectParameter("homestreetname", typeof(string));
    
            var homestateParameter = homestate != null ?
                new ObjectParameter("homestate", homestate) :
                new ObjectParameter("homestate", typeof(string));
    
            var homecityParameter = homecity != null ?
                new ObjectParameter("homecity", homecity) :
                new ObjectParameter("homecity", typeof(string));
    
            var homecountryParameter = homecountry != null ?
                new ObjectParameter("homecountry", homecountry) :
                new ObjectParameter("homecountry", typeof(string));
    
            var homezipcodeParameter = homezipcode != null ?
                new ObjectParameter("homezipcode", homezipcode) :
                new ObjectParameter("homezipcode", typeof(string));
    
            var homecountyParameter = homecounty != null ?
                new ObjectParameter("homecounty", homecounty) :
                new ObjectParameter("homecounty", typeof(string));
    
            var homeneighbourhoodParameter = homeneighbourhood != null ?
                new ObjectParameter("homeneighbourhood", homeneighbourhood) :
                new ObjectParameter("homeneighbourhood", typeof(string));
    
            var ishomeprivateParameter = ishomeprivate.HasValue ?
                new ObjectParameter("ishomeprivate", ishomeprivate) :
                new ObjectParameter("ishomeprivate", typeof(bool));
    
            var homephonenumberParameter = homephonenumber != null ?
                new ObjectParameter("homephonenumber", homephonenumber) :
                new ObjectParameter("homephonenumber", typeof(string));
    
            var ishomealtprivateParameter = ishomealtprivate.HasValue ?
                new ObjectParameter("ishomealtprivate", ishomealtprivate) :
                new ObjectParameter("ishomealtprivate", typeof(bool));
    
            var alternatephonenumberParameter = alternatephonenumber != null ?
                new ObjectParameter("alternatephonenumber", alternatephonenumber) :
                new ObjectParameter("alternatephonenumber", typeof(string));
    
            var mailingaddresssameashomeaddressParameter = mailingaddresssameashomeaddress.HasValue ?
                new ObjectParameter("mailingaddresssameashomeaddress", mailingaddresssameashomeaddress) :
                new ObjectParameter("mailingaddresssameashomeaddress", typeof(bool));
    
            var mailingstreetnumberParameter = mailingstreetnumber != null ?
                new ObjectParameter("mailingstreetnumber", mailingstreetnumber) :
                new ObjectParameter("mailingstreetnumber", typeof(string));
    
            var mailingstreetnameParameter = mailingstreetname != null ?
                new ObjectParameter("mailingstreetname", mailingstreetname) :
                new ObjectParameter("mailingstreetname", typeof(string));
    
            var mailingstateParameter = mailingstate != null ?
                new ObjectParameter("mailingstate", mailingstate) :
                new ObjectParameter("mailingstate", typeof(string));
    
            var mailingcityParameter = mailingcity != null ?
                new ObjectParameter("mailingcity", mailingcity) :
                new ObjectParameter("mailingcity", typeof(string));
    
            var mailingcountryParameter = mailingcountry != null ?
                new ObjectParameter("mailingcountry", mailingcountry) :
                new ObjectParameter("mailingcountry", typeof(string));
    
            var mailingzipcodeParameter = mailingzipcode != null ?
                new ObjectParameter("mailingzipcode", mailingzipcode) :
                new ObjectParameter("mailingzipcode", typeof(string));
    
            var mailingcountyParameter = mailingcounty != null ?
                new ObjectParameter("mailingcounty", mailingcounty) :
                new ObjectParameter("mailingcounty", typeof(string));
    
            var mailingneighbourhoodParameter = mailingneighbourhood != null ?
                new ObjectParameter("mailingneighbourhood", mailingneighbourhood) :
                new ObjectParameter("mailingneighbourhood", typeof(string));
    
            var mailingapartmentParameter = mailingapartment != null ?
                new ObjectParameter("mailingapartment", mailingapartment) :
                new ObjectParameter("mailingapartment", typeof(string));
    
            var mailinglotParameter = mailinglot != null ?
                new ObjectParameter("mailinglot", mailinglot) :
                new ObjectParameter("mailinglot", typeof(string));
    
            var mailingotherParameter = mailingother != null ?
                new ObjectParameter("mailingother", mailingother) :
                new ObjectParameter("mailingother", typeof(string));
    
            var dateofbirthParameter = dateofbirth != null ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var homelesstypeParameter = homelesstype.HasValue ?
                new ObjectParameter("homelesstype", homelesstype) :
                new ObjectParameter("homelesstype", typeof(int));
    
            var birthplacecityParameter = birthplacecity != null ?
                new ObjectParameter("birthplacecity", birthplacecity) :
                new ObjectParameter("birthplacecity", typeof(string));
    
            var migrantParameter = migrant.HasValue ?
                new ObjectParameter("migrant", migrant) :
                new ObjectParameter("migrant", typeof(bool));
    
            var areyouhispanicParameter = areyouhispanic.HasValue ?
                new ObjectParameter("areyouhispanic", areyouhispanic) :
                new ObjectParameter("areyouhispanic", typeof(int));
    
            var racecheck1Parameter = racecheck1.HasValue ?
                new ObjectParameter("racecheck1", racecheck1) :
                new ObjectParameter("racecheck1", typeof(bool));
    
            var racecheck2Parameter = racecheck2.HasValue ?
                new ObjectParameter("racecheck2", racecheck2) :
                new ObjectParameter("racecheck2", typeof(bool));
    
            var racecheck3Parameter = racecheck3.HasValue ?
                new ObjectParameter("racecheck3", racecheck3) :
                new ObjectParameter("racecheck3", typeof(bool));
    
            var racecheck4Parameter = racecheck4.HasValue ?
                new ObjectParameter("racecheck4", racecheck4) :
                new ObjectParameter("racecheck4", typeof(bool));
    
            var racecheck5Parameter = racecheck5.HasValue ?
                new ObjectParameter("racecheck5", racecheck5) :
                new ObjectParameter("racecheck5", typeof(bool));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var filepathParameter = filepath != null ?
                new ObjectParameter("filepath", filepath) :
                new ObjectParameter("filepath", typeof(string));
    
            var homephonenumtypeParameter = homephonenumtype.HasValue ?
                new ObjectParameter("homephonenumtype", homephonenumtype) :
                new ObjectParameter("homephonenumtype", typeof(int));
    
            var altphonenumtypeParameter = altphonenumtype.HasValue ?
                new ObjectParameter("altphonenumtype", altphonenumtype) :
                new ObjectParameter("altphonenumtype", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var militaryplParameter = militarypl.HasValue ?
                new ObjectParameter("militarypl", militarypl) :
                new ObjectParameter("militarypl", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateRegistrationDemographics", firstnameParameter, middlenameParameter, lastnameParameter, suffixParameter, nicknameParameter, mothersmaidennameParameter, homestreetnumberParameter, homestreetnameParameter, homestateParameter, homecityParameter, homecountryParameter, homezipcodeParameter, homecountyParameter, homeneighbourhoodParameter, ishomeprivateParameter, homephonenumberParameter, ishomealtprivateParameter, alternatephonenumberParameter, mailingaddresssameashomeaddressParameter, mailingstreetnumberParameter, mailingstreetnameParameter, mailingstateParameter, mailingcityParameter, mailingcountryParameter, mailingzipcodeParameter, mailingcountyParameter, mailingneighbourhoodParameter, mailingapartmentParameter, mailinglotParameter, mailingotherParameter, dateofbirthParameter, ageParameter, homelesstypeParameter, birthplacecityParameter, migrantParameter, areyouhispanicParameter, racecheck1Parameter, racecheck2Parameter, racecheck3Parameter, racecheck4Parameter, racecheck5Parameter, genderParameter, schoolidParameter, filepathParameter, homephonenumtypeParameter, altphonenumtypeParameter, idParameter, militaryplParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateReporter(Nullable<int> reporterid, Nullable<int> disciplinereportertype, Nullable<int> student, Nullable<int> gradelevel, Nullable<int> staff, string otherreporterfullname, Nullable<int> age, Nullable<int> actiontakentype, string actiondescription, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var reporteridParameter = reporterid.HasValue ?
                new ObjectParameter("reporterid", reporterid) :
                new ObjectParameter("reporterid", typeof(int));
    
            var disciplinereportertypeParameter = disciplinereportertype.HasValue ?
                new ObjectParameter("disciplinereportertype", disciplinereportertype) :
                new ObjectParameter("disciplinereportertype", typeof(int));
    
            var studentParameter = student.HasValue ?
                new ObjectParameter("student", student) :
                new ObjectParameter("student", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var staffParameter = staff.HasValue ?
                new ObjectParameter("staff", staff) :
                new ObjectParameter("staff", typeof(int));
    
            var otherreporterfullnameParameter = otherreporterfullname != null ?
                new ObjectParameter("otherreporterfullname", otherreporterfullname) :
                new ObjectParameter("otherreporterfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var actiontakentypeParameter = actiontakentype.HasValue ?
                new ObjectParameter("actiontakentype", actiontakentype) :
                new ObjectParameter("actiontakentype", typeof(int));
    
            var actiondescriptionParameter = actiondescription != null ?
                new ObjectParameter("actiondescription", actiondescription) :
                new ObjectParameter("actiondescription", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateReporter", reporteridParameter, disciplinereportertypeParameter, studentParameter, gradelevelParameter, staffParameter, otherreporterfullnameParameter, ageParameter, actiontakentypeParameter, actiondescriptionParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateRooms(Nullable<int> roomid, string roomnumber, string roomname, Nullable<int> schoolid, Nullable<int> roomtypepl, Nullable<int> roomcapacity, Nullable<bool> roomstatus, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var roomidParameter = roomid.HasValue ?
                new ObjectParameter("roomid", roomid) :
                new ObjectParameter("roomid", typeof(int));
    
            var roomnumberParameter = roomnumber != null ?
                new ObjectParameter("roomnumber", roomnumber) :
                new ObjectParameter("roomnumber", typeof(string));
    
            var roomnameParameter = roomname != null ?
                new ObjectParameter("roomname", roomname) :
                new ObjectParameter("roomname", typeof(string));
    
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var roomtypeplParameter = roomtypepl.HasValue ?
                new ObjectParameter("roomtypepl", roomtypepl) :
                new ObjectParameter("roomtypepl", typeof(int));
    
            var roomcapacityParameter = roomcapacity.HasValue ?
                new ObjectParameter("roomcapacity", roomcapacity) :
                new ObjectParameter("roomcapacity", typeof(int));
    
            var roomstatusParameter = roomstatus.HasValue ?
                new ObjectParameter("roomstatus", roomstatus) :
                new ObjectParameter("roomstatus", typeof(bool));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateRooms", roomidParameter, roomnumberParameter, roomnameParameter, schoolidParameter, roomtypeplParameter, roomcapacityParameter, roomstatusParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchool(Nullable<int> schoolid, string schoolirn, string schoolname, Nullable<bool> excludestatereporting, Nullable<bool> isevolveschool, Nullable<bool> orientation, Nullable<int> districtid, byte[] schoolpicture, byte[] schoollogo, string schooladdresstypes, string schoolstreetnumbers, string schoolstreetnames, string schoolcities, string schoolstates, string schoolcountries, string schoolzipcodes, string schoolcounties, string schoolneighbourhoods, string schoolphones, string schoolphonetypes, string faxnumber, string recordsemail, string staffids, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolidParameter = schoolid.HasValue ?
                new ObjectParameter("schoolid", schoolid) :
                new ObjectParameter("schoolid", typeof(int));
    
            var schoolirnParameter = schoolirn != null ?
                new ObjectParameter("schoolirn", schoolirn) :
                new ObjectParameter("schoolirn", typeof(string));
    
            var schoolnameParameter = schoolname != null ?
                new ObjectParameter("schoolname", schoolname) :
                new ObjectParameter("schoolname", typeof(string));
    
            var excludestatereportingParameter = excludestatereporting.HasValue ?
                new ObjectParameter("excludestatereporting", excludestatereporting) :
                new ObjectParameter("excludestatereporting", typeof(bool));
    
            var isevolveschoolParameter = isevolveschool.HasValue ?
                new ObjectParameter("isevolveschool", isevolveschool) :
                new ObjectParameter("isevolveschool", typeof(bool));
    
            var orientationParameter = orientation.HasValue ?
                new ObjectParameter("orientation", orientation) :
                new ObjectParameter("orientation", typeof(bool));
    
            var districtidParameter = districtid.HasValue ?
                new ObjectParameter("districtid", districtid) :
                new ObjectParameter("districtid", typeof(int));
    
            var schoolpictureParameter = schoolpicture != null ?
                new ObjectParameter("schoolpicture", schoolpicture) :
                new ObjectParameter("schoolpicture", typeof(byte[]));
    
            var schoollogoParameter = schoollogo != null ?
                new ObjectParameter("schoollogo", schoollogo) :
                new ObjectParameter("schoollogo", typeof(byte[]));
    
            var schooladdresstypesParameter = schooladdresstypes != null ?
                new ObjectParameter("schooladdresstypes", schooladdresstypes) :
                new ObjectParameter("schooladdresstypes", typeof(string));
    
            var schoolstreetnumbersParameter = schoolstreetnumbers != null ?
                new ObjectParameter("schoolstreetnumbers", schoolstreetnumbers) :
                new ObjectParameter("schoolstreetnumbers", typeof(string));
    
            var schoolstreetnamesParameter = schoolstreetnames != null ?
                new ObjectParameter("schoolstreetnames", schoolstreetnames) :
                new ObjectParameter("schoolstreetnames", typeof(string));
    
            var schoolcitiesParameter = schoolcities != null ?
                new ObjectParameter("schoolcities", schoolcities) :
                new ObjectParameter("schoolcities", typeof(string));
    
            var schoolstatesParameter = schoolstates != null ?
                new ObjectParameter("schoolstates", schoolstates) :
                new ObjectParameter("schoolstates", typeof(string));
    
            var schoolcountriesParameter = schoolcountries != null ?
                new ObjectParameter("schoolcountries", schoolcountries) :
                new ObjectParameter("schoolcountries", typeof(string));
    
            var schoolzipcodesParameter = schoolzipcodes != null ?
                new ObjectParameter("schoolzipcodes", schoolzipcodes) :
                new ObjectParameter("schoolzipcodes", typeof(string));
    
            var schoolcountiesParameter = schoolcounties != null ?
                new ObjectParameter("schoolcounties", schoolcounties) :
                new ObjectParameter("schoolcounties", typeof(string));
    
            var schoolneighbourhoodsParameter = schoolneighbourhoods != null ?
                new ObjectParameter("schoolneighbourhoods", schoolneighbourhoods) :
                new ObjectParameter("schoolneighbourhoods", typeof(string));
    
            var schoolphonesParameter = schoolphones != null ?
                new ObjectParameter("schoolphones", schoolphones) :
                new ObjectParameter("schoolphones", typeof(string));
    
            var schoolphonetypesParameter = schoolphonetypes != null ?
                new ObjectParameter("schoolphonetypes", schoolphonetypes) :
                new ObjectParameter("schoolphonetypes", typeof(string));
    
            var faxnumberParameter = faxnumber != null ?
                new ObjectParameter("faxnumber", faxnumber) :
                new ObjectParameter("faxnumber", typeof(string));
    
            var recordsemailParameter = recordsemail != null ?
                new ObjectParameter("recordsemail", recordsemail) :
                new ObjectParameter("recordsemail", typeof(string));
    
            var staffidsParameter = staffids != null ?
                new ObjectParameter("staffids", staffids) :
                new ObjectParameter("staffids", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchool", schoolidParameter, schoolirnParameter, schoolnameParameter, excludestatereportingParameter, isevolveschoolParameter, orientationParameter, districtidParameter, schoolpictureParameter, schoollogoParameter, schooladdresstypesParameter, schoolstreetnumbersParameter, schoolstreetnamesParameter, schoolcitiesParameter, schoolstatesParameter, schoolcountriesParameter, schoolzipcodesParameter, schoolcountiesParameter, schoolneighbourhoodsParameter, schoolphonesParameter, schoolphonetypesParameter, faxnumberParameter, recordsemailParameter, staffidsParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolAttendancePattern(Nullable<int> schoolAttendancePatternID, string scheduleDays, Nullable<decimal> totalPatternDays, Nullable<decimal> totalEventDays, Nullable<decimal> attenancePatternEventHours, string scheduleGradeLevels, Nullable<bool> isAvailToSPED, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolAttendancePatternIDParameter = schoolAttendancePatternID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternID", schoolAttendancePatternID) :
                new ObjectParameter("SchoolAttendancePatternID", typeof(int));
    
            var scheduleDaysParameter = scheduleDays != null ?
                new ObjectParameter("ScheduleDays", scheduleDays) :
                new ObjectParameter("ScheduleDays", typeof(string));
    
            var totalPatternDaysParameter = totalPatternDays.HasValue ?
                new ObjectParameter("TotalPatternDays", totalPatternDays) :
                new ObjectParameter("TotalPatternDays", typeof(decimal));
    
            var totalEventDaysParameter = totalEventDays.HasValue ?
                new ObjectParameter("TotalEventDays", totalEventDays) :
                new ObjectParameter("TotalEventDays", typeof(decimal));
    
            var attenancePatternEventHoursParameter = attenancePatternEventHours.HasValue ?
                new ObjectParameter("AttenancePatternEventHours", attenancePatternEventHours) :
                new ObjectParameter("AttenancePatternEventHours", typeof(decimal));
    
            var scheduleGradeLevelsParameter = scheduleGradeLevels != null ?
                new ObjectParameter("ScheduleGradeLevels", scheduleGradeLevels) :
                new ObjectParameter("ScheduleGradeLevels", typeof(string));
    
            var isAvailToSPEDParameter = isAvailToSPED.HasValue ?
                new ObjectParameter("IsAvailToSPED", isAvailToSPED) :
                new ObjectParameter("IsAvailToSPED", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolAttendancePattern", schoolAttendancePatternIDParameter, scheduleDaysParameter, totalPatternDaysParameter, totalEventDaysParameter, attenancePatternEventHoursParameter, scheduleGradeLevelsParameter, isAvailToSPEDParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspupdateSchoolAttendancePatternEvent(Nullable<int> schoolAttendancePatternEventID, string patternDescription, Nullable<int> calendarEventPL, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> hours, string scheduledGradeLevels, Nullable<bool> isStudentDays, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolAttendancePatternEventIDParameter = schoolAttendancePatternEventID.HasValue ?
                new ObjectParameter("SchoolAttendancePatternEventID", schoolAttendancePatternEventID) :
                new ObjectParameter("SchoolAttendancePatternEventID", typeof(int));
    
            var patternDescriptionParameter = patternDescription != null ?
                new ObjectParameter("PatternDescription", patternDescription) :
                new ObjectParameter("PatternDescription", typeof(string));
    
            var calendarEventPLParameter = calendarEventPL.HasValue ?
                new ObjectParameter("CalendarEventPL", calendarEventPL) :
                new ObjectParameter("CalendarEventPL", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var hoursParameter = hours.HasValue ?
                new ObjectParameter("Hours", hours) :
                new ObjectParameter("Hours", typeof(decimal));
    
            var scheduledGradeLevelsParameter = scheduledGradeLevels != null ?
                new ObjectParameter("ScheduledGradeLevels", scheduledGradeLevels) :
                new ObjectParameter("ScheduledGradeLevels", typeof(string));
    
            var isStudentDaysParameter = isStudentDays.HasValue ?
                new ObjectParameter("IsStudentDays", isStudentDays) :
                new ObjectParameter("IsStudentDays", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspupdateSchoolAttendancePatternEvent", schoolAttendancePatternEventIDParameter, patternDescriptionParameter, calendarEventPLParameter, startDateParameter, endDateParameter, hoursParameter, scheduledGradeLevelsParameter, isStudentDaysParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolAttendancePatterns(string valuesArray, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var valuesArrayParameter = valuesArray != null ?
                new ObjectParameter("ValuesArray", valuesArray) :
                new ObjectParameter("ValuesArray", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolAttendancePatterns", valuesArrayParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolCourse(Nullable<int> schoolCourseID, string buildingCourseName, string buildingCourseNumber, Nullable<decimal> creditHours, Nullable<int> defaultMaximumEnrollment, Nullable<int> maximumTimesforCredit, Nullable<int> gradeScale, Nullable<decimal> addedGPAValue, Nullable<int> stateSubjectCode, Nullable<int> department, Nullable<int> courseLevel, Nullable<int> cOREAreaCode, Nullable<int> semesterCode, Nullable<int> lengthofScheduledInstruction, Nullable<int> suggestedMinimumGradeLevel, Nullable<int> subjectAreaForCredit, Nullable<int> languageUsedinTeachingCourse, string locationIRN, Nullable<int> studentPopulation, Nullable<int> educationalOption, Nullable<int> cTECollegeCredit, Nullable<int> creditFlexibilityCode, Nullable<int> deliveryMethod, Nullable<int> curriculum, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> honorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isEMISReporting, Nullable<bool> isRosterVerification, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolId, Nullable<int> schoolYearId, string gradReqDetailsArray)
        {
            var schoolCourseIDParameter = schoolCourseID.HasValue ?
                new ObjectParameter("SchoolCourseID", schoolCourseID) :
                new ObjectParameter("SchoolCourseID", typeof(int));
    
            var buildingCourseNameParameter = buildingCourseName != null ?
                new ObjectParameter("BuildingCourseName", buildingCourseName) :
                new ObjectParameter("BuildingCourseName", typeof(string));
    
            var buildingCourseNumberParameter = buildingCourseNumber != null ?
                new ObjectParameter("BuildingCourseNumber", buildingCourseNumber) :
                new ObjectParameter("BuildingCourseNumber", typeof(string));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var defaultMaximumEnrollmentParameter = defaultMaximumEnrollment.HasValue ?
                new ObjectParameter("DefaultMaximumEnrollment", defaultMaximumEnrollment) :
                new ObjectParameter("DefaultMaximumEnrollment", typeof(int));
    
            var maximumTimesforCreditParameter = maximumTimesforCredit.HasValue ?
                new ObjectParameter("MaximumTimesforCredit", maximumTimesforCredit) :
                new ObjectParameter("MaximumTimesforCredit", typeof(int));
    
            var gradeScaleParameter = gradeScale.HasValue ?
                new ObjectParameter("GradeScale", gradeScale) :
                new ObjectParameter("GradeScale", typeof(int));
    
            var addedGPAValueParameter = addedGPAValue.HasValue ?
                new ObjectParameter("AddedGPAValue", addedGPAValue) :
                new ObjectParameter("AddedGPAValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var cOREAreaCodeParameter = cOREAreaCode.HasValue ?
                new ObjectParameter("COREAreaCode", cOREAreaCode) :
                new ObjectParameter("COREAreaCode", typeof(int));
    
            var semesterCodeParameter = semesterCode.HasValue ?
                new ObjectParameter("SemesterCode", semesterCode) :
                new ObjectParameter("SemesterCode", typeof(int));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var suggestedMinimumGradeLevelParameter = suggestedMinimumGradeLevel.HasValue ?
                new ObjectParameter("SuggestedMinimumGradeLevel", suggestedMinimumGradeLevel) :
                new ObjectParameter("SuggestedMinimumGradeLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var languageUsedinTeachingCourseParameter = languageUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageUsedinTeachingCourse", languageUsedinTeachingCourse) :
                new ObjectParameter("LanguageUsedinTeachingCourse", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var studentPopulationParameter = studentPopulation.HasValue ?
                new ObjectParameter("StudentPopulation", studentPopulation) :
                new ObjectParameter("StudentPopulation", typeof(int));
    
            var educationalOptionParameter = educationalOption.HasValue ?
                new ObjectParameter("EducationalOption", educationalOption) :
                new ObjectParameter("EducationalOption", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var deliveryMethodParameter = deliveryMethod.HasValue ?
                new ObjectParameter("DeliveryMethod", deliveryMethod) :
                new ObjectParameter("DeliveryMethod", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var honorRollParameter = honorRoll.HasValue ?
                new ObjectParameter("HonorRoll", honorRoll) :
                new ObjectParameter("HonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var gradReqDetailsArrayParameter = gradReqDetailsArray != null ?
                new ObjectParameter("GradReqDetailsArray", gradReqDetailsArray) :
                new ObjectParameter("GradReqDetailsArray", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolCourse", schoolCourseIDParameter, buildingCourseNameParameter, buildingCourseNumberParameter, creditHoursParameter, defaultMaximumEnrollmentParameter, maximumTimesforCreditParameter, gradeScaleParameter, addedGPAValueParameter, stateSubjectCodeParameter, departmentParameter, courseLevelParameter, cOREAreaCodeParameter, semesterCodeParameter, lengthofScheduledInstructionParameter, suggestedMinimumGradeLevelParameter, subjectAreaForCreditParameter, languageUsedinTeachingCourseParameter, locationIRNParameter, studentPopulationParameter, educationalOptionParameter, cTECollegeCreditParameter, creditFlexibilityCodeParameter, deliveryMethodParameter, curriculumParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, honorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isEMISReportingParameter, isRosterVerificationParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, schoolIdParameter, schoolYearIdParameter, gradReqDetailsArrayParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolCourseSection(Nullable<int> sectionId, Nullable<int> buildingCourseId, string sectionNumber, Nullable<int> roomId, Nullable<int> defaultMaximunEnrollement, Nullable<int> currentEnrollment, Nullable<int> availableSeats, Nullable<bool> open, Nullable<decimal> creditHours, Nullable<int> termIds, Nullable<System.DateTime> sectionStartDate, Nullable<System.DateTime> sectionEndDate, Nullable<int> gradeScaleId, Nullable<decimal> gPAAddedValue, Nullable<int> stateSubjectCode, Nullable<int> courseLevel, Nullable<int> subjectAreaForCredit, string locationIRN, Nullable<int> deliveryMethodId, Nullable<int> studentPopulationId, Nullable<int> educationalOptionId, Nullable<int> curriculum, Nullable<int> languageIdUsedinTeachingCourse, Nullable<int> creditFlexibilityCode, Nullable<decimal> dualEnrollment, Nullable<int> lengthofScheduledInstruction, Nullable<int> maximunSeats, Nullable<int> cTECollegeCredit, Nullable<bool> isAttendance, Nullable<bool> isRequiresFinalGrade, Nullable<bool> isHighSchoolCredit, Nullable<bool> isGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintonReportCard, Nullable<bool> isPrintonTranscript, Nullable<bool> isPortal, Nullable<bool> isHomeroomCourse, Nullable<bool> isLunchCourse, Nullable<bool> isStudyHallCourse, Nullable<bool> isRosterVerification, Nullable<bool> isEMISReporting, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, string mode, string perioddetails, string staffDetails, Nullable<int> schoolId, Nullable<int> schoolYearId, string buttonName)
        {
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var buildingCourseIdParameter = buildingCourseId.HasValue ?
                new ObjectParameter("BuildingCourseId", buildingCourseId) :
                new ObjectParameter("BuildingCourseId", typeof(int));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var defaultMaximunEnrollementParameter = defaultMaximunEnrollement.HasValue ?
                new ObjectParameter("DefaultMaximunEnrollement", defaultMaximunEnrollement) :
                new ObjectParameter("DefaultMaximunEnrollement", typeof(int));
    
            var currentEnrollmentParameter = currentEnrollment.HasValue ?
                new ObjectParameter("CurrentEnrollment", currentEnrollment) :
                new ObjectParameter("CurrentEnrollment", typeof(int));
    
            var availableSeatsParameter = availableSeats.HasValue ?
                new ObjectParameter("AvailableSeats", availableSeats) :
                new ObjectParameter("AvailableSeats", typeof(int));
    
            var openParameter = open.HasValue ?
                new ObjectParameter("Open", open) :
                new ObjectParameter("Open", typeof(bool));
    
            var creditHoursParameter = creditHours.HasValue ?
                new ObjectParameter("CreditHours", creditHours) :
                new ObjectParameter("CreditHours", typeof(decimal));
    
            var termIdsParameter = termIds.HasValue ?
                new ObjectParameter("TermIds", termIds) :
                new ObjectParameter("TermIds", typeof(int));
    
            var sectionStartDateParameter = sectionStartDate.HasValue ?
                new ObjectParameter("SectionStartDate", sectionStartDate) :
                new ObjectParameter("SectionStartDate", typeof(System.DateTime));
    
            var sectionEndDateParameter = sectionEndDate.HasValue ?
                new ObjectParameter("SectionEndDate", sectionEndDate) :
                new ObjectParameter("SectionEndDate", typeof(System.DateTime));
    
            var gradeScaleIdParameter = gradeScaleId.HasValue ?
                new ObjectParameter("GradeScaleId", gradeScaleId) :
                new ObjectParameter("GradeScaleId", typeof(int));
    
            var gPAAddedValueParameter = gPAAddedValue.HasValue ?
                new ObjectParameter("GPAAddedValue", gPAAddedValue) :
                new ObjectParameter("GPAAddedValue", typeof(decimal));
    
            var stateSubjectCodeParameter = stateSubjectCode.HasValue ?
                new ObjectParameter("StateSubjectCode", stateSubjectCode) :
                new ObjectParameter("StateSubjectCode", typeof(int));
    
            var courseLevelParameter = courseLevel.HasValue ?
                new ObjectParameter("CourseLevel", courseLevel) :
                new ObjectParameter("CourseLevel", typeof(int));
    
            var subjectAreaForCreditParameter = subjectAreaForCredit.HasValue ?
                new ObjectParameter("SubjectAreaForCredit", subjectAreaForCredit) :
                new ObjectParameter("SubjectAreaForCredit", typeof(int));
    
            var locationIRNParameter = locationIRN != null ?
                new ObjectParameter("LocationIRN", locationIRN) :
                new ObjectParameter("LocationIRN", typeof(string));
    
            var deliveryMethodIdParameter = deliveryMethodId.HasValue ?
                new ObjectParameter("DeliveryMethodId", deliveryMethodId) :
                new ObjectParameter("DeliveryMethodId", typeof(int));
    
            var studentPopulationIdParameter = studentPopulationId.HasValue ?
                new ObjectParameter("StudentPopulationId", studentPopulationId) :
                new ObjectParameter("StudentPopulationId", typeof(int));
    
            var educationalOptionIdParameter = educationalOptionId.HasValue ?
                new ObjectParameter("EducationalOptionId", educationalOptionId) :
                new ObjectParameter("EducationalOptionId", typeof(int));
    
            var curriculumParameter = curriculum.HasValue ?
                new ObjectParameter("Curriculum", curriculum) :
                new ObjectParameter("Curriculum", typeof(int));
    
            var languageIdUsedinTeachingCourseParameter = languageIdUsedinTeachingCourse.HasValue ?
                new ObjectParameter("LanguageIdUsedinTeachingCourse", languageIdUsedinTeachingCourse) :
                new ObjectParameter("LanguageIdUsedinTeachingCourse", typeof(int));
    
            var creditFlexibilityCodeParameter = creditFlexibilityCode.HasValue ?
                new ObjectParameter("CreditFlexibilityCode", creditFlexibilityCode) :
                new ObjectParameter("CreditFlexibilityCode", typeof(int));
    
            var dualEnrollmentParameter = dualEnrollment.HasValue ?
                new ObjectParameter("DualEnrollment", dualEnrollment) :
                new ObjectParameter("DualEnrollment", typeof(decimal));
    
            var lengthofScheduledInstructionParameter = lengthofScheduledInstruction.HasValue ?
                new ObjectParameter("LengthofScheduledInstruction", lengthofScheduledInstruction) :
                new ObjectParameter("LengthofScheduledInstruction", typeof(int));
    
            var maximunSeatsParameter = maximunSeats.HasValue ?
                new ObjectParameter("MaximunSeats", maximunSeats) :
                new ObjectParameter("MaximunSeats", typeof(int));
    
            var cTECollegeCreditParameter = cTECollegeCredit.HasValue ?
                new ObjectParameter("CTECollegeCredit", cTECollegeCredit) :
                new ObjectParameter("CTECollegeCredit", typeof(int));
    
            var isAttendanceParameter = isAttendance.HasValue ?
                new ObjectParameter("IsAttendance", isAttendance) :
                new ObjectParameter("IsAttendance", typeof(bool));
    
            var isRequiresFinalGradeParameter = isRequiresFinalGrade.HasValue ?
                new ObjectParameter("IsRequiresFinalGrade", isRequiresFinalGrade) :
                new ObjectParameter("IsRequiresFinalGrade", typeof(bool));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var isGPAParameter = isGPA.HasValue ?
                new ObjectParameter("IsGPA", isGPA) :
                new ObjectParameter("IsGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintonReportCardParameter = isPrintonReportCard.HasValue ?
                new ObjectParameter("IsPrintonReportCard", isPrintonReportCard) :
                new ObjectParameter("IsPrintonReportCard", typeof(bool));
    
            var isPrintonTranscriptParameter = isPrintonTranscript.HasValue ?
                new ObjectParameter("IsPrintonTranscript", isPrintonTranscript) :
                new ObjectParameter("IsPrintonTranscript", typeof(bool));
    
            var isPortalParameter = isPortal.HasValue ?
                new ObjectParameter("IsPortal", isPortal) :
                new ObjectParameter("IsPortal", typeof(bool));
    
            var isHomeroomCourseParameter = isHomeroomCourse.HasValue ?
                new ObjectParameter("IsHomeroomCourse", isHomeroomCourse) :
                new ObjectParameter("IsHomeroomCourse", typeof(bool));
    
            var isLunchCourseParameter = isLunchCourse.HasValue ?
                new ObjectParameter("IsLunchCourse", isLunchCourse) :
                new ObjectParameter("IsLunchCourse", typeof(bool));
    
            var isStudyHallCourseParameter = isStudyHallCourse.HasValue ?
                new ObjectParameter("IsStudyHallCourse", isStudyHallCourse) :
                new ObjectParameter("IsStudyHallCourse", typeof(bool));
    
            var isRosterVerificationParameter = isRosterVerification.HasValue ?
                new ObjectParameter("IsRosterVerification", isRosterVerification) :
                new ObjectParameter("IsRosterVerification", typeof(bool));
    
            var isEMISReportingParameter = isEMISReporting.HasValue ?
                new ObjectParameter("IsEMISReporting", isEMISReporting) :
                new ObjectParameter("IsEMISReporting", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var perioddetailsParameter = perioddetails != null ?
                new ObjectParameter("perioddetails", perioddetails) :
                new ObjectParameter("perioddetails", typeof(string));
    
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolCourseSection", sectionIdParameter, buildingCourseIdParameter, sectionNumberParameter, roomIdParameter, defaultMaximunEnrollementParameter, currentEnrollmentParameter, availableSeatsParameter, openParameter, creditHoursParameter, termIdsParameter, sectionStartDateParameter, sectionEndDateParameter, gradeScaleIdParameter, gPAAddedValueParameter, stateSubjectCodeParameter, courseLevelParameter, subjectAreaForCreditParameter, locationIRNParameter, deliveryMethodIdParameter, studentPopulationIdParameter, educationalOptionIdParameter, curriculumParameter, languageIdUsedinTeachingCourseParameter, creditFlexibilityCodeParameter, dualEnrollmentParameter, lengthofScheduledInstructionParameter, maximunSeatsParameter, cTECollegeCreditParameter, isAttendanceParameter, isRequiresFinalGradeParameter, isHighSchoolCreditParameter, isGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintonReportCardParameter, isPrintonTranscriptParameter, isPortalParameter, isHomeroomCourseParameter, isLunchCourseParameter, isStudyHallCourseParameter, isRosterVerificationParameter, isEMISReportingParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, modeParameter, perioddetailsParameter, staffDetailsParameter, schoolIdParameter, schoolYearIdParameter, buttonNameParameter);
        }
    
        public virtual ObjectResult<uspUpdateSchoolCourseTermLength_Result> uspUpdateSchoolCourseTermLength(Nullable<int> schoolId, Nullable<int> schoolYearId, string schoolYearName)
        {
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var schoolYearIdParameter = schoolYearId.HasValue ?
                new ObjectParameter("SchoolYearId", schoolYearId) :
                new ObjectParameter("SchoolYearId", typeof(int));
    
            var schoolYearNameParameter = schoolYearName != null ?
                new ObjectParameter("SchoolYearName", schoolYearName) :
                new ObjectParameter("SchoolYearName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUpdateSchoolCourseTermLength_Result>("uspUpdateSchoolCourseTermLength", schoolIdParameter, schoolYearIdParameter, schoolYearNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolDay(Nullable<int> schoolID, Nullable<int> schoolDayID, string schoolDay, string abbreviation, Nullable<int> sort, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolDayIDParameter = schoolDayID.HasValue ?
                new ObjectParameter("SchoolDayID", schoolDayID) :
                new ObjectParameter("SchoolDayID", typeof(int));
    
            var schoolDayParameter = schoolDay != null ?
                new ObjectParameter("SchoolDay", schoolDay) :
                new ObjectParameter("SchoolDay", typeof(string));
    
            var abbreviationParameter = abbreviation != null ?
                new ObjectParameter("Abbreviation", abbreviation) :
                new ObjectParameter("Abbreviation", typeof(string));
    
            var sortParameter = sort.HasValue ?
                new ObjectParameter("Sort", sort) :
                new ObjectParameter("Sort", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolDay", schoolIDParameter, schoolDayIDParameter, schoolDayParameter, abbreviationParameter, sortParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolEvents(Nullable<int> eventID, Nullable<int> schoolID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string eventDescription, Nullable<int> days, Nullable<int> modifiedBy)
        {
            var eventIDParameter = eventID.HasValue ?
                new ObjectParameter("EventID", eventID) :
                new ObjectParameter("EventID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolEvents", eventIDParameter, schoolIDParameter, startDateParameter, endDateParameter, eventDescriptionParameter, daysParameter, modifiedByParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolGPA(Nullable<int> schoolGPASetupID, string gPAName, string gPAFormula, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolGPASetupIDParameter = schoolGPASetupID.HasValue ?
                new ObjectParameter("SchoolGPASetupID", schoolGPASetupID) :
                new ObjectParameter("SchoolGPASetupID", typeof(int));
    
            var gPANameParameter = gPAName != null ?
                new ObjectParameter("GPAName", gPAName) :
                new ObjectParameter("GPAName", typeof(string));
    
            var gPAFormulaParameter = gPAFormula != null ?
                new ObjectParameter("GPAFormula", gPAFormula) :
                new ObjectParameter("GPAFormula", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolGPA", schoolGPASetupIDParameter, gPANameParameter, gPAFormulaParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolGradebookComment(Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<int> schoolCommentID, Nullable<int> commentTypePL, string commentDescription, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var schoolCommentIDParameter = schoolCommentID.HasValue ?
                new ObjectParameter("SchoolCommentID", schoolCommentID) :
                new ObjectParameter("SchoolCommentID", typeof(int));
    
            var commentTypePLParameter = commentTypePL.HasValue ?
                new ObjectParameter("CommentTypePL", commentTypePL) :
                new ObjectParameter("CommentTypePL", typeof(int));
    
            var commentDescriptionParameter = commentDescription != null ?
                new ObjectParameter("CommentDescription", commentDescription) :
                new ObjectParameter("CommentDescription", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolGradebookComment", schoolIDParameter, schoolYearPLParameter, schoolCommentIDParameter, commentTypePLParameter, commentDescriptionParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolGradebookPreference(Nullable<int> schoolGradebookPreferenceID, Nullable<int> schoolID, Nullable<int> schoolYearPL, Nullable<int> assignmentCategoryPL, string gradeReasonTypePLs, Nullable<bool> isMissingScore, Nullable<int> roundToDecimalPL, string districtCommentPLs, string assignmentCategoryColorCode, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolGradebookPreferenceIDParameter = schoolGradebookPreferenceID.HasValue ?
                new ObjectParameter("SchoolGradebookPreferenceID", schoolGradebookPreferenceID) :
                new ObjectParameter("SchoolGradebookPreferenceID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearPLParameter = schoolYearPL.HasValue ?
                new ObjectParameter("SchoolYearPL", schoolYearPL) :
                new ObjectParameter("SchoolYearPL", typeof(int));
    
            var assignmentCategoryPLParameter = assignmentCategoryPL.HasValue ?
                new ObjectParameter("AssignmentCategoryPL", assignmentCategoryPL) :
                new ObjectParameter("AssignmentCategoryPL", typeof(int));
    
            var gradeReasonTypePLsParameter = gradeReasonTypePLs != null ?
                new ObjectParameter("GradeReasonTypePLs", gradeReasonTypePLs) :
                new ObjectParameter("GradeReasonTypePLs", typeof(string));
    
            var isMissingScoreParameter = isMissingScore.HasValue ?
                new ObjectParameter("IsMissingScore", isMissingScore) :
                new ObjectParameter("IsMissingScore", typeof(bool));
    
            var roundToDecimalPLParameter = roundToDecimalPL.HasValue ?
                new ObjectParameter("RoundToDecimalPL", roundToDecimalPL) :
                new ObjectParameter("RoundToDecimalPL", typeof(int));
    
            var districtCommentPLsParameter = districtCommentPLs != null ?
                new ObjectParameter("DistrictCommentPLs", districtCommentPLs) :
                new ObjectParameter("DistrictCommentPLs", typeof(string));
    
            var assignmentCategoryColorCodeParameter = assignmentCategoryColorCode != null ?
                new ObjectParameter("AssignmentCategoryColorCode", assignmentCategoryColorCode) :
                new ObjectParameter("AssignmentCategoryColorCode", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolGradebookPreference", schoolGradebookPreferenceIDParameter, schoolIDParameter, schoolYearPLParameter, assignmentCategoryPLParameter, gradeReasonTypePLsParameter, isMissingScoreParameter, roundToDecimalPLParameter, districtCommentPLsParameter, assignmentCategoryColorCodeParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolGradeLevel(Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> schoolGradeLevelID, Nullable<int> gradeLevelPL, Nullable<bool> isDefaultHours, Nullable<decimal> defaultHours, Nullable<decimal> hoursInSession, Nullable<int> nextGradeLevelPL, Nullable<int> nextSchoolID, string startDate, string endDate, Nullable<decimal> minimumCreditHours, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var schoolGradeLevelIDParameter = schoolGradeLevelID.HasValue ?
                new ObjectParameter("SchoolGradeLevelID", schoolGradeLevelID) :
                new ObjectParameter("SchoolGradeLevelID", typeof(int));
    
            var gradeLevelPLParameter = gradeLevelPL.HasValue ?
                new ObjectParameter("GradeLevelPL", gradeLevelPL) :
                new ObjectParameter("GradeLevelPL", typeof(int));
    
            var isDefaultHoursParameter = isDefaultHours.HasValue ?
                new ObjectParameter("IsDefaultHours", isDefaultHours) :
                new ObjectParameter("IsDefaultHours", typeof(bool));
    
            var defaultHoursParameter = defaultHours.HasValue ?
                new ObjectParameter("DefaultHours", defaultHours) :
                new ObjectParameter("DefaultHours", typeof(decimal));
    
            var hoursInSessionParameter = hoursInSession.HasValue ?
                new ObjectParameter("HoursInSession", hoursInSession) :
                new ObjectParameter("HoursInSession", typeof(decimal));
    
            var nextGradeLevelPLParameter = nextGradeLevelPL.HasValue ?
                new ObjectParameter("NextGradeLevelPL", nextGradeLevelPL) :
                new ObjectParameter("NextGradeLevelPL", typeof(int));
    
            var nextSchoolIDParameter = nextSchoolID.HasValue ?
                new ObjectParameter("NextSchoolID", nextSchoolID) :
                new ObjectParameter("NextSchoolID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var minimumCreditHoursParameter = minimumCreditHours.HasValue ?
                new ObjectParameter("MinimumCreditHours", minimumCreditHours) :
                new ObjectParameter("MinimumCreditHours", typeof(decimal));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolGradeLevel", schoolIDParameter, schoolYearIDParameter, schoolGradeLevelIDParameter, gradeLevelPLParameter, isDefaultHoursParameter, defaultHoursParameter, hoursInSessionParameter, nextGradeLevelPLParameter, nextSchoolIDParameter, startDateParameter, endDateParameter, minimumCreditHoursParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolGradeScaleDetails(Nullable<int> schoolGradeScaleID, Nullable<int> schoolGradeScaleDetailID, Nullable<decimal> minValue, Nullable<decimal> maxValue, string grade, string description, Nullable<bool> validForGPA, Nullable<int> districtID, Nullable<decimal> gradePoints, Nullable<bool> isEarnsCredit, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolGradeScaleIDParameter = schoolGradeScaleID.HasValue ?
                new ObjectParameter("SchoolGradeScaleID", schoolGradeScaleID) :
                new ObjectParameter("SchoolGradeScaleID", typeof(int));
    
            var schoolGradeScaleDetailIDParameter = schoolGradeScaleDetailID.HasValue ?
                new ObjectParameter("SchoolGradeScaleDetailID", schoolGradeScaleDetailID) :
                new ObjectParameter("SchoolGradeScaleDetailID", typeof(int));
    
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(decimal));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(decimal));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var validForGPAParameter = validForGPA.HasValue ?
                new ObjectParameter("ValidForGPA", validForGPA) :
                new ObjectParameter("ValidForGPA", typeof(bool));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var gradePointsParameter = gradePoints.HasValue ?
                new ObjectParameter("GradePoints", gradePoints) :
                new ObjectParameter("GradePoints", typeof(decimal));
    
            var isEarnsCreditParameter = isEarnsCredit.HasValue ?
                new ObjectParameter("IsEarnsCredit", isEarnsCredit) :
                new ObjectParameter("IsEarnsCredit", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolGradeScaleDetails", schoolGradeScaleIDParameter, schoolGradeScaleDetailIDParameter, minValueParameter, maxValueParameter, gradeParameter, descriptionParameter, validForGPAParameter, districtIDParameter, gradePointsParameter, isEarnsCreditParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSchoolYear(Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> schoolYear, string abbrivation, Nullable<bool> isDefault, Nullable<System.DateTime> firstDayofSchool, Nullable<System.DateTime> lastdayofSchool, string schoolYearTerms, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var schoolYearParameter = schoolYear.HasValue ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(int));
    
            var abbrivationParameter = abbrivation != null ?
                new ObjectParameter("Abbrivation", abbrivation) :
                new ObjectParameter("Abbrivation", typeof(string));
    
            var isDefaultParameter = isDefault.HasValue ?
                new ObjectParameter("IsDefault", isDefault) :
                new ObjectParameter("IsDefault", typeof(bool));
    
            var firstDayofSchoolParameter = firstDayofSchool.HasValue ?
                new ObjectParameter("FirstDayofSchool", firstDayofSchool) :
                new ObjectParameter("FirstDayofSchool", typeof(System.DateTime));
    
            var lastdayofSchoolParameter = lastdayofSchool.HasValue ?
                new ObjectParameter("LastdayofSchool", lastdayofSchool) :
                new ObjectParameter("LastdayofSchool", typeof(System.DateTime));
    
            var schoolYearTermsParameter = schoolYearTerms != null ?
                new ObjectParameter("SchoolYearTerms", schoolYearTerms) :
                new ObjectParameter("SchoolYearTerms", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSchoolYear", schoolIDParameter, schoolYearIDParameter, schoolYearParameter, abbrivationParameter, isDefaultParameter, firstDayofSchoolParameter, lastdayofSchoolParameter, schoolYearTermsParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateSchoolYearQuarters(Nullable<int> schoolyearid, string schoolyear, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string quarterone, string quarteronedescription, string firstdayofquarterone, string lastdayofquarterone, string quartertwo, string quartertwodescription, string firstdayofquartertwo, string lastdayofquartertwo, string quarterthree, string quarterthreedescription, string firstdayofquarterthree, string lastdayofquarterthree, string quarterfour, string quarterfourdescription, string firstdayofquarterfour, string lastdayofquarterfour, Nullable<bool> isdefault, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var quarteroneParameter = quarterone != null ?
                new ObjectParameter("quarterone", quarterone) :
                new ObjectParameter("quarterone", typeof(string));
    
            var quarteronedescriptionParameter = quarteronedescription != null ?
                new ObjectParameter("quarteronedescription", quarteronedescription) :
                new ObjectParameter("quarteronedescription", typeof(string));
    
            var firstdayofquarteroneParameter = firstdayofquarterone != null ?
                new ObjectParameter("firstdayofquarterone", firstdayofquarterone) :
                new ObjectParameter("firstdayofquarterone", typeof(string));
    
            var lastdayofquarteroneParameter = lastdayofquarterone != null ?
                new ObjectParameter("lastdayofquarterone", lastdayofquarterone) :
                new ObjectParameter("lastdayofquarterone", typeof(string));
    
            var quartertwoParameter = quartertwo != null ?
                new ObjectParameter("quartertwo", quartertwo) :
                new ObjectParameter("quartertwo", typeof(string));
    
            var quartertwodescriptionParameter = quartertwodescription != null ?
                new ObjectParameter("quartertwodescription", quartertwodescription) :
                new ObjectParameter("quartertwodescription", typeof(string));
    
            var firstdayofquartertwoParameter = firstdayofquartertwo != null ?
                new ObjectParameter("firstdayofquartertwo", firstdayofquartertwo) :
                new ObjectParameter("firstdayofquartertwo", typeof(string));
    
            var lastdayofquartertwoParameter = lastdayofquartertwo != null ?
                new ObjectParameter("lastdayofquartertwo", lastdayofquartertwo) :
                new ObjectParameter("lastdayofquartertwo", typeof(string));
    
            var quarterthreeParameter = quarterthree != null ?
                new ObjectParameter("quarterthree", quarterthree) :
                new ObjectParameter("quarterthree", typeof(string));
    
            var quarterthreedescriptionParameter = quarterthreedescription != null ?
                new ObjectParameter("quarterthreedescription", quarterthreedescription) :
                new ObjectParameter("quarterthreedescription", typeof(string));
    
            var firstdayofquarterthreeParameter = firstdayofquarterthree != null ?
                new ObjectParameter("firstdayofquarterthree", firstdayofquarterthree) :
                new ObjectParameter("firstdayofquarterthree", typeof(string));
    
            var lastdayofquarterthreeParameter = lastdayofquarterthree != null ?
                new ObjectParameter("lastdayofquarterthree", lastdayofquarterthree) :
                new ObjectParameter("lastdayofquarterthree", typeof(string));
    
            var quarterfourParameter = quarterfour != null ?
                new ObjectParameter("quarterfour", quarterfour) :
                new ObjectParameter("quarterfour", typeof(string));
    
            var quarterfourdescriptionParameter = quarterfourdescription != null ?
                new ObjectParameter("quarterfourdescription", quarterfourdescription) :
                new ObjectParameter("quarterfourdescription", typeof(string));
    
            var firstdayofquarterfourParameter = firstdayofquarterfour != null ?
                new ObjectParameter("firstdayofquarterfour", firstdayofquarterfour) :
                new ObjectParameter("firstdayofquarterfour", typeof(string));
    
            var lastdayofquarterfourParameter = lastdayofquarterfour != null ?
                new ObjectParameter("lastdayofquarterfour", lastdayofquarterfour) :
                new ObjectParameter("lastdayofquarterfour", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSchoolYearQuarters", schoolyearidParameter, schoolyearParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, quarteroneParameter, quarteronedescriptionParameter, firstdayofquarteroneParameter, lastdayofquarteroneParameter, quartertwoParameter, quartertwodescriptionParameter, firstdayofquartertwoParameter, lastdayofquartertwoParameter, quarterthreeParameter, quarterthreedescriptionParameter, firstdayofquarterthreeParameter, lastdayofquarterthreeParameter, quarterfourParameter, quarterfourdescriptionParameter, firstdayofquarterfourParameter, lastdayofquarterfourParameter, isdefaultParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateSchoolYearSemester(Nullable<int> schoolyearid, string schoolyear, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string semesterone, string firstdayofsemesterone, string lastdayofsemesterone, string semesteronedescription, string semquarterone, string semquarteronedescription, string firstdayofsemquarterone, string lastdayofsemquarterone, string semquartertwo, string semquartertwodescription, string firstdayofsemquartertwo, string lastdayofsemquartertwo, string semestertwo, string firstdayofsemestertwo, string lastdayofsemestertwo, string semestertwodescription, string semquarterthree, string semquarterthreedescription, string firstdayofsemquarterthree, string lastdayofsemquarterthree, string semquarterfour, string semquarterfourdescription, string firstdayofsemquarterfour, string lastdayofsemquarterfour, Nullable<bool> isdefault, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var semesteroneParameter = semesterone != null ?
                new ObjectParameter("semesterone", semesterone) :
                new ObjectParameter("semesterone", typeof(string));
    
            var firstdayofsemesteroneParameter = firstdayofsemesterone != null ?
                new ObjectParameter("firstdayofsemesterone", firstdayofsemesterone) :
                new ObjectParameter("firstdayofsemesterone", typeof(string));
    
            var lastdayofsemesteroneParameter = lastdayofsemesterone != null ?
                new ObjectParameter("lastdayofsemesterone", lastdayofsemesterone) :
                new ObjectParameter("lastdayofsemesterone", typeof(string));
    
            var semesteronedescriptionParameter = semesteronedescription != null ?
                new ObjectParameter("semesteronedescription", semesteronedescription) :
                new ObjectParameter("semesteronedescription", typeof(string));
    
            var semquarteroneParameter = semquarterone != null ?
                new ObjectParameter("semquarterone", semquarterone) :
                new ObjectParameter("semquarterone", typeof(string));
    
            var semquarteronedescriptionParameter = semquarteronedescription != null ?
                new ObjectParameter("semquarteronedescription", semquarteronedescription) :
                new ObjectParameter("semquarteronedescription", typeof(string));
    
            var firstdayofsemquarteroneParameter = firstdayofsemquarterone != null ?
                new ObjectParameter("firstdayofsemquarterone", firstdayofsemquarterone) :
                new ObjectParameter("firstdayofsemquarterone", typeof(string));
    
            var lastdayofsemquarteroneParameter = lastdayofsemquarterone != null ?
                new ObjectParameter("lastdayofsemquarterone", lastdayofsemquarterone) :
                new ObjectParameter("lastdayofsemquarterone", typeof(string));
    
            var semquartertwoParameter = semquartertwo != null ?
                new ObjectParameter("semquartertwo", semquartertwo) :
                new ObjectParameter("semquartertwo", typeof(string));
    
            var semquartertwodescriptionParameter = semquartertwodescription != null ?
                new ObjectParameter("semquartertwodescription", semquartertwodescription) :
                new ObjectParameter("semquartertwodescription", typeof(string));
    
            var firstdayofsemquartertwoParameter = firstdayofsemquartertwo != null ?
                new ObjectParameter("firstdayofsemquartertwo", firstdayofsemquartertwo) :
                new ObjectParameter("firstdayofsemquartertwo", typeof(string));
    
            var lastdayofsemquartertwoParameter = lastdayofsemquartertwo != null ?
                new ObjectParameter("lastdayofsemquartertwo", lastdayofsemquartertwo) :
                new ObjectParameter("lastdayofsemquartertwo", typeof(string));
    
            var semestertwoParameter = semestertwo != null ?
                new ObjectParameter("semestertwo", semestertwo) :
                new ObjectParameter("semestertwo", typeof(string));
    
            var firstdayofsemestertwoParameter = firstdayofsemestertwo != null ?
                new ObjectParameter("firstdayofsemestertwo", firstdayofsemestertwo) :
                new ObjectParameter("firstdayofsemestertwo", typeof(string));
    
            var lastdayofsemestertwoParameter = lastdayofsemestertwo != null ?
                new ObjectParameter("lastdayofsemestertwo", lastdayofsemestertwo) :
                new ObjectParameter("lastdayofsemestertwo", typeof(string));
    
            var semestertwodescriptionParameter = semestertwodescription != null ?
                new ObjectParameter("semestertwodescription", semestertwodescription) :
                new ObjectParameter("semestertwodescription", typeof(string));
    
            var semquarterthreeParameter = semquarterthree != null ?
                new ObjectParameter("semquarterthree", semquarterthree) :
                new ObjectParameter("semquarterthree", typeof(string));
    
            var semquarterthreedescriptionParameter = semquarterthreedescription != null ?
                new ObjectParameter("semquarterthreedescription", semquarterthreedescription) :
                new ObjectParameter("semquarterthreedescription", typeof(string));
    
            var firstdayofsemquarterthreeParameter = firstdayofsemquarterthree != null ?
                new ObjectParameter("firstdayofsemquarterthree", firstdayofsemquarterthree) :
                new ObjectParameter("firstdayofsemquarterthree", typeof(string));
    
            var lastdayofsemquarterthreeParameter = lastdayofsemquarterthree != null ?
                new ObjectParameter("lastdayofsemquarterthree", lastdayofsemquarterthree) :
                new ObjectParameter("lastdayofsemquarterthree", typeof(string));
    
            var semquarterfourParameter = semquarterfour != null ?
                new ObjectParameter("semquarterfour", semquarterfour) :
                new ObjectParameter("semquarterfour", typeof(string));
    
            var semquarterfourdescriptionParameter = semquarterfourdescription != null ?
                new ObjectParameter("semquarterfourdescription", semquarterfourdescription) :
                new ObjectParameter("semquarterfourdescription", typeof(string));
    
            var firstdayofsemquarterfourParameter = firstdayofsemquarterfour != null ?
                new ObjectParameter("firstdayofsemquarterfour", firstdayofsemquarterfour) :
                new ObjectParameter("firstdayofsemquarterfour", typeof(string));
    
            var lastdayofsemquarterfourParameter = lastdayofsemquarterfour != null ?
                new ObjectParameter("lastdayofsemquarterfour", lastdayofsemquarterfour) :
                new ObjectParameter("lastdayofsemquarterfour", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSchoolYearSemester", schoolyearidParameter, schoolyearParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, semesteroneParameter, firstdayofsemesteroneParameter, lastdayofsemesteroneParameter, semesteronedescriptionParameter, semquarteroneParameter, semquarteronedescriptionParameter, firstdayofsemquarteroneParameter, lastdayofsemquarteroneParameter, semquartertwoParameter, semquartertwodescriptionParameter, firstdayofsemquartertwoParameter, lastdayofsemquartertwoParameter, semestertwoParameter, firstdayofsemestertwoParameter, lastdayofsemestertwoParameter, semestertwodescriptionParameter, semquarterthreeParameter, semquarterthreedescriptionParameter, firstdayofsemquarterthreeParameter, lastdayofsemquarterthreeParameter, semquarterfourParameter, semquarterfourdescriptionParameter, firstdayofsemquarterfourParameter, lastdayofsemquarterfourParameter, isdefaultParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateSchoolYearTrimester(Nullable<int> schoolyearid, string schoolyear, string firstdayofschool, string lastdayofschool, string schoolyeardescription, string semestertype, string trimesterone, string trimesteronedescription, string firstdayoftrimesterone, string lastdayoftrimesterone, string trisemtermone, string trisemtermonedescription, string firstdayoftrisemtermone, string lastdayoftrisemtermone, string trisemtermtwo, string trisemtermtwodescription, string firstdayoftrisemtermtwo, string lastdayoftrisemtermtwo, string trimestertwo, string trimestertwodescription, string firstdayoftrimestertwo, string lastdayoftrimestertwo, string trisemtermthree, string trisemtermthreedescription, string firstdayoftrisemtermthree, string lastdayoftrisemtermthree, string trisemtermfour, string trisemtermfourdescription, string firstdayoftrisemtermfour, string lastdayoftrisemtermfour, string trimesterthree, string trimesterthreedescription, string firstdayoftrimesterthree, string lastdayoftrimesterthree, string trisemtermfive, string trisemtermfivedescription, string firstdayoftrisemtermfive, string lastdayoftrisemtermfive, string trisemtermsix, string trisemtermsixdescription, string firstdayoftrisemtermsix, string lastdayoftrisemtermsix, Nullable<bool> isdefault, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var schoolyearidParameter = schoolyearid.HasValue ?
                new ObjectParameter("schoolyearid", schoolyearid) :
                new ObjectParameter("schoolyearid", typeof(int));
    
            var schoolyearParameter = schoolyear != null ?
                new ObjectParameter("schoolyear", schoolyear) :
                new ObjectParameter("schoolyear", typeof(string));
    
            var firstdayofschoolParameter = firstdayofschool != null ?
                new ObjectParameter("firstdayofschool", firstdayofschool) :
                new ObjectParameter("firstdayofschool", typeof(string));
    
            var lastdayofschoolParameter = lastdayofschool != null ?
                new ObjectParameter("lastdayofschool", lastdayofschool) :
                new ObjectParameter("lastdayofschool", typeof(string));
    
            var schoolyeardescriptionParameter = schoolyeardescription != null ?
                new ObjectParameter("schoolyeardescription", schoolyeardescription) :
                new ObjectParameter("schoolyeardescription", typeof(string));
    
            var semestertypeParameter = semestertype != null ?
                new ObjectParameter("semestertype", semestertype) :
                new ObjectParameter("semestertype", typeof(string));
    
            var trimesteroneParameter = trimesterone != null ?
                new ObjectParameter("trimesterone", trimesterone) :
                new ObjectParameter("trimesterone", typeof(string));
    
            var trimesteronedescriptionParameter = trimesteronedescription != null ?
                new ObjectParameter("trimesteronedescription", trimesteronedescription) :
                new ObjectParameter("trimesteronedescription", typeof(string));
    
            var firstdayoftrimesteroneParameter = firstdayoftrimesterone != null ?
                new ObjectParameter("firstdayoftrimesterone", firstdayoftrimesterone) :
                new ObjectParameter("firstdayoftrimesterone", typeof(string));
    
            var lastdayoftrimesteroneParameter = lastdayoftrimesterone != null ?
                new ObjectParameter("lastdayoftrimesterone", lastdayoftrimesterone) :
                new ObjectParameter("lastdayoftrimesterone", typeof(string));
    
            var trisemtermoneParameter = trisemtermone != null ?
                new ObjectParameter("trisemtermone", trisemtermone) :
                new ObjectParameter("trisemtermone", typeof(string));
    
            var trisemtermonedescriptionParameter = trisemtermonedescription != null ?
                new ObjectParameter("trisemtermonedescription", trisemtermonedescription) :
                new ObjectParameter("trisemtermonedescription", typeof(string));
    
            var firstdayoftrisemtermoneParameter = firstdayoftrisemtermone != null ?
                new ObjectParameter("firstdayoftrisemtermone", firstdayoftrisemtermone) :
                new ObjectParameter("firstdayoftrisemtermone", typeof(string));
    
            var lastdayoftrisemtermoneParameter = lastdayoftrisemtermone != null ?
                new ObjectParameter("lastdayoftrisemtermone", lastdayoftrisemtermone) :
                new ObjectParameter("lastdayoftrisemtermone", typeof(string));
    
            var trisemtermtwoParameter = trisemtermtwo != null ?
                new ObjectParameter("trisemtermtwo", trisemtermtwo) :
                new ObjectParameter("trisemtermtwo", typeof(string));
    
            var trisemtermtwodescriptionParameter = trisemtermtwodescription != null ?
                new ObjectParameter("trisemtermtwodescription", trisemtermtwodescription) :
                new ObjectParameter("trisemtermtwodescription", typeof(string));
    
            var firstdayoftrisemtermtwoParameter = firstdayoftrisemtermtwo != null ?
                new ObjectParameter("firstdayoftrisemtermtwo", firstdayoftrisemtermtwo) :
                new ObjectParameter("firstdayoftrisemtermtwo", typeof(string));
    
            var lastdayoftrisemtermtwoParameter = lastdayoftrisemtermtwo != null ?
                new ObjectParameter("lastdayoftrisemtermtwo", lastdayoftrisemtermtwo) :
                new ObjectParameter("lastdayoftrisemtermtwo", typeof(string));
    
            var trimestertwoParameter = trimestertwo != null ?
                new ObjectParameter("trimestertwo", trimestertwo) :
                new ObjectParameter("trimestertwo", typeof(string));
    
            var trimestertwodescriptionParameter = trimestertwodescription != null ?
                new ObjectParameter("trimestertwodescription", trimestertwodescription) :
                new ObjectParameter("trimestertwodescription", typeof(string));
    
            var firstdayoftrimestertwoParameter = firstdayoftrimestertwo != null ?
                new ObjectParameter("firstdayoftrimestertwo", firstdayoftrimestertwo) :
                new ObjectParameter("firstdayoftrimestertwo", typeof(string));
    
            var lastdayoftrimestertwoParameter = lastdayoftrimestertwo != null ?
                new ObjectParameter("lastdayoftrimestertwo", lastdayoftrimestertwo) :
                new ObjectParameter("lastdayoftrimestertwo", typeof(string));
    
            var trisemtermthreeParameter = trisemtermthree != null ?
                new ObjectParameter("trisemtermthree", trisemtermthree) :
                new ObjectParameter("trisemtermthree", typeof(string));
    
            var trisemtermthreedescriptionParameter = trisemtermthreedescription != null ?
                new ObjectParameter("trisemtermthreedescription", trisemtermthreedescription) :
                new ObjectParameter("trisemtermthreedescription", typeof(string));
    
            var firstdayoftrisemtermthreeParameter = firstdayoftrisemtermthree != null ?
                new ObjectParameter("firstdayoftrisemtermthree", firstdayoftrisemtermthree) :
                new ObjectParameter("firstdayoftrisemtermthree", typeof(string));
    
            var lastdayoftrisemtermthreeParameter = lastdayoftrisemtermthree != null ?
                new ObjectParameter("lastdayoftrisemtermthree", lastdayoftrisemtermthree) :
                new ObjectParameter("lastdayoftrisemtermthree", typeof(string));
    
            var trisemtermfourParameter = trisemtermfour != null ?
                new ObjectParameter("trisemtermfour", trisemtermfour) :
                new ObjectParameter("trisemtermfour", typeof(string));
    
            var trisemtermfourdescriptionParameter = trisemtermfourdescription != null ?
                new ObjectParameter("trisemtermfourdescription", trisemtermfourdescription) :
                new ObjectParameter("trisemtermfourdescription", typeof(string));
    
            var firstdayoftrisemtermfourParameter = firstdayoftrisemtermfour != null ?
                new ObjectParameter("firstdayoftrisemtermfour", firstdayoftrisemtermfour) :
                new ObjectParameter("firstdayoftrisemtermfour", typeof(string));
    
            var lastdayoftrisemtermfourParameter = lastdayoftrisemtermfour != null ?
                new ObjectParameter("lastdayoftrisemtermfour", lastdayoftrisemtermfour) :
                new ObjectParameter("lastdayoftrisemtermfour", typeof(string));
    
            var trimesterthreeParameter = trimesterthree != null ?
                new ObjectParameter("trimesterthree", trimesterthree) :
                new ObjectParameter("trimesterthree", typeof(string));
    
            var trimesterthreedescriptionParameter = trimesterthreedescription != null ?
                new ObjectParameter("trimesterthreedescription", trimesterthreedescription) :
                new ObjectParameter("trimesterthreedescription", typeof(string));
    
            var firstdayoftrimesterthreeParameter = firstdayoftrimesterthree != null ?
                new ObjectParameter("firstdayoftrimesterthree", firstdayoftrimesterthree) :
                new ObjectParameter("firstdayoftrimesterthree", typeof(string));
    
            var lastdayoftrimesterthreeParameter = lastdayoftrimesterthree != null ?
                new ObjectParameter("lastdayoftrimesterthree", lastdayoftrimesterthree) :
                new ObjectParameter("lastdayoftrimesterthree", typeof(string));
    
            var trisemtermfiveParameter = trisemtermfive != null ?
                new ObjectParameter("trisemtermfive", trisemtermfive) :
                new ObjectParameter("trisemtermfive", typeof(string));
    
            var trisemtermfivedescriptionParameter = trisemtermfivedescription != null ?
                new ObjectParameter("trisemtermfivedescription", trisemtermfivedescription) :
                new ObjectParameter("trisemtermfivedescription", typeof(string));
    
            var firstdayoftrisemtermfiveParameter = firstdayoftrisemtermfive != null ?
                new ObjectParameter("firstdayoftrisemtermfive", firstdayoftrisemtermfive) :
                new ObjectParameter("firstdayoftrisemtermfive", typeof(string));
    
            var lastdayoftrisemtermfiveParameter = lastdayoftrisemtermfive != null ?
                new ObjectParameter("lastdayoftrisemtermfive", lastdayoftrisemtermfive) :
                new ObjectParameter("lastdayoftrisemtermfive", typeof(string));
    
            var trisemtermsixParameter = trisemtermsix != null ?
                new ObjectParameter("trisemtermsix", trisemtermsix) :
                new ObjectParameter("trisemtermsix", typeof(string));
    
            var trisemtermsixdescriptionParameter = trisemtermsixdescription != null ?
                new ObjectParameter("trisemtermsixdescription", trisemtermsixdescription) :
                new ObjectParameter("trisemtermsixdescription", typeof(string));
    
            var firstdayoftrisemtermsixParameter = firstdayoftrisemtermsix != null ?
                new ObjectParameter("firstdayoftrisemtermsix", firstdayoftrisemtermsix) :
                new ObjectParameter("firstdayoftrisemtermsix", typeof(string));
    
            var lastdayoftrisemtermsixParameter = lastdayoftrisemtermsix != null ?
                new ObjectParameter("lastdayoftrisemtermsix", lastdayoftrisemtermsix) :
                new ObjectParameter("lastdayoftrisemtermsix", typeof(string));
    
            var isdefaultParameter = isdefault.HasValue ?
                new ObjectParameter("isdefault", isdefault) :
                new ObjectParameter("isdefault", typeof(bool));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateSchoolYearTrimester", schoolyearidParameter, schoolyearParameter, firstdayofschoolParameter, lastdayofschoolParameter, schoolyeardescriptionParameter, semestertypeParameter, trimesteroneParameter, trimesteronedescriptionParameter, firstdayoftrimesteroneParameter, lastdayoftrimesteroneParameter, trisemtermoneParameter, trisemtermonedescriptionParameter, firstdayoftrisemtermoneParameter, lastdayoftrisemtermoneParameter, trisemtermtwoParameter, trisemtermtwodescriptionParameter, firstdayoftrisemtermtwoParameter, lastdayoftrisemtermtwoParameter, trimestertwoParameter, trimestertwodescriptionParameter, firstdayoftrimestertwoParameter, lastdayoftrimestertwoParameter, trisemtermthreeParameter, trisemtermthreedescriptionParameter, firstdayoftrisemtermthreeParameter, lastdayoftrisemtermthreeParameter, trisemtermfourParameter, trisemtermfourdescriptionParameter, firstdayoftrisemtermfourParameter, lastdayoftrisemtermfourParameter, trimesterthreeParameter, trimesterthreedescriptionParameter, firstdayoftrimesterthreeParameter, lastdayoftrimesterthreeParameter, trisemtermfiveParameter, trisemtermfivedescriptionParameter, firstdayoftrisemtermfiveParameter, lastdayoftrisemtermfiveParameter, trisemtermsixParameter, trisemtermsixdescriptionParameter, firstdayoftrisemtermsixParameter, lastdayoftrisemtermsixParameter, isdefaultParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateSecurityQuestionsByUserId(Nullable<int> portalAccountId, string userName, Nullable<int> securityQuestion1PL, string securityAnswer1, Nullable<int> securityQuestion2PL, string securityAnswer2, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var portalAccountIdParameter = portalAccountId.HasValue ?
                new ObjectParameter("PortalAccountId", portalAccountId) :
                new ObjectParameter("PortalAccountId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var securityQuestion1PLParameter = securityQuestion1PL.HasValue ?
                new ObjectParameter("SecurityQuestion1PL", securityQuestion1PL) :
                new ObjectParameter("SecurityQuestion1PL", typeof(int));
    
            var securityAnswer1Parameter = securityAnswer1 != null ?
                new ObjectParameter("SecurityAnswer1", securityAnswer1) :
                new ObjectParameter("SecurityAnswer1", typeof(string));
    
            var securityQuestion2PLParameter = securityQuestion2PL.HasValue ?
                new ObjectParameter("SecurityQuestion2PL", securityQuestion2PL) :
                new ObjectParameter("SecurityQuestion2PL", typeof(int));
    
            var securityAnswer2Parameter = securityAnswer2 != null ?
                new ObjectParameter("SecurityAnswer2", securityAnswer2) :
                new ObjectParameter("SecurityAnswer2", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateSecurityQuestionsByUserId", portalAccountIdParameter, userNameParameter, securityQuestion1PLParameter, securityAnswer1Parameter, securityQuestion2PLParameter, securityAnswer2Parameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStaffLevel(Nullable<int> staffID, Nullable<int> staffFlag, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var staffIDParameter = staffID.HasValue ?
                new ObjectParameter("StaffID", staffID) :
                new ObjectParameter("StaffID", typeof(int));
    
            var staffFlagParameter = staffFlag.HasValue ?
                new ObjectParameter("StaffFlag", staffFlag) :
                new ObjectParameter("StaffFlag", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStaffLevel", staffIDParameter, staffFlagParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAddressContactForDifferentSchoolEnrolled(Nullable<int> applicationID, Nullable<int> studentID, Nullable<int> createdBy, Nullable<System.DateTime> createdDAte)
        {
            var applicationIDParameter = applicationID.HasValue ?
                new ObjectParameter("ApplicationID", applicationID) :
                new ObjectParameter("ApplicationID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDAteParameter = createdDAte.HasValue ?
                new ObjectParameter("CreatedDAte", createdDAte) :
                new ObjectParameter("CreatedDAte", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAddressContactForDifferentSchoolEnrolled", applicationIDParameter, studentIDParameter, createdByParameter, createdDAteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAddresses(Nullable<int> studentid, string primaryStreetNumber, string primaryStreetName, string primaryCity, string primaryStatePL, string primaryCountryPL, string primaryPostalCode, string primaryCountyPL, string primaryNeighborhood, string primaryApartment, string primaryLot, string primaryOther, Nullable<System.DateTime> primaryAddressStartDate, Nullable<System.DateTime> primaryAddressEndDate, Nullable<int> primaryflag, string secondaryStreetNumber, string secondaryStreetName, string secondaryCity, string secondaryStatePL, string secondaryCountryPL, string secondaryPostalCode, string secondaryCountyPL, string secondaryNeighborhood, string secondaryApartment, string secondaryLot, string secondaryOther, string mailingStreetNumber, string mailingStreetName, string mailingCity, string mailingState, string mailingCountry, string mailingZipCode, string mailingCounty, string mailingNeighbourhood, string mailingApartment, string mailingLot, string mailingOther, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var primaryStreetNumberParameter = primaryStreetNumber != null ?
                new ObjectParameter("PrimaryStreetNumber", primaryStreetNumber) :
                new ObjectParameter("PrimaryStreetNumber", typeof(string));
    
            var primaryStreetNameParameter = primaryStreetName != null ?
                new ObjectParameter("PrimaryStreetName", primaryStreetName) :
                new ObjectParameter("PrimaryStreetName", typeof(string));
    
            var primaryCityParameter = primaryCity != null ?
                new ObjectParameter("PrimaryCity", primaryCity) :
                new ObjectParameter("PrimaryCity", typeof(string));
    
            var primaryStatePLParameter = primaryStatePL != null ?
                new ObjectParameter("PrimaryStatePL", primaryStatePL) :
                new ObjectParameter("PrimaryStatePL", typeof(string));
    
            var primaryCountryPLParameter = primaryCountryPL != null ?
                new ObjectParameter("PrimaryCountryPL", primaryCountryPL) :
                new ObjectParameter("PrimaryCountryPL", typeof(string));
    
            var primaryPostalCodeParameter = primaryPostalCode != null ?
                new ObjectParameter("PrimaryPostalCode", primaryPostalCode) :
                new ObjectParameter("PrimaryPostalCode", typeof(string));
    
            var primaryCountyPLParameter = primaryCountyPL != null ?
                new ObjectParameter("PrimaryCountyPL", primaryCountyPL) :
                new ObjectParameter("PrimaryCountyPL", typeof(string));
    
            var primaryNeighborhoodParameter = primaryNeighborhood != null ?
                new ObjectParameter("PrimaryNeighborhood", primaryNeighborhood) :
                new ObjectParameter("PrimaryNeighborhood", typeof(string));
    
            var primaryApartmentParameter = primaryApartment != null ?
                new ObjectParameter("primaryApartment", primaryApartment) :
                new ObjectParameter("primaryApartment", typeof(string));
    
            var primaryLotParameter = primaryLot != null ?
                new ObjectParameter("primaryLot", primaryLot) :
                new ObjectParameter("primaryLot", typeof(string));
    
            var primaryOtherParameter = primaryOther != null ?
                new ObjectParameter("primaryOther", primaryOther) :
                new ObjectParameter("primaryOther", typeof(string));
    
            var primaryAddressStartDateParameter = primaryAddressStartDate.HasValue ?
                new ObjectParameter("primaryAddressStartDate", primaryAddressStartDate) :
                new ObjectParameter("primaryAddressStartDate", typeof(System.DateTime));
    
            var primaryAddressEndDateParameter = primaryAddressEndDate.HasValue ?
                new ObjectParameter("primaryAddressEndDate", primaryAddressEndDate) :
                new ObjectParameter("primaryAddressEndDate", typeof(System.DateTime));
    
            var primaryflagParameter = primaryflag.HasValue ?
                new ObjectParameter("primaryflag", primaryflag) :
                new ObjectParameter("primaryflag", typeof(int));
    
            var secondaryStreetNumberParameter = secondaryStreetNumber != null ?
                new ObjectParameter("SecondaryStreetNumber", secondaryStreetNumber) :
                new ObjectParameter("SecondaryStreetNumber", typeof(string));
    
            var secondaryStreetNameParameter = secondaryStreetName != null ?
                new ObjectParameter("SecondaryStreetName", secondaryStreetName) :
                new ObjectParameter("SecondaryStreetName", typeof(string));
    
            var secondaryCityParameter = secondaryCity != null ?
                new ObjectParameter("SecondaryCity", secondaryCity) :
                new ObjectParameter("SecondaryCity", typeof(string));
    
            var secondaryStatePLParameter = secondaryStatePL != null ?
                new ObjectParameter("SecondaryStatePL", secondaryStatePL) :
                new ObjectParameter("SecondaryStatePL", typeof(string));
    
            var secondaryCountryPLParameter = secondaryCountryPL != null ?
                new ObjectParameter("SecondaryCountryPL", secondaryCountryPL) :
                new ObjectParameter("SecondaryCountryPL", typeof(string));
    
            var secondaryPostalCodeParameter = secondaryPostalCode != null ?
                new ObjectParameter("SecondaryPostalCode", secondaryPostalCode) :
                new ObjectParameter("SecondaryPostalCode", typeof(string));
    
            var secondaryCountyPLParameter = secondaryCountyPL != null ?
                new ObjectParameter("SecondaryCountyPL", secondaryCountyPL) :
                new ObjectParameter("SecondaryCountyPL", typeof(string));
    
            var secondaryNeighborhoodParameter = secondaryNeighborhood != null ?
                new ObjectParameter("SecondaryNeighborhood", secondaryNeighborhood) :
                new ObjectParameter("SecondaryNeighborhood", typeof(string));
    
            var secondaryApartmentParameter = secondaryApartment != null ?
                new ObjectParameter("SecondaryApartment", secondaryApartment) :
                new ObjectParameter("SecondaryApartment", typeof(string));
    
            var secondaryLotParameter = secondaryLot != null ?
                new ObjectParameter("SecondaryLot", secondaryLot) :
                new ObjectParameter("SecondaryLot", typeof(string));
    
            var secondaryOtherParameter = secondaryOther != null ?
                new ObjectParameter("SecondaryOther", secondaryOther) :
                new ObjectParameter("SecondaryOther", typeof(string));
    
            var mailingStreetNumberParameter = mailingStreetNumber != null ?
                new ObjectParameter("MailingStreetNumber", mailingStreetNumber) :
                new ObjectParameter("MailingStreetNumber", typeof(string));
    
            var mailingStreetNameParameter = mailingStreetName != null ?
                new ObjectParameter("MailingStreetName", mailingStreetName) :
                new ObjectParameter("MailingStreetName", typeof(string));
    
            var mailingCityParameter = mailingCity != null ?
                new ObjectParameter("MailingCity", mailingCity) :
                new ObjectParameter("MailingCity", typeof(string));
    
            var mailingStateParameter = mailingState != null ?
                new ObjectParameter("MailingState", mailingState) :
                new ObjectParameter("MailingState", typeof(string));
    
            var mailingCountryParameter = mailingCountry != null ?
                new ObjectParameter("MailingCountry", mailingCountry) :
                new ObjectParameter("MailingCountry", typeof(string));
    
            var mailingZipCodeParameter = mailingZipCode != null ?
                new ObjectParameter("MailingZipCode", mailingZipCode) :
                new ObjectParameter("MailingZipCode", typeof(string));
    
            var mailingCountyParameter = mailingCounty != null ?
                new ObjectParameter("MailingCounty", mailingCounty) :
                new ObjectParameter("MailingCounty", typeof(string));
    
            var mailingNeighbourhoodParameter = mailingNeighbourhood != null ?
                new ObjectParameter("MailingNeighbourhood", mailingNeighbourhood) :
                new ObjectParameter("MailingNeighbourhood", typeof(string));
    
            var mailingApartmentParameter = mailingApartment != null ?
                new ObjectParameter("MailingApartment", mailingApartment) :
                new ObjectParameter("MailingApartment", typeof(string));
    
            var mailingLotParameter = mailingLot != null ?
                new ObjectParameter("MailingLot", mailingLot) :
                new ObjectParameter("MailingLot", typeof(string));
    
            var mailingOtherParameter = mailingOther != null ?
                new ObjectParameter("MailingOther", mailingOther) :
                new ObjectParameter("MailingOther", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAddresses", studentidParameter, primaryStreetNumberParameter, primaryStreetNameParameter, primaryCityParameter, primaryStatePLParameter, primaryCountryPLParameter, primaryPostalCodeParameter, primaryCountyPLParameter, primaryNeighborhoodParameter, primaryApartmentParameter, primaryLotParameter, primaryOtherParameter, primaryAddressStartDateParameter, primaryAddressEndDateParameter, primaryflagParameter, secondaryStreetNumberParameter, secondaryStreetNameParameter, secondaryCityParameter, secondaryStatePLParameter, secondaryCountryPLParameter, secondaryPostalCodeParameter, secondaryCountyPLParameter, secondaryNeighborhoodParameter, secondaryApartmentParameter, secondaryLotParameter, secondaryOtherParameter, mailingStreetNumberParameter, mailingStreetNameParameter, mailingCityParameter, mailingStateParameter, mailingCountryParameter, mailingZipCodeParameter, mailingCountyParameter, mailingNeighbourhoodParameter, mailingApartmentParameter, mailingLotParameter, mailingOtherParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAddressHistory(Nullable<int> studentID, Nullable<int> addressID, string primaryHomeStreetNumber, string primaryHomeStreetName, string primaryHomeState, string primaryHomeCity, string primaryHomeCountry, string primaryHomeZipCode, string primaryHomeCounty, string primaryHomeNeighbourhood, string primaryHomeApartment, string primaryHomeLot, string primaryHomeOther, Nullable<System.DateTime> primaryStartDate, Nullable<System.DateTime> primaryEndDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var primaryHomeStreetNumberParameter = primaryHomeStreetNumber != null ?
                new ObjectParameter("PrimaryHomeStreetNumber", primaryHomeStreetNumber) :
                new ObjectParameter("PrimaryHomeStreetNumber", typeof(string));
    
            var primaryHomeStreetNameParameter = primaryHomeStreetName != null ?
                new ObjectParameter("PrimaryHomeStreetName", primaryHomeStreetName) :
                new ObjectParameter("PrimaryHomeStreetName", typeof(string));
    
            var primaryHomeStateParameter = primaryHomeState != null ?
                new ObjectParameter("PrimaryHomeState", primaryHomeState) :
                new ObjectParameter("PrimaryHomeState", typeof(string));
    
            var primaryHomeCityParameter = primaryHomeCity != null ?
                new ObjectParameter("PrimaryHomeCity", primaryHomeCity) :
                new ObjectParameter("PrimaryHomeCity", typeof(string));
    
            var primaryHomeCountryParameter = primaryHomeCountry != null ?
                new ObjectParameter("PrimaryHomeCountry", primaryHomeCountry) :
                new ObjectParameter("PrimaryHomeCountry", typeof(string));
    
            var primaryHomeZipCodeParameter = primaryHomeZipCode != null ?
                new ObjectParameter("PrimaryHomeZipCode", primaryHomeZipCode) :
                new ObjectParameter("PrimaryHomeZipCode", typeof(string));
    
            var primaryHomeCountyParameter = primaryHomeCounty != null ?
                new ObjectParameter("PrimaryHomeCounty", primaryHomeCounty) :
                new ObjectParameter("PrimaryHomeCounty", typeof(string));
    
            var primaryHomeNeighbourhoodParameter = primaryHomeNeighbourhood != null ?
                new ObjectParameter("PrimaryHomeNeighbourhood", primaryHomeNeighbourhood) :
                new ObjectParameter("PrimaryHomeNeighbourhood", typeof(string));
    
            var primaryHomeApartmentParameter = primaryHomeApartment != null ?
                new ObjectParameter("PrimaryHomeApartment", primaryHomeApartment) :
                new ObjectParameter("PrimaryHomeApartment", typeof(string));
    
            var primaryHomeLotParameter = primaryHomeLot != null ?
                new ObjectParameter("PrimaryHomeLot", primaryHomeLot) :
                new ObjectParameter("PrimaryHomeLot", typeof(string));
    
            var primaryHomeOtherParameter = primaryHomeOther != null ?
                new ObjectParameter("PrimaryHomeOther", primaryHomeOther) :
                new ObjectParameter("PrimaryHomeOther", typeof(string));
    
            var primaryStartDateParameter = primaryStartDate.HasValue ?
                new ObjectParameter("PrimaryStartDate", primaryStartDate) :
                new ObjectParameter("PrimaryStartDate", typeof(System.DateTime));
    
            var primaryEndDateParameter = primaryEndDate.HasValue ?
                new ObjectParameter("PrimaryEndDate", primaryEndDate) :
                new ObjectParameter("PrimaryEndDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAddressHistory", studentIDParameter, addressIDParameter, primaryHomeStreetNumberParameter, primaryHomeStreetNameParameter, primaryHomeStateParameter, primaryHomeCityParameter, primaryHomeCountryParameter, primaryHomeZipCodeParameter, primaryHomeCountyParameter, primaryHomeNeighbourhoodParameter, primaryHomeApartmentParameter, primaryHomeLotParameter, primaryHomeOtherParameter, primaryStartDateParameter, primaryEndDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentApplicationSchoolID(Nullable<int> applicationid, Nullable<int> newschoolid, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var applicationidParameter = applicationid.HasValue ?
                new ObjectParameter("applicationid", applicationid) :
                new ObjectParameter("applicationid", typeof(int));
    
            var newschoolidParameter = newschoolid.HasValue ?
                new ObjectParameter("newschoolid", newschoolid) :
                new ObjectParameter("newschoolid", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentApplicationSchoolID", applicationidParameter, newschoolidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentApprovalStatus_Duplicates(Nullable<int> oldstudentid, Nullable<int> newapplicationId, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var oldstudentidParameter = oldstudentid.HasValue ?
                new ObjectParameter("oldstudentid", oldstudentid) :
                new ObjectParameter("oldstudentid", typeof(int));
    
            var newapplicationIdParameter = newapplicationId.HasValue ?
                new ObjectParameter("newapplicationId", newapplicationId) :
                new ObjectParameter("newapplicationId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentApprovalStatus_Duplicates", oldstudentidParameter, newapplicationIdParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentApprovalStatus_New(Nullable<int> newapplicationId, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var newapplicationIdParameter = newapplicationId.HasValue ?
                new ObjectParameter("newapplicationId", newapplicationId) :
                new ObjectParameter("newapplicationId", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentApprovalStatus_New", newapplicationIdParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAssessment(Nullable<int> assessmentPL, Nullable<int> test, Nullable<int> sTU, Nullable<int> districtId, Nullable<int> schoolId, Nullable<System.DateTime> assessmentDate, string arrayProgramCodes, Nullable<int> studentID, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<System.DateTime> oldAssessmentDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var testParameter = test.HasValue ?
                new ObjectParameter("Test", test) :
                new ObjectParameter("Test", typeof(int));
    
            var sTUParameter = sTU.HasValue ?
                new ObjectParameter("STU", sTU) :
                new ObjectParameter("STU", typeof(int));
    
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            var schoolIdParameter = schoolId.HasValue ?
                new ObjectParameter("SchoolId", schoolId) :
                new ObjectParameter("SchoolId", typeof(int));
    
            var assessmentDateParameter = assessmentDate.HasValue ?
                new ObjectParameter("AssessmentDate", assessmentDate) :
                new ObjectParameter("AssessmentDate", typeof(System.DateTime));
    
            var arrayProgramCodesParameter = arrayProgramCodes != null ?
                new ObjectParameter("ArrayProgramCodes", arrayProgramCodes) :
                new ObjectParameter("ArrayProgramCodes", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var oldAssessmentDateParameter = oldAssessmentDate.HasValue ?
                new ObjectParameter("OldAssessmentDate", oldAssessmentDate) :
                new ObjectParameter("OldAssessmentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAssessment", assessmentPLParameter, testParameter, sTUParameter, districtIdParameter, schoolIdParameter, assessmentDateParameter, arrayProgramCodesParameter, studentIDParameter, modifiedByParameter, modifiedDateParameter, oldAssessmentDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAssessmentAccommodations(Nullable<int> assessmentPL, string assessmentAreaCodeArray, Nullable<int> studentID, Nullable<System.DateTime> iEPDate, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<System.DateTime> oLDIEPDate)
        {
            var assessmentPLParameter = assessmentPL.HasValue ?
                new ObjectParameter("AssessmentPL", assessmentPL) :
                new ObjectParameter("AssessmentPL", typeof(int));
    
            var assessmentAreaCodeArrayParameter = assessmentAreaCodeArray != null ?
                new ObjectParameter("AssessmentAreaCodeArray", assessmentAreaCodeArray) :
                new ObjectParameter("AssessmentAreaCodeArray", typeof(string));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var oLDIEPDateParameter = oLDIEPDate.HasValue ?
                new ObjectParameter("OLDIEPDate", oLDIEPDate) :
                new ObjectParameter("OLDIEPDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAssessmentAccommodations", assessmentPLParameter, assessmentAreaCodeArrayParameter, studentIDParameter, iEPDateParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter, oLDIEPDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentAttendanceFromSummary(string studentAttendanceValuesArray, Nullable<long> attendanceTakenBy, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentAttendanceValuesArrayParameter = studentAttendanceValuesArray != null ?
                new ObjectParameter("StudentAttendanceValuesArray", studentAttendanceValuesArray) :
                new ObjectParameter("StudentAttendanceValuesArray", typeof(string));
    
            var attendanceTakenByParameter = attendanceTakenBy.HasValue ?
                new ObjectParameter("AttendanceTakenBy", attendanceTakenBy) :
                new ObjectParameter("AttendanceTakenBy", typeof(long));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentAttendanceFromSummary", studentAttendanceValuesArrayParameter, attendanceTakenByParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentContactHistory(Nullable<int> studentID, Nullable<int> addressID, Nullable<int> studentContactID, string lastName, string firstName, string middleName, Nullable<int> primaryContactRelationshipWithStudent, Nullable<bool> primaryIsConstactLegalCustodianOfStudent, Nullable<bool> primarySameAsStudentAddress, string primaryContactStreetNumber, string primaryContactStreetName, string primaryContactCountry, string primaryContactCounty, string primaryContactNeighbourhood, string primaryContactApartment, string primaryContactLot, string primaryContactOther, string primaryContactState, string primaryContactCity, string primaryContactZipCode, string primaryEmailAddress, Nullable<bool> primaryPhoneSameasStudentPhone, Nullable<bool> pPrivate, string primaryContactPhoneNumber, Nullable<bool> pALTPrivate, string primaryContactAlternatePhoneNumber, Nullable<int> primaryPhoneNumType, Nullable<int> primaryAltPhoneNumType, Nullable<bool> primaryIsConstactLegalGuardianOfStudent, Nullable<int> primaryPrefix, Nullable<int> primarySuffix, Nullable<int> primaryEmailType, string primaryContactExtension, string primaryContactAlternateExtension, Nullable<int> primaryPersonID, Nullable<int> primaryPriority, Nullable<System.DateTime> primaryStartDate, Nullable<System.DateTime> primaryEndDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var studentContactIDParameter = studentContactID.HasValue ?
                new ObjectParameter("StudentContactID", studentContactID) :
                new ObjectParameter("StudentContactID", typeof(int));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var primaryContactRelationshipWithStudentParameter = primaryContactRelationshipWithStudent.HasValue ?
                new ObjectParameter("PrimaryContactRelationshipWithStudent", primaryContactRelationshipWithStudent) :
                new ObjectParameter("PrimaryContactRelationshipWithStudent", typeof(int));
    
            var primaryIsConstactLegalCustodianOfStudentParameter = primaryIsConstactLegalCustodianOfStudent.HasValue ?
                new ObjectParameter("PrimaryIsConstactLegalCustodianOfStudent", primaryIsConstactLegalCustodianOfStudent) :
                new ObjectParameter("PrimaryIsConstactLegalCustodianOfStudent", typeof(bool));
    
            var primarySameAsStudentAddressParameter = primarySameAsStudentAddress.HasValue ?
                new ObjectParameter("PrimarySameAsStudentAddress", primarySameAsStudentAddress) :
                new ObjectParameter("PrimarySameAsStudentAddress", typeof(bool));
    
            var primaryContactStreetNumberParameter = primaryContactStreetNumber != null ?
                new ObjectParameter("PrimaryContactStreetNumber", primaryContactStreetNumber) :
                new ObjectParameter("PrimaryContactStreetNumber", typeof(string));
    
            var primaryContactStreetNameParameter = primaryContactStreetName != null ?
                new ObjectParameter("PrimaryContactStreetName", primaryContactStreetName) :
                new ObjectParameter("PrimaryContactStreetName", typeof(string));
    
            var primaryContactCountryParameter = primaryContactCountry != null ?
                new ObjectParameter("PrimaryContactCountry", primaryContactCountry) :
                new ObjectParameter("PrimaryContactCountry", typeof(string));
    
            var primaryContactCountyParameter = primaryContactCounty != null ?
                new ObjectParameter("PrimaryContactCounty", primaryContactCounty) :
                new ObjectParameter("PrimaryContactCounty", typeof(string));
    
            var primaryContactNeighbourhoodParameter = primaryContactNeighbourhood != null ?
                new ObjectParameter("PrimaryContactNeighbourhood", primaryContactNeighbourhood) :
                new ObjectParameter("PrimaryContactNeighbourhood", typeof(string));
    
            var primaryContactApartmentParameter = primaryContactApartment != null ?
                new ObjectParameter("PrimaryContactApartment", primaryContactApartment) :
                new ObjectParameter("PrimaryContactApartment", typeof(string));
    
            var primaryContactLotParameter = primaryContactLot != null ?
                new ObjectParameter("PrimaryContactLot", primaryContactLot) :
                new ObjectParameter("PrimaryContactLot", typeof(string));
    
            var primaryContactOtherParameter = primaryContactOther != null ?
                new ObjectParameter("PrimaryContactOther", primaryContactOther) :
                new ObjectParameter("PrimaryContactOther", typeof(string));
    
            var primaryContactStateParameter = primaryContactState != null ?
                new ObjectParameter("PrimaryContactState", primaryContactState) :
                new ObjectParameter("PrimaryContactState", typeof(string));
    
            var primaryContactCityParameter = primaryContactCity != null ?
                new ObjectParameter("PrimaryContactCity", primaryContactCity) :
                new ObjectParameter("PrimaryContactCity", typeof(string));
    
            var primaryContactZipCodeParameter = primaryContactZipCode != null ?
                new ObjectParameter("PrimaryContactZipCode", primaryContactZipCode) :
                new ObjectParameter("PrimaryContactZipCode", typeof(string));
    
            var primaryEmailAddressParameter = primaryEmailAddress != null ?
                new ObjectParameter("PrimaryEmailAddress", primaryEmailAddress) :
                new ObjectParameter("PrimaryEmailAddress", typeof(string));
    
            var primaryPhoneSameasStudentPhoneParameter = primaryPhoneSameasStudentPhone.HasValue ?
                new ObjectParameter("PrimaryPhoneSameasStudentPhone", primaryPhoneSameasStudentPhone) :
                new ObjectParameter("PrimaryPhoneSameasStudentPhone", typeof(bool));
    
            var pPrivateParameter = pPrivate.HasValue ?
                new ObjectParameter("PPrivate", pPrivate) :
                new ObjectParameter("PPrivate", typeof(bool));
    
            var primaryContactPhoneNumberParameter = primaryContactPhoneNumber != null ?
                new ObjectParameter("PrimaryContactPhoneNumber", primaryContactPhoneNumber) :
                new ObjectParameter("PrimaryContactPhoneNumber", typeof(string));
    
            var pALTPrivateParameter = pALTPrivate.HasValue ?
                new ObjectParameter("PALTPrivate", pALTPrivate) :
                new ObjectParameter("PALTPrivate", typeof(bool));
    
            var primaryContactAlternatePhoneNumberParameter = primaryContactAlternatePhoneNumber != null ?
                new ObjectParameter("PrimaryContactAlternatePhoneNumber", primaryContactAlternatePhoneNumber) :
                new ObjectParameter("PrimaryContactAlternatePhoneNumber", typeof(string));
    
            var primaryPhoneNumTypeParameter = primaryPhoneNumType.HasValue ?
                new ObjectParameter("PrimaryPhoneNumType", primaryPhoneNumType) :
                new ObjectParameter("PrimaryPhoneNumType", typeof(int));
    
            var primaryAltPhoneNumTypeParameter = primaryAltPhoneNumType.HasValue ?
                new ObjectParameter("PrimaryAltPhoneNumType", primaryAltPhoneNumType) :
                new ObjectParameter("PrimaryAltPhoneNumType", typeof(int));
    
            var primaryIsConstactLegalGuardianOfStudentParameter = primaryIsConstactLegalGuardianOfStudent.HasValue ?
                new ObjectParameter("PrimaryIsConstactLegalGuardianOfStudent", primaryIsConstactLegalGuardianOfStudent) :
                new ObjectParameter("PrimaryIsConstactLegalGuardianOfStudent", typeof(bool));
    
            var primaryPrefixParameter = primaryPrefix.HasValue ?
                new ObjectParameter("PrimaryPrefix", primaryPrefix) :
                new ObjectParameter("PrimaryPrefix", typeof(int));
    
            var primarySuffixParameter = primarySuffix.HasValue ?
                new ObjectParameter("PrimarySuffix", primarySuffix) :
                new ObjectParameter("PrimarySuffix", typeof(int));
    
            var primaryEmailTypeParameter = primaryEmailType.HasValue ?
                new ObjectParameter("PrimaryEmailType", primaryEmailType) :
                new ObjectParameter("PrimaryEmailType", typeof(int));
    
            var primaryContactExtensionParameter = primaryContactExtension != null ?
                new ObjectParameter("PrimaryContactExtension", primaryContactExtension) :
                new ObjectParameter("PrimaryContactExtension", typeof(string));
    
            var primaryContactAlternateExtensionParameter = primaryContactAlternateExtension != null ?
                new ObjectParameter("PrimaryContactAlternateExtension", primaryContactAlternateExtension) :
                new ObjectParameter("PrimaryContactAlternateExtension", typeof(string));
    
            var primaryPersonIDParameter = primaryPersonID.HasValue ?
                new ObjectParameter("PrimaryPersonID", primaryPersonID) :
                new ObjectParameter("PrimaryPersonID", typeof(int));
    
            var primaryPriorityParameter = primaryPriority.HasValue ?
                new ObjectParameter("PrimaryPriority", primaryPriority) :
                new ObjectParameter("PrimaryPriority", typeof(int));
    
            var primaryStartDateParameter = primaryStartDate.HasValue ?
                new ObjectParameter("PrimaryStartDate", primaryStartDate) :
                new ObjectParameter("PrimaryStartDate", typeof(System.DateTime));
    
            var primaryEndDateParameter = primaryEndDate.HasValue ?
                new ObjectParameter("PrimaryEndDate", primaryEndDate) :
                new ObjectParameter("PrimaryEndDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentContactHistory", studentIDParameter, addressIDParameter, studentContactIDParameter, lastNameParameter, firstNameParameter, middleNameParameter, primaryContactRelationshipWithStudentParameter, primaryIsConstactLegalCustodianOfStudentParameter, primarySameAsStudentAddressParameter, primaryContactStreetNumberParameter, primaryContactStreetNameParameter, primaryContactCountryParameter, primaryContactCountyParameter, primaryContactNeighbourhoodParameter, primaryContactApartmentParameter, primaryContactLotParameter, primaryContactOtherParameter, primaryContactStateParameter, primaryContactCityParameter, primaryContactZipCodeParameter, primaryEmailAddressParameter, primaryPhoneSameasStudentPhoneParameter, pPrivateParameter, primaryContactPhoneNumberParameter, pALTPrivateParameter, primaryContactAlternatePhoneNumberParameter, primaryPhoneNumTypeParameter, primaryAltPhoneNumTypeParameter, primaryIsConstactLegalGuardianOfStudentParameter, primaryPrefixParameter, primarySuffixParameter, primaryEmailTypeParameter, primaryContactExtensionParameter, primaryContactAlternateExtensionParameter, primaryPersonIDParameter, primaryPriorityParameter, primaryStartDateParameter, primaryEndDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentDatahistoryELements(Nullable<int> dataHistoryID, Nullable<int> studentID, string value, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> modifiedby, Nullable<System.DateTime> modifiedDate)
        {
            var dataHistoryIDParameter = dataHistoryID.HasValue ?
                new ObjectParameter("DataHistoryID", dataHistoryID) :
                new ObjectParameter("DataHistoryID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("Modifiedby", modifiedby) :
                new ObjectParameter("Modifiedby", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentDatahistoryELements", dataHistoryIDParameter, studentIDParameter, valueParameter, startDateParameter, endDateParameter, modifiedbyParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentDemographicsInfo(Nullable<int> studentID, string firstname, string middlename, string lastname, Nullable<int> suffix, string nickname, string mothersmaidenname, string dateofbirth, string age, Nullable<int> areyouhispanic, Nullable<int> gender, string birhtplacecity, Nullable<int> homelesspl, Nullable<bool> migrant, Nullable<int> gradelevel, Nullable<int> lastgrade, Nullable<int> stategradelevel, Nullable<int> statenextgradelevel, string statestudentid, Nullable<int> nativelanguage, Nullable<int> languageathome, Nullable<bool> racecheckallthatapply1, Nullable<bool> racecheckallthatapply2, Nullable<bool> racecheckallthatapply3, Nullable<bool> racecheckallthatapply4, Nullable<bool> racecheckallthatapply5, Nullable<int> counselorid, Nullable<int> patternid, string homephone, Nullable<int> homephonetype, Nullable<bool> hprivate, string altternatephonenumbers, string altphonetypes, string altprivates, Nullable<int> limitedenglishproficiency, Nullable<int> unaccompaniedYouthPL, string email, Nullable<int> gradreqid, Nullable<int> militarypl, string schoolassignedemail, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var middlenameParameter = middlename != null ?
                new ObjectParameter("middlename", middlename) :
                new ObjectParameter("middlename", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var suffixParameter = suffix.HasValue ?
                new ObjectParameter("suffix", suffix) :
                new ObjectParameter("suffix", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("nickname", nickname) :
                new ObjectParameter("nickname", typeof(string));
    
            var mothersmaidennameParameter = mothersmaidenname != null ?
                new ObjectParameter("mothersmaidenname", mothersmaidenname) :
                new ObjectParameter("mothersmaidenname", typeof(string));
    
            var dateofbirthParameter = dateofbirth != null ?
                new ObjectParameter("dateofbirth", dateofbirth) :
                new ObjectParameter("dateofbirth", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var areyouhispanicParameter = areyouhispanic.HasValue ?
                new ObjectParameter("areyouhispanic", areyouhispanic) :
                new ObjectParameter("areyouhispanic", typeof(int));
    
            var genderParameter = gender.HasValue ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(int));
    
            var birhtplacecityParameter = birhtplacecity != null ?
                new ObjectParameter("birhtplacecity", birhtplacecity) :
                new ObjectParameter("birhtplacecity", typeof(string));
    
            var homelessplParameter = homelesspl.HasValue ?
                new ObjectParameter("homelesspl", homelesspl) :
                new ObjectParameter("homelesspl", typeof(int));
    
            var migrantParameter = migrant.HasValue ?
                new ObjectParameter("migrant", migrant) :
                new ObjectParameter("migrant", typeof(bool));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var lastgradeParameter = lastgrade.HasValue ?
                new ObjectParameter("lastgrade", lastgrade) :
                new ObjectParameter("lastgrade", typeof(int));
    
            var stategradelevelParameter = stategradelevel.HasValue ?
                new ObjectParameter("stategradelevel", stategradelevel) :
                new ObjectParameter("stategradelevel", typeof(int));
    
            var statenextgradelevelParameter = statenextgradelevel.HasValue ?
                new ObjectParameter("statenextgradelevel", statenextgradelevel) :
                new ObjectParameter("statenextgradelevel", typeof(int));
    
            var statestudentidParameter = statestudentid != null ?
                new ObjectParameter("statestudentid", statestudentid) :
                new ObjectParameter("statestudentid", typeof(string));
    
            var nativelanguageParameter = nativelanguage.HasValue ?
                new ObjectParameter("nativelanguage", nativelanguage) :
                new ObjectParameter("nativelanguage", typeof(int));
    
            var languageathomeParameter = languageathome.HasValue ?
                new ObjectParameter("languageathome", languageathome) :
                new ObjectParameter("languageathome", typeof(int));
    
            var racecheckallthatapply1Parameter = racecheckallthatapply1.HasValue ?
                new ObjectParameter("racecheckallthatapply1", racecheckallthatapply1) :
                new ObjectParameter("racecheckallthatapply1", typeof(bool));
    
            var racecheckallthatapply2Parameter = racecheckallthatapply2.HasValue ?
                new ObjectParameter("racecheckallthatapply2", racecheckallthatapply2) :
                new ObjectParameter("racecheckallthatapply2", typeof(bool));
    
            var racecheckallthatapply3Parameter = racecheckallthatapply3.HasValue ?
                new ObjectParameter("racecheckallthatapply3", racecheckallthatapply3) :
                new ObjectParameter("racecheckallthatapply3", typeof(bool));
    
            var racecheckallthatapply4Parameter = racecheckallthatapply4.HasValue ?
                new ObjectParameter("racecheckallthatapply4", racecheckallthatapply4) :
                new ObjectParameter("racecheckallthatapply4", typeof(bool));
    
            var racecheckallthatapply5Parameter = racecheckallthatapply5.HasValue ?
                new ObjectParameter("racecheckallthatapply5", racecheckallthatapply5) :
                new ObjectParameter("racecheckallthatapply5", typeof(bool));
    
            var counseloridParameter = counselorid.HasValue ?
                new ObjectParameter("counselorid", counselorid) :
                new ObjectParameter("counselorid", typeof(int));
    
            var patternidParameter = patternid.HasValue ?
                new ObjectParameter("patternid", patternid) :
                new ObjectParameter("patternid", typeof(int));
    
            var homephoneParameter = homephone != null ?
                new ObjectParameter("homephone", homephone) :
                new ObjectParameter("homephone", typeof(string));
    
            var homephonetypeParameter = homephonetype.HasValue ?
                new ObjectParameter("homephonetype", homephonetype) :
                new ObjectParameter("homephonetype", typeof(int));
    
            var hprivateParameter = hprivate.HasValue ?
                new ObjectParameter("hprivate", hprivate) :
                new ObjectParameter("hprivate", typeof(bool));
    
            var altternatephonenumbersParameter = altternatephonenumbers != null ?
                new ObjectParameter("altternatephonenumbers", altternatephonenumbers) :
                new ObjectParameter("altternatephonenumbers", typeof(string));
    
            var altphonetypesParameter = altphonetypes != null ?
                new ObjectParameter("altphonetypes", altphonetypes) :
                new ObjectParameter("altphonetypes", typeof(string));
    
            var altprivatesParameter = altprivates != null ?
                new ObjectParameter("altprivates", altprivates) :
                new ObjectParameter("altprivates", typeof(string));
    
            var limitedenglishproficiencyParameter = limitedenglishproficiency.HasValue ?
                new ObjectParameter("limitedenglishproficiency", limitedenglishproficiency) :
                new ObjectParameter("limitedenglishproficiency", typeof(int));
    
            var unaccompaniedYouthPLParameter = unaccompaniedYouthPL.HasValue ?
                new ObjectParameter("unaccompaniedYouthPL", unaccompaniedYouthPL) :
                new ObjectParameter("unaccompaniedYouthPL", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var gradreqidParameter = gradreqid.HasValue ?
                new ObjectParameter("gradreqid", gradreqid) :
                new ObjectParameter("gradreqid", typeof(int));
    
            var militaryplParameter = militarypl.HasValue ?
                new ObjectParameter("militarypl", militarypl) :
                new ObjectParameter("militarypl", typeof(int));
    
            var schoolassignedemailParameter = schoolassignedemail != null ?
                new ObjectParameter("schoolassignedemail", schoolassignedemail) :
                new ObjectParameter("schoolassignedemail", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentDemographicsInfo", studentIDParameter, firstnameParameter, middlenameParameter, lastnameParameter, suffixParameter, nicknameParameter, mothersmaidennameParameter, dateofbirthParameter, ageParameter, areyouhispanicParameter, genderParameter, birhtplacecityParameter, homelessplParameter, migrantParameter, gradelevelParameter, lastgradeParameter, stategradelevelParameter, statenextgradelevelParameter, statestudentidParameter, nativelanguageParameter, languageathomeParameter, racecheckallthatapply1Parameter, racecheckallthatapply2Parameter, racecheckallthatapply3Parameter, racecheckallthatapply4Parameter, racecheckallthatapply5Parameter, counseloridParameter, patternidParameter, homephoneParameter, homephonetypeParameter, hprivateParameter, altternatephonenumbersParameter, altphonetypesParameter, altprivatesParameter, limitedenglishproficiencyParameter, unaccompaniedYouthPLParameter, emailParameter, gradreqidParameter, militaryplParameter, schoolassignedemailParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentDisciplineIncident(Nullable<int> studentDisciplineID, Nullable<System.DateTime> incidentDate, string incidentTime, Nullable<int> schoolID, Nullable<int> incidentSchoolID, Nullable<int> disciplineReason1, Nullable<int> disciplineReason2, Nullable<int> disciplineReason3, Nullable<int> disciplineReason4, Nullable<int> disciplineReason5, Nullable<int> typeOfDisciplineAction, Nullable<System.DateTime> startDate, Nullable<decimal> length, Nullable<int> modifiedPL, Nullable<int> referToAltEdService, string incidentDescription, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentDisciplineIDParameter = studentDisciplineID.HasValue ?
                new ObjectParameter("StudentDisciplineID", studentDisciplineID) :
                new ObjectParameter("StudentDisciplineID", typeof(int));
    
            var incidentDateParameter = incidentDate.HasValue ?
                new ObjectParameter("IncidentDate", incidentDate) :
                new ObjectParameter("IncidentDate", typeof(System.DateTime));
    
            var incidentTimeParameter = incidentTime != null ?
                new ObjectParameter("IncidentTime", incidentTime) :
                new ObjectParameter("IncidentTime", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var incidentSchoolIDParameter = incidentSchoolID.HasValue ?
                new ObjectParameter("IncidentSchoolID", incidentSchoolID) :
                new ObjectParameter("IncidentSchoolID", typeof(int));
    
            var disciplineReason1Parameter = disciplineReason1.HasValue ?
                new ObjectParameter("DisciplineReason1", disciplineReason1) :
                new ObjectParameter("DisciplineReason1", typeof(int));
    
            var disciplineReason2Parameter = disciplineReason2.HasValue ?
                new ObjectParameter("DisciplineReason2", disciplineReason2) :
                new ObjectParameter("DisciplineReason2", typeof(int));
    
            var disciplineReason3Parameter = disciplineReason3.HasValue ?
                new ObjectParameter("DisciplineReason3", disciplineReason3) :
                new ObjectParameter("DisciplineReason3", typeof(int));
    
            var disciplineReason4Parameter = disciplineReason4.HasValue ?
                new ObjectParameter("DisciplineReason4", disciplineReason4) :
                new ObjectParameter("DisciplineReason4", typeof(int));
    
            var disciplineReason5Parameter = disciplineReason5.HasValue ?
                new ObjectParameter("DisciplineReason5", disciplineReason5) :
                new ObjectParameter("DisciplineReason5", typeof(int));
    
            var typeOfDisciplineActionParameter = typeOfDisciplineAction.HasValue ?
                new ObjectParameter("TypeOfDisciplineAction", typeOfDisciplineAction) :
                new ObjectParameter("TypeOfDisciplineAction", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(decimal));
    
            var modifiedPLParameter = modifiedPL.HasValue ?
                new ObjectParameter("ModifiedPL", modifiedPL) :
                new ObjectParameter("ModifiedPL", typeof(int));
    
            var referToAltEdServiceParameter = referToAltEdService.HasValue ?
                new ObjectParameter("ReferToAltEdService", referToAltEdService) :
                new ObjectParameter("ReferToAltEdService", typeof(int));
    
            var incidentDescriptionParameter = incidentDescription != null ?
                new ObjectParameter("IncidentDescription", incidentDescription) :
                new ObjectParameter("IncidentDescription", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentDisciplineIncident", studentDisciplineIDParameter, incidentDateParameter, incidentTimeParameter, schoolIDParameter, incidentSchoolIDParameter, disciplineReason1Parameter, disciplineReason2Parameter, disciplineReason3Parameter, disciplineReason4Parameter, disciplineReason5Parameter, typeOfDisciplineActionParameter, startDateParameter, lengthParameter, modifiedPLParameter, referToAltEdServiceParameter, incidentDescriptionParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentEnrollments(Nullable<int> enrollmentID, Nullable<int> studentID, string enrollmentDate, Nullable<int> enrollmentCode, string enrollmentDescription, Nullable<int> admittedFromDistrict, Nullable<int> districtOfResidence, string districtResidenceIRN, Nullable<int> relationshipTypeCode, Nullable<int> formerSchoolDistrict, Nullable<int> formerSchoolAttended, Nullable<int> formerSchoolType, Nullable<int> enrolledSchoolID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var enrollmentDateParameter = enrollmentDate != null ?
                new ObjectParameter("EnrollmentDate", enrollmentDate) :
                new ObjectParameter("EnrollmentDate", typeof(string));
    
            var enrollmentCodeParameter = enrollmentCode.HasValue ?
                new ObjectParameter("EnrollmentCode", enrollmentCode) :
                new ObjectParameter("EnrollmentCode", typeof(int));
    
            var enrollmentDescriptionParameter = enrollmentDescription != null ?
                new ObjectParameter("EnrollmentDescription", enrollmentDescription) :
                new ObjectParameter("EnrollmentDescription", typeof(string));
    
            var admittedFromDistrictParameter = admittedFromDistrict.HasValue ?
                new ObjectParameter("AdmittedFromDistrict", admittedFromDistrict) :
                new ObjectParameter("AdmittedFromDistrict", typeof(int));
    
            var districtOfResidenceParameter = districtOfResidence.HasValue ?
                new ObjectParameter("DistrictOfResidence", districtOfResidence) :
                new ObjectParameter("DistrictOfResidence", typeof(int));
    
            var districtResidenceIRNParameter = districtResidenceIRN != null ?
                new ObjectParameter("DistrictResidenceIRN", districtResidenceIRN) :
                new ObjectParameter("DistrictResidenceIRN", typeof(string));
    
            var relationshipTypeCodeParameter = relationshipTypeCode.HasValue ?
                new ObjectParameter("RelationshipTypeCode", relationshipTypeCode) :
                new ObjectParameter("RelationshipTypeCode", typeof(int));
    
            var formerSchoolDistrictParameter = formerSchoolDistrict.HasValue ?
                new ObjectParameter("FormerSchoolDistrict", formerSchoolDistrict) :
                new ObjectParameter("FormerSchoolDistrict", typeof(int));
    
            var formerSchoolAttendedParameter = formerSchoolAttended.HasValue ?
                new ObjectParameter("FormerSchoolAttended", formerSchoolAttended) :
                new ObjectParameter("FormerSchoolAttended", typeof(int));
    
            var formerSchoolTypeParameter = formerSchoolType.HasValue ?
                new ObjectParameter("FormerSchoolType", formerSchoolType) :
                new ObjectParameter("FormerSchoolType", typeof(int));
    
            var enrolledSchoolIDParameter = enrolledSchoolID.HasValue ?
                new ObjectParameter("EnrolledSchoolID", enrolledSchoolID) :
                new ObjectParameter("EnrolledSchoolID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentEnrollments", enrollmentIDParameter, studentIDParameter, enrollmentDateParameter, enrollmentCodeParameter, enrollmentDescriptionParameter, admittedFromDistrictParameter, districtOfResidenceParameter, districtResidenceIRNParameter, relationshipTypeCodeParameter, formerSchoolDistrictParameter, formerSchoolAttendedParameter, formerSchoolTypeParameter, enrolledSchoolIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentEnrollments_TMP(Nullable<int> enrollmentID, Nullable<int> studentID, string enrollmentDate, Nullable<int> enrollmentCode, string enrollmentDescription, Nullable<int> admittedFromDistrict, Nullable<int> districtOfResidence, string districtResidenceIRN, Nullable<int> relationshipTypeCode, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var enrollmentIDParameter = enrollmentID.HasValue ?
                new ObjectParameter("EnrollmentID", enrollmentID) :
                new ObjectParameter("EnrollmentID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var enrollmentDateParameter = enrollmentDate != null ?
                new ObjectParameter("EnrollmentDate", enrollmentDate) :
                new ObjectParameter("EnrollmentDate", typeof(string));
    
            var enrollmentCodeParameter = enrollmentCode.HasValue ?
                new ObjectParameter("EnrollmentCode", enrollmentCode) :
                new ObjectParameter("EnrollmentCode", typeof(int));
    
            var enrollmentDescriptionParameter = enrollmentDescription != null ?
                new ObjectParameter("EnrollmentDescription", enrollmentDescription) :
                new ObjectParameter("EnrollmentDescription", typeof(string));
    
            var admittedFromDistrictParameter = admittedFromDistrict.HasValue ?
                new ObjectParameter("AdmittedFromDistrict", admittedFromDistrict) :
                new ObjectParameter("AdmittedFromDistrict", typeof(int));
    
            var districtOfResidenceParameter = districtOfResidence.HasValue ?
                new ObjectParameter("DistrictOfResidence", districtOfResidence) :
                new ObjectParameter("DistrictOfResidence", typeof(int));
    
            var districtResidenceIRNParameter = districtResidenceIRN != null ?
                new ObjectParameter("DistrictResidenceIRN", districtResidenceIRN) :
                new ObjectParameter("DistrictResidenceIRN", typeof(string));
    
            var relationshipTypeCodeParameter = relationshipTypeCode.HasValue ?
                new ObjectParameter("RelationshipTypeCode", relationshipTypeCode) :
                new ObjectParameter("RelationshipTypeCode", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentEnrollments_TMP", enrollmentIDParameter, studentIDParameter, enrollmentDateParameter, enrollmentCodeParameter, enrollmentDescriptionParameter, admittedFromDistrictParameter, districtOfResidenceParameter, districtResidenceIRNParameter, relationshipTypeCodeParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentEvolutionProcess(string studentIDS, Nullable<int> schoolID, Nullable<int> schoolYearID, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIDSParameter = studentIDS != null ?
                new ObjectParameter("StudentIDS", studentIDS) :
                new ObjectParameter("StudentIDS", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var schoolYearIDParameter = schoolYearID.HasValue ?
                new ObjectParameter("SchoolYearID", schoolYearID) :
                new ObjectParameter("SchoolYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentEvolutionProcess", studentIDSParameter, schoolIDParameter, schoolYearIDParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentExcessiveHabitualAbsDetails(Nullable<int> sEHAID, Nullable<int> absenceEventPL, Nullable<int> hoursOfAbsencePL, Nullable<int> absenceTypePL, Nullable<int> categoryOfHoursPL, Nullable<int> typeofNoticePL, Nullable<System.DateTime> eventDate, Nullable<System.DateTime> noticeDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var sEHAIDParameter = sEHAID.HasValue ?
                new ObjectParameter("SEHAID", sEHAID) :
                new ObjectParameter("SEHAID", typeof(int));
    
            var absenceEventPLParameter = absenceEventPL.HasValue ?
                new ObjectParameter("AbsenceEventPL", absenceEventPL) :
                new ObjectParameter("AbsenceEventPL", typeof(int));
    
            var hoursOfAbsencePLParameter = hoursOfAbsencePL.HasValue ?
                new ObjectParameter("HoursOfAbsencePL", hoursOfAbsencePL) :
                new ObjectParameter("HoursOfAbsencePL", typeof(int));
    
            var absenceTypePLParameter = absenceTypePL.HasValue ?
                new ObjectParameter("AbsenceTypePL", absenceTypePL) :
                new ObjectParameter("AbsenceTypePL", typeof(int));
    
            var categoryOfHoursPLParameter = categoryOfHoursPL.HasValue ?
                new ObjectParameter("CategoryOfHoursPL", categoryOfHoursPL) :
                new ObjectParameter("CategoryOfHoursPL", typeof(int));
    
            var typeofNoticePLParameter = typeofNoticePL.HasValue ?
                new ObjectParameter("TypeofNoticePL", typeofNoticePL) :
                new ObjectParameter("TypeofNoticePL", typeof(int));
    
            var eventDateParameter = eventDate.HasValue ?
                new ObjectParameter("EventDate", eventDate) :
                new ObjectParameter("EventDate", typeof(System.DateTime));
    
            var noticeDateParameter = noticeDate.HasValue ?
                new ObjectParameter("NoticeDate", noticeDate) :
                new ObjectParameter("NoticeDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentExcessiveHabitualAbsDetails", sEHAIDParameter, absenceEventPLParameter, hoursOfAbsencePLParameter, absenceTypePLParameter, categoryOfHoursPLParameter, typeofNoticePLParameter, eventDateParameter, noticeDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentGrade(Nullable<int> studentGradeID, Nullable<int> studentID, string courseNumber, string courseName, string sectionNumber, string termName, Nullable<int> finalGradePercentage, string finalGradeAlpha, Nullable<decimal> creditAttempted, Nullable<decimal> creditEarned, string districtName, string schoolName, string schoolYear, string teacherName, Nullable<int> studentGradeLevelId, Nullable<int> subjectAreaForCreditId, Nullable<System.DateTime> courseEndDate, string courseComments, Nullable<int> coreAreaCode, Nullable<bool> isHighSchoolCredit, Nullable<bool> iSGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintOnTranscript, Nullable<bool> isPrintOnReportCard, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> schoolCourseSectionID, string schoolCourseEndYear, Nullable<int> gradReqDetailId)
        {
            var studentGradeIDParameter = studentGradeID.HasValue ?
                new ObjectParameter("StudentGradeID", studentGradeID) :
                new ObjectParameter("StudentGradeID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var courseNumberParameter = courseNumber != null ?
                new ObjectParameter("CourseNumber", courseNumber) :
                new ObjectParameter("CourseNumber", typeof(string));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var sectionNumberParameter = sectionNumber != null ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(string));
    
            var termNameParameter = termName != null ?
                new ObjectParameter("TermName", termName) :
                new ObjectParameter("TermName", typeof(string));
    
            var finalGradePercentageParameter = finalGradePercentage.HasValue ?
                new ObjectParameter("FinalGradePercentage", finalGradePercentage) :
                new ObjectParameter("FinalGradePercentage", typeof(int));
    
            var finalGradeAlphaParameter = finalGradeAlpha != null ?
                new ObjectParameter("FinalGradeAlpha", finalGradeAlpha) :
                new ObjectParameter("FinalGradeAlpha", typeof(string));
    
            var creditAttemptedParameter = creditAttempted.HasValue ?
                new ObjectParameter("CreditAttempted", creditAttempted) :
                new ObjectParameter("CreditAttempted", typeof(decimal));
    
            var creditEarnedParameter = creditEarned.HasValue ?
                new ObjectParameter("CreditEarned", creditEarned) :
                new ObjectParameter("CreditEarned", typeof(decimal));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var teacherNameParameter = teacherName != null ?
                new ObjectParameter("TeacherName", teacherName) :
                new ObjectParameter("TeacherName", typeof(string));
    
            var studentGradeLevelIdParameter = studentGradeLevelId.HasValue ?
                new ObjectParameter("StudentGradeLevelId", studentGradeLevelId) :
                new ObjectParameter("StudentGradeLevelId", typeof(int));
    
            var subjectAreaForCreditIdParameter = subjectAreaForCreditId.HasValue ?
                new ObjectParameter("SubjectAreaForCreditId", subjectAreaForCreditId) :
                new ObjectParameter("SubjectAreaForCreditId", typeof(int));
    
            var courseEndDateParameter = courseEndDate.HasValue ?
                new ObjectParameter("CourseEndDate", courseEndDate) :
                new ObjectParameter("CourseEndDate", typeof(System.DateTime));
    
            var courseCommentsParameter = courseComments != null ?
                new ObjectParameter("CourseComments", courseComments) :
                new ObjectParameter("CourseComments", typeof(string));
    
            var coreAreaCodeParameter = coreAreaCode.HasValue ?
                new ObjectParameter("CoreAreaCode", coreAreaCode) :
                new ObjectParameter("CoreAreaCode", typeof(int));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var iSGPAParameter = iSGPA.HasValue ?
                new ObjectParameter("ISGPA", iSGPA) :
                new ObjectParameter("ISGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintOnTranscriptParameter = isPrintOnTranscript.HasValue ?
                new ObjectParameter("IsPrintOnTranscript", isPrintOnTranscript) :
                new ObjectParameter("IsPrintOnTranscript", typeof(bool));
    
            var isPrintOnReportCardParameter = isPrintOnReportCard.HasValue ?
                new ObjectParameter("IsPrintOnReportCard", isPrintOnReportCard) :
                new ObjectParameter("IsPrintOnReportCard", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var schoolCourseSectionIDParameter = schoolCourseSectionID.HasValue ?
                new ObjectParameter("SchoolCourseSectionID", schoolCourseSectionID) :
                new ObjectParameter("SchoolCourseSectionID", typeof(int));
    
            var schoolCourseEndYearParameter = schoolCourseEndYear != null ?
                new ObjectParameter("SchoolCourseEndYear", schoolCourseEndYear) :
                new ObjectParameter("SchoolCourseEndYear", typeof(string));
    
            var gradReqDetailIdParameter = gradReqDetailId.HasValue ?
                new ObjectParameter("GradReqDetailId", gradReqDetailId) :
                new ObjectParameter("GradReqDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentGrade", studentGradeIDParameter, studentIDParameter, courseNumberParameter, courseNameParameter, sectionNumberParameter, termNameParameter, finalGradePercentageParameter, finalGradeAlphaParameter, creditAttemptedParameter, creditEarnedParameter, districtNameParameter, schoolNameParameter, schoolYearParameter, teacherNameParameter, studentGradeLevelIdParameter, subjectAreaForCreditIdParameter, courseEndDateParameter, courseCommentsParameter, coreAreaCodeParameter, isHighSchoolCreditParameter, iSGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintOnTranscriptParameter, isPrintOnReportCardParameter, modifiedByParameter, modifiedDateParameter, schoolCourseSectionIDParameter, schoolCourseEndYearParameter, gradReqDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentGradRequirements(Nullable<int> studentGradRequirementId, Nullable<int> studentID, Nullable<System.DateTime> oldIEPDate, Nullable<System.DateTime> newIEPDate, Nullable<int> iEPDateTypePL, Nullable<int> oldAssessmentTypePL, Nullable<int> newAssessmentTypePL, string assessmentAreaPL, Nullable<int> exemptionFlagPL, Nullable<bool> isActive, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentGradRequirementIdParameter = studentGradRequirementId.HasValue ?
                new ObjectParameter("StudentGradRequirementId", studentGradRequirementId) :
                new ObjectParameter("StudentGradRequirementId", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var oldIEPDateParameter = oldIEPDate.HasValue ?
                new ObjectParameter("OldIEPDate", oldIEPDate) :
                new ObjectParameter("OldIEPDate", typeof(System.DateTime));
    
            var newIEPDateParameter = newIEPDate.HasValue ?
                new ObjectParameter("NewIEPDate", newIEPDate) :
                new ObjectParameter("NewIEPDate", typeof(System.DateTime));
    
            var iEPDateTypePLParameter = iEPDateTypePL.HasValue ?
                new ObjectParameter("IEPDateTypePL", iEPDateTypePL) :
                new ObjectParameter("IEPDateTypePL", typeof(int));
    
            var oldAssessmentTypePLParameter = oldAssessmentTypePL.HasValue ?
                new ObjectParameter("OldAssessmentTypePL", oldAssessmentTypePL) :
                new ObjectParameter("OldAssessmentTypePL", typeof(int));
    
            var newAssessmentTypePLParameter = newAssessmentTypePL.HasValue ?
                new ObjectParameter("NewAssessmentTypePL", newAssessmentTypePL) :
                new ObjectParameter("NewAssessmentTypePL", typeof(int));
    
            var assessmentAreaPLParameter = assessmentAreaPL != null ?
                new ObjectParameter("AssessmentAreaPL", assessmentAreaPL) :
                new ObjectParameter("AssessmentAreaPL", typeof(string));
    
            var exemptionFlagPLParameter = exemptionFlagPL.HasValue ?
                new ObjectParameter("ExemptionFlagPL", exemptionFlagPL) :
                new ObjectParameter("ExemptionFlagPL", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentGradRequirements", studentGradRequirementIdParameter, studentIDParameter, oldIEPDateParameter, newIEPDateParameter, iEPDateTypePLParameter, oldAssessmentTypePLParameter, newAssessmentTypePLParameter, assessmentAreaPLParameter, exemptionFlagPLParameter, isActiveParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentHistoricalGrade(Nullable<int> studentGradeID, string schoolYear, string districtName, string schoolName, Nullable<int> studentGradeLevelID, string courseName, Nullable<int> subjectAreaForCreditId, string finalGradeAlpha, Nullable<decimal> creditAttempted, Nullable<decimal> creditEarned, string courseComments, Nullable<int> coreAreaCode, Nullable<bool> isHighSchoolCredit, Nullable<bool> iSGPA, Nullable<bool> isClassRank, Nullable<bool> isHonorRoll, Nullable<bool> isPrintOnTranscript, Nullable<bool> isPrintOnReportCard, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate, Nullable<int> gradReqDetailId)
        {
            var studentGradeIDParameter = studentGradeID.HasValue ?
                new ObjectParameter("StudentGradeID", studentGradeID) :
                new ObjectParameter("StudentGradeID", typeof(int));
    
            var schoolYearParameter = schoolYear != null ?
                new ObjectParameter("SchoolYear", schoolYear) :
                new ObjectParameter("SchoolYear", typeof(string));
    
            var districtNameParameter = districtName != null ?
                new ObjectParameter("DistrictName", districtName) :
                new ObjectParameter("DistrictName", typeof(string));
    
            var schoolNameParameter = schoolName != null ?
                new ObjectParameter("SchoolName", schoolName) :
                new ObjectParameter("SchoolName", typeof(string));
    
            var studentGradeLevelIDParameter = studentGradeLevelID.HasValue ?
                new ObjectParameter("StudentGradeLevelID", studentGradeLevelID) :
                new ObjectParameter("StudentGradeLevelID", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("CourseName", courseName) :
                new ObjectParameter("CourseName", typeof(string));
    
            var subjectAreaForCreditIdParameter = subjectAreaForCreditId.HasValue ?
                new ObjectParameter("SubjectAreaForCreditId", subjectAreaForCreditId) :
                new ObjectParameter("SubjectAreaForCreditId", typeof(int));
    
            var finalGradeAlphaParameter = finalGradeAlpha != null ?
                new ObjectParameter("FinalGradeAlpha", finalGradeAlpha) :
                new ObjectParameter("FinalGradeAlpha", typeof(string));
    
            var creditAttemptedParameter = creditAttempted.HasValue ?
                new ObjectParameter("CreditAttempted", creditAttempted) :
                new ObjectParameter("CreditAttempted", typeof(decimal));
    
            var creditEarnedParameter = creditEarned.HasValue ?
                new ObjectParameter("CreditEarned", creditEarned) :
                new ObjectParameter("CreditEarned", typeof(decimal));
    
            var courseCommentsParameter = courseComments != null ?
                new ObjectParameter("CourseComments", courseComments) :
                new ObjectParameter("CourseComments", typeof(string));
    
            var coreAreaCodeParameter = coreAreaCode.HasValue ?
                new ObjectParameter("CoreAreaCode", coreAreaCode) :
                new ObjectParameter("CoreAreaCode", typeof(int));
    
            var isHighSchoolCreditParameter = isHighSchoolCredit.HasValue ?
                new ObjectParameter("IsHighSchoolCredit", isHighSchoolCredit) :
                new ObjectParameter("IsHighSchoolCredit", typeof(bool));
    
            var iSGPAParameter = iSGPA.HasValue ?
                new ObjectParameter("ISGPA", iSGPA) :
                new ObjectParameter("ISGPA", typeof(bool));
    
            var isClassRankParameter = isClassRank.HasValue ?
                new ObjectParameter("IsClassRank", isClassRank) :
                new ObjectParameter("IsClassRank", typeof(bool));
    
            var isHonorRollParameter = isHonorRoll.HasValue ?
                new ObjectParameter("IsHonorRoll", isHonorRoll) :
                new ObjectParameter("IsHonorRoll", typeof(bool));
    
            var isPrintOnTranscriptParameter = isPrintOnTranscript.HasValue ?
                new ObjectParameter("IsPrintOnTranscript", isPrintOnTranscript) :
                new ObjectParameter("IsPrintOnTranscript", typeof(bool));
    
            var isPrintOnReportCardParameter = isPrintOnReportCard.HasValue ?
                new ObjectParameter("IsPrintOnReportCard", isPrintOnReportCard) :
                new ObjectParameter("IsPrintOnReportCard", typeof(bool));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            var gradReqDetailIdParameter = gradReqDetailId.HasValue ?
                new ObjectParameter("GradReqDetailId", gradReqDetailId) :
                new ObjectParameter("GradReqDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentHistoricalGrade", studentGradeIDParameter, schoolYearParameter, districtNameParameter, schoolNameParameter, studentGradeLevelIDParameter, courseNameParameter, subjectAreaForCreditIdParameter, finalGradeAlphaParameter, creditAttemptedParameter, creditEarnedParameter, courseCommentsParameter, coreAreaCodeParameter, isHighSchoolCreditParameter, iSGPAParameter, isClassRankParameter, isHonorRollParameter, isPrintOnTranscriptParameter, isPrintOnReportCardParameter, modifiedByParameter, modifiedDateParameter, gradReqDetailIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentHomeroomDates(Nullable<int> studentHomeroomID, Nullable<System.DateTime> startDate, string endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentHomeroomIDParameter = studentHomeroomID.HasValue ?
                new ObjectParameter("StudentHomeroomID", studentHomeroomID) :
                new ObjectParameter("StudentHomeroomID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentHomeroomDates", studentHomeroomIDParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int uspUpdateStudentID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateStudentID", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentInterventionStaff(string staffDetails, Nullable<int> mofifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var staffDetailsParameter = staffDetails != null ?
                new ObjectParameter("StaffDetails", staffDetails) :
                new ObjectParameter("StaffDetails", typeof(string));
    
            var mofifiedByParameter = mofifiedBy.HasValue ?
                new ObjectParameter("MofifiedBy", mofifiedBy) :
                new ObjectParameter("MofifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentInterventionStaff", staffDetailsParameter, mofifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentMoreInfo(Nullable<int> studentID, Nullable<int> disadvantagement, Nullable<int> preschoolpovertylevel, Nullable<int> retainedstatus, Nullable<int> region, Nullable<int> tuitiontype, Nullable<int> immigrantstatus, string studentPercentofTime, Nullable<System.DateTime> districtAdmissionDate, Nullable<int> assignedBuildingAreaIRN, Nullable<int> howReceived, Nullable<int> howReceivedIRN, Nullable<int> sentReason1, Nullable<int> senttoIRN1, string senttoPercentofTime1, Nullable<int> sentReason2, Nullable<int> senttoIRN2, string senttoPercentofTime2, Nullable<int> previousYearDistrictIRN, Nullable<int> nextYearAttendingBuildingIRN, Nullable<int> accountabiltiyIRN, Nullable<int> attendingBuildingIRN, Nullable<int> majorityAttendanceSchoolID, Nullable<System.DateTime> admissiontoCurrentHighSchool, Nullable<int> oGTGraduationAlternative, Nullable<int> cOREEconomicisandFinancialLiteracyRequirementMet, Nullable<int> cOREFineArtsRequirementMet, Nullable<int> exemptedfromPhysicalEducationGradRequirement, Nullable<int> cOREGraduationRequirementExemptionCode, Nullable<System.DateTime> cOREGraduationRequirementExemptionDate, Nullable<int> cOREGraduationRequirementMetFlag, Nullable<int> militaryCompactGraduationAlternativeCount, Nullable<System.DateTime> expectedGraduationDate, Nullable<int> foreignExchangeStudentGraduationPlan, Nullable<int> cTEProgramofConcentration, Nullable<int> fiscalYearStudentBegan9thGrade, string legacyStudentID, string externalUserName, string externalPassword, Nullable<int> serviceLevel, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var disadvantagementParameter = disadvantagement.HasValue ?
                new ObjectParameter("disadvantagement", disadvantagement) :
                new ObjectParameter("disadvantagement", typeof(int));
    
            var preschoolpovertylevelParameter = preschoolpovertylevel.HasValue ?
                new ObjectParameter("preschoolpovertylevel", preschoolpovertylevel) :
                new ObjectParameter("preschoolpovertylevel", typeof(int));
    
            var retainedstatusParameter = retainedstatus.HasValue ?
                new ObjectParameter("retainedstatus", retainedstatus) :
                new ObjectParameter("retainedstatus", typeof(int));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(int));
    
            var tuitiontypeParameter = tuitiontype.HasValue ?
                new ObjectParameter("tuitiontype", tuitiontype) :
                new ObjectParameter("tuitiontype", typeof(int));
    
            var immigrantstatusParameter = immigrantstatus.HasValue ?
                new ObjectParameter("Immigrantstatus", immigrantstatus) :
                new ObjectParameter("Immigrantstatus", typeof(int));
    
            var studentPercentofTimeParameter = studentPercentofTime != null ?
                new ObjectParameter("StudentPercentofTime", studentPercentofTime) :
                new ObjectParameter("StudentPercentofTime", typeof(string));
    
            var districtAdmissionDateParameter = districtAdmissionDate.HasValue ?
                new ObjectParameter("DistrictAdmissionDate", districtAdmissionDate) :
                new ObjectParameter("DistrictAdmissionDate", typeof(System.DateTime));
    
            var assignedBuildingAreaIRNParameter = assignedBuildingAreaIRN.HasValue ?
                new ObjectParameter("AssignedBuildingAreaIRN", assignedBuildingAreaIRN) :
                new ObjectParameter("AssignedBuildingAreaIRN", typeof(int));
    
            var howReceivedParameter = howReceived.HasValue ?
                new ObjectParameter("HowReceived", howReceived) :
                new ObjectParameter("HowReceived", typeof(int));
    
            var howReceivedIRNParameter = howReceivedIRN.HasValue ?
                new ObjectParameter("HowReceivedIRN", howReceivedIRN) :
                new ObjectParameter("HowReceivedIRN", typeof(int));
    
            var sentReason1Parameter = sentReason1.HasValue ?
                new ObjectParameter("SentReason1", sentReason1) :
                new ObjectParameter("SentReason1", typeof(int));
    
            var senttoIRN1Parameter = senttoIRN1.HasValue ?
                new ObjectParameter("SenttoIRN1", senttoIRN1) :
                new ObjectParameter("SenttoIRN1", typeof(int));
    
            var senttoPercentofTime1Parameter = senttoPercentofTime1 != null ?
                new ObjectParameter("SenttoPercentofTime1", senttoPercentofTime1) :
                new ObjectParameter("SenttoPercentofTime1", typeof(string));
    
            var sentReason2Parameter = sentReason2.HasValue ?
                new ObjectParameter("SentReason2", sentReason2) :
                new ObjectParameter("SentReason2", typeof(int));
    
            var senttoIRN2Parameter = senttoIRN2.HasValue ?
                new ObjectParameter("SenttoIRN2", senttoIRN2) :
                new ObjectParameter("SenttoIRN2", typeof(int));
    
            var senttoPercentofTime2Parameter = senttoPercentofTime2 != null ?
                new ObjectParameter("SenttoPercentofTime2", senttoPercentofTime2) :
                new ObjectParameter("SenttoPercentofTime2", typeof(string));
    
            var previousYearDistrictIRNParameter = previousYearDistrictIRN.HasValue ?
                new ObjectParameter("PreviousYearDistrictIRN", previousYearDistrictIRN) :
                new ObjectParameter("PreviousYearDistrictIRN", typeof(int));
    
            var nextYearAttendingBuildingIRNParameter = nextYearAttendingBuildingIRN.HasValue ?
                new ObjectParameter("NextYearAttendingBuildingIRN", nextYearAttendingBuildingIRN) :
                new ObjectParameter("NextYearAttendingBuildingIRN", typeof(int));
    
            var accountabiltiyIRNParameter = accountabiltiyIRN.HasValue ?
                new ObjectParameter("AccountabiltiyIRN", accountabiltiyIRN) :
                new ObjectParameter("AccountabiltiyIRN", typeof(int));
    
            var attendingBuildingIRNParameter = attendingBuildingIRN.HasValue ?
                new ObjectParameter("AttendingBuildingIRN", attendingBuildingIRN) :
                new ObjectParameter("AttendingBuildingIRN", typeof(int));
    
            var majorityAttendanceSchoolIDParameter = majorityAttendanceSchoolID.HasValue ?
                new ObjectParameter("MajorityAttendanceSchoolID", majorityAttendanceSchoolID) :
                new ObjectParameter("MajorityAttendanceSchoolID", typeof(int));
    
            var admissiontoCurrentHighSchoolParameter = admissiontoCurrentHighSchool.HasValue ?
                new ObjectParameter("AdmissiontoCurrentHighSchool", admissiontoCurrentHighSchool) :
                new ObjectParameter("AdmissiontoCurrentHighSchool", typeof(System.DateTime));
    
            var oGTGraduationAlternativeParameter = oGTGraduationAlternative.HasValue ?
                new ObjectParameter("OGTGraduationAlternative", oGTGraduationAlternative) :
                new ObjectParameter("OGTGraduationAlternative", typeof(int));
    
            var cOREEconomicisandFinancialLiteracyRequirementMetParameter = cOREEconomicisandFinancialLiteracyRequirementMet.HasValue ?
                new ObjectParameter("COREEconomicisandFinancialLiteracyRequirementMet", cOREEconomicisandFinancialLiteracyRequirementMet) :
                new ObjectParameter("COREEconomicisandFinancialLiteracyRequirementMet", typeof(int));
    
            var cOREFineArtsRequirementMetParameter = cOREFineArtsRequirementMet.HasValue ?
                new ObjectParameter("COREFineArtsRequirementMet", cOREFineArtsRequirementMet) :
                new ObjectParameter("COREFineArtsRequirementMet", typeof(int));
    
            var exemptedfromPhysicalEducationGradRequirementParameter = exemptedfromPhysicalEducationGradRequirement.HasValue ?
                new ObjectParameter("ExemptedfromPhysicalEducationGradRequirement", exemptedfromPhysicalEducationGradRequirement) :
                new ObjectParameter("ExemptedfromPhysicalEducationGradRequirement", typeof(int));
    
            var cOREGraduationRequirementExemptionCodeParameter = cOREGraduationRequirementExemptionCode.HasValue ?
                new ObjectParameter("COREGraduationRequirementExemptionCode", cOREGraduationRequirementExemptionCode) :
                new ObjectParameter("COREGraduationRequirementExemptionCode", typeof(int));
    
            var cOREGraduationRequirementExemptionDateParameter = cOREGraduationRequirementExemptionDate.HasValue ?
                new ObjectParameter("COREGraduationRequirementExemptionDate", cOREGraduationRequirementExemptionDate) :
                new ObjectParameter("COREGraduationRequirementExemptionDate", typeof(System.DateTime));
    
            var cOREGraduationRequirementMetFlagParameter = cOREGraduationRequirementMetFlag.HasValue ?
                new ObjectParameter("COREGraduationRequirementMetFlag", cOREGraduationRequirementMetFlag) :
                new ObjectParameter("COREGraduationRequirementMetFlag", typeof(int));
    
            var militaryCompactGraduationAlternativeCountParameter = militaryCompactGraduationAlternativeCount.HasValue ?
                new ObjectParameter("MilitaryCompactGraduationAlternativeCount", militaryCompactGraduationAlternativeCount) :
                new ObjectParameter("MilitaryCompactGraduationAlternativeCount", typeof(int));
    
            var expectedGraduationDateParameter = expectedGraduationDate.HasValue ?
                new ObjectParameter("ExpectedGraduationDate", expectedGraduationDate) :
                new ObjectParameter("ExpectedGraduationDate", typeof(System.DateTime));
    
            var foreignExchangeStudentGraduationPlanParameter = foreignExchangeStudentGraduationPlan.HasValue ?
                new ObjectParameter("ForeignExchangeStudentGraduationPlan", foreignExchangeStudentGraduationPlan) :
                new ObjectParameter("ForeignExchangeStudentGraduationPlan", typeof(int));
    
            var cTEProgramofConcentrationParameter = cTEProgramofConcentration.HasValue ?
                new ObjectParameter("CTEProgramofConcentration", cTEProgramofConcentration) :
                new ObjectParameter("CTEProgramofConcentration", typeof(int));
    
            var fiscalYearStudentBegan9thGradeParameter = fiscalYearStudentBegan9thGrade.HasValue ?
                new ObjectParameter("FiscalYearStudentBegan9thGrade", fiscalYearStudentBegan9thGrade) :
                new ObjectParameter("FiscalYearStudentBegan9thGrade", typeof(int));
    
            var legacyStudentIDParameter = legacyStudentID != null ?
                new ObjectParameter("LegacyStudentID", legacyStudentID) :
                new ObjectParameter("LegacyStudentID", typeof(string));
    
            var externalUserNameParameter = externalUserName != null ?
                new ObjectParameter("ExternalUserName", externalUserName) :
                new ObjectParameter("ExternalUserName", typeof(string));
    
            var externalPasswordParameter = externalPassword != null ?
                new ObjectParameter("ExternalPassword", externalPassword) :
                new ObjectParameter("ExternalPassword", typeof(string));
    
            var serviceLevelParameter = serviceLevel.HasValue ?
                new ObjectParameter("ServiceLevel", serviceLevel) :
                new ObjectParameter("ServiceLevel", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentMoreInfo", studentIDParameter, disadvantagementParameter, preschoolpovertylevelParameter, retainedstatusParameter, regionParameter, tuitiontypeParameter, immigrantstatusParameter, studentPercentofTimeParameter, districtAdmissionDateParameter, assignedBuildingAreaIRNParameter, howReceivedParameter, howReceivedIRNParameter, sentReason1Parameter, senttoIRN1Parameter, senttoPercentofTime1Parameter, sentReason2Parameter, senttoIRN2Parameter, senttoPercentofTime2Parameter, previousYearDistrictIRNParameter, nextYearAttendingBuildingIRNParameter, accountabiltiyIRNParameter, attendingBuildingIRNParameter, majorityAttendanceSchoolIDParameter, admissiontoCurrentHighSchoolParameter, oGTGraduationAlternativeParameter, cOREEconomicisandFinancialLiteracyRequirementMetParameter, cOREFineArtsRequirementMetParameter, exemptedfromPhysicalEducationGradRequirementParameter, cOREGraduationRequirementExemptionCodeParameter, cOREGraduationRequirementExemptionDateParameter, cOREGraduationRequirementMetFlagParameter, militaryCompactGraduationAlternativeCountParameter, expectedGraduationDateParameter, foreignExchangeStudentGraduationPlanParameter, cTEProgramofConcentrationParameter, fiscalYearStudentBegan9thGradeParameter, legacyStudentIDParameter, externalUserNameParameter, externalPasswordParameter, serviceLevelParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentMoreInfo_Backup(Nullable<int> studentID, Nullable<int> disadvantagement, Nullable<int> preschoolpovertylevel, Nullable<int> retainedstatus, Nullable<int> region, Nullable<int> tuitiontype, Nullable<int> immigrantstatus, string studentPercentofTime, Nullable<System.DateTime> districtAdmissionDate, Nullable<int> assignedBuildingAreaIRN, Nullable<int> howReceived, Nullable<int> howReceivedIRN, Nullable<int> sentReason1, Nullable<int> senttoIRN1, string senttoPercentofTime1, Nullable<int> sentReason2, Nullable<int> senttoIRN2, string senttoPercentofTime2, Nullable<int> previousYearDistrictIRN, Nullable<int> nextYearAttendingBuildingIRN, Nullable<int> accountabiltiyIRN, Nullable<int> attendingBuildingIRN, Nullable<int> majorityAttendanceSchoolID, Nullable<System.DateTime> admissiontoCurrentHighSchool, Nullable<int> oGTGraduationAlternative, Nullable<int> cOREEconomicisandFinancialLiteracyRequirementMet, Nullable<int> cOREFineArtsRequirementMet, Nullable<int> exemptedfromPhysicalEducationGradRequirement, Nullable<int> cOREGraduationRequirementExemptionCode, Nullable<System.DateTime> cOREGraduationRequirementExemptionDate, Nullable<int> cOREGraduationRequirementMetFlag, Nullable<int> militaryCompactGraduationAlternativeCount, Nullable<System.DateTime> expectedGraduationDate, Nullable<int> foreignExchangeStudentGraduationPlan, Nullable<int> cTEProgramofConcentration, Nullable<int> fiscalYearStudentBegan9thGrade, string legacyStudentID, string externalUserName, string externalPassword, Nullable<int> serviceLevel, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var disadvantagementParameter = disadvantagement.HasValue ?
                new ObjectParameter("disadvantagement", disadvantagement) :
                new ObjectParameter("disadvantagement", typeof(int));
    
            var preschoolpovertylevelParameter = preschoolpovertylevel.HasValue ?
                new ObjectParameter("preschoolpovertylevel", preschoolpovertylevel) :
                new ObjectParameter("preschoolpovertylevel", typeof(int));
    
            var retainedstatusParameter = retainedstatus.HasValue ?
                new ObjectParameter("retainedstatus", retainedstatus) :
                new ObjectParameter("retainedstatus", typeof(int));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(int));
    
            var tuitiontypeParameter = tuitiontype.HasValue ?
                new ObjectParameter("tuitiontype", tuitiontype) :
                new ObjectParameter("tuitiontype", typeof(int));
    
            var immigrantstatusParameter = immigrantstatus.HasValue ?
                new ObjectParameter("Immigrantstatus", immigrantstatus) :
                new ObjectParameter("Immigrantstatus", typeof(int));
    
            var studentPercentofTimeParameter = studentPercentofTime != null ?
                new ObjectParameter("StudentPercentofTime", studentPercentofTime) :
                new ObjectParameter("StudentPercentofTime", typeof(string));
    
            var districtAdmissionDateParameter = districtAdmissionDate.HasValue ?
                new ObjectParameter("DistrictAdmissionDate", districtAdmissionDate) :
                new ObjectParameter("DistrictAdmissionDate", typeof(System.DateTime));
    
            var assignedBuildingAreaIRNParameter = assignedBuildingAreaIRN.HasValue ?
                new ObjectParameter("AssignedBuildingAreaIRN", assignedBuildingAreaIRN) :
                new ObjectParameter("AssignedBuildingAreaIRN", typeof(int));
    
            var howReceivedParameter = howReceived.HasValue ?
                new ObjectParameter("HowReceived", howReceived) :
                new ObjectParameter("HowReceived", typeof(int));
    
            var howReceivedIRNParameter = howReceivedIRN.HasValue ?
                new ObjectParameter("HowReceivedIRN", howReceivedIRN) :
                new ObjectParameter("HowReceivedIRN", typeof(int));
    
            var sentReason1Parameter = sentReason1.HasValue ?
                new ObjectParameter("SentReason1", sentReason1) :
                new ObjectParameter("SentReason1", typeof(int));
    
            var senttoIRN1Parameter = senttoIRN1.HasValue ?
                new ObjectParameter("SenttoIRN1", senttoIRN1) :
                new ObjectParameter("SenttoIRN1", typeof(int));
    
            var senttoPercentofTime1Parameter = senttoPercentofTime1 != null ?
                new ObjectParameter("SenttoPercentofTime1", senttoPercentofTime1) :
                new ObjectParameter("SenttoPercentofTime1", typeof(string));
    
            var sentReason2Parameter = sentReason2.HasValue ?
                new ObjectParameter("SentReason2", sentReason2) :
                new ObjectParameter("SentReason2", typeof(int));
    
            var senttoIRN2Parameter = senttoIRN2.HasValue ?
                new ObjectParameter("SenttoIRN2", senttoIRN2) :
                new ObjectParameter("SenttoIRN2", typeof(int));
    
            var senttoPercentofTime2Parameter = senttoPercentofTime2 != null ?
                new ObjectParameter("SenttoPercentofTime2", senttoPercentofTime2) :
                new ObjectParameter("SenttoPercentofTime2", typeof(string));
    
            var previousYearDistrictIRNParameter = previousYearDistrictIRN.HasValue ?
                new ObjectParameter("PreviousYearDistrictIRN", previousYearDistrictIRN) :
                new ObjectParameter("PreviousYearDistrictIRN", typeof(int));
    
            var nextYearAttendingBuildingIRNParameter = nextYearAttendingBuildingIRN.HasValue ?
                new ObjectParameter("NextYearAttendingBuildingIRN", nextYearAttendingBuildingIRN) :
                new ObjectParameter("NextYearAttendingBuildingIRN", typeof(int));
    
            var accountabiltiyIRNParameter = accountabiltiyIRN.HasValue ?
                new ObjectParameter("AccountabiltiyIRN", accountabiltiyIRN) :
                new ObjectParameter("AccountabiltiyIRN", typeof(int));
    
            var attendingBuildingIRNParameter = attendingBuildingIRN.HasValue ?
                new ObjectParameter("AttendingBuildingIRN", attendingBuildingIRN) :
                new ObjectParameter("AttendingBuildingIRN", typeof(int));
    
            var majorityAttendanceSchoolIDParameter = majorityAttendanceSchoolID.HasValue ?
                new ObjectParameter("MajorityAttendanceSchoolID", majorityAttendanceSchoolID) :
                new ObjectParameter("MajorityAttendanceSchoolID", typeof(int));
    
            var admissiontoCurrentHighSchoolParameter = admissiontoCurrentHighSchool.HasValue ?
                new ObjectParameter("AdmissiontoCurrentHighSchool", admissiontoCurrentHighSchool) :
                new ObjectParameter("AdmissiontoCurrentHighSchool", typeof(System.DateTime));
    
            var oGTGraduationAlternativeParameter = oGTGraduationAlternative.HasValue ?
                new ObjectParameter("OGTGraduationAlternative", oGTGraduationAlternative) :
                new ObjectParameter("OGTGraduationAlternative", typeof(int));
    
            var cOREEconomicisandFinancialLiteracyRequirementMetParameter = cOREEconomicisandFinancialLiteracyRequirementMet.HasValue ?
                new ObjectParameter("COREEconomicisandFinancialLiteracyRequirementMet", cOREEconomicisandFinancialLiteracyRequirementMet) :
                new ObjectParameter("COREEconomicisandFinancialLiteracyRequirementMet", typeof(int));
    
            var cOREFineArtsRequirementMetParameter = cOREFineArtsRequirementMet.HasValue ?
                new ObjectParameter("COREFineArtsRequirementMet", cOREFineArtsRequirementMet) :
                new ObjectParameter("COREFineArtsRequirementMet", typeof(int));
    
            var exemptedfromPhysicalEducationGradRequirementParameter = exemptedfromPhysicalEducationGradRequirement.HasValue ?
                new ObjectParameter("ExemptedfromPhysicalEducationGradRequirement", exemptedfromPhysicalEducationGradRequirement) :
                new ObjectParameter("ExemptedfromPhysicalEducationGradRequirement", typeof(int));
    
            var cOREGraduationRequirementExemptionCodeParameter = cOREGraduationRequirementExemptionCode.HasValue ?
                new ObjectParameter("COREGraduationRequirementExemptionCode", cOREGraduationRequirementExemptionCode) :
                new ObjectParameter("COREGraduationRequirementExemptionCode", typeof(int));
    
            var cOREGraduationRequirementExemptionDateParameter = cOREGraduationRequirementExemptionDate.HasValue ?
                new ObjectParameter("COREGraduationRequirementExemptionDate", cOREGraduationRequirementExemptionDate) :
                new ObjectParameter("COREGraduationRequirementExemptionDate", typeof(System.DateTime));
    
            var cOREGraduationRequirementMetFlagParameter = cOREGraduationRequirementMetFlag.HasValue ?
                new ObjectParameter("COREGraduationRequirementMetFlag", cOREGraduationRequirementMetFlag) :
                new ObjectParameter("COREGraduationRequirementMetFlag", typeof(int));
    
            var militaryCompactGraduationAlternativeCountParameter = militaryCompactGraduationAlternativeCount.HasValue ?
                new ObjectParameter("MilitaryCompactGraduationAlternativeCount", militaryCompactGraduationAlternativeCount) :
                new ObjectParameter("MilitaryCompactGraduationAlternativeCount", typeof(int));
    
            var expectedGraduationDateParameter = expectedGraduationDate.HasValue ?
                new ObjectParameter("ExpectedGraduationDate", expectedGraduationDate) :
                new ObjectParameter("ExpectedGraduationDate", typeof(System.DateTime));
    
            var foreignExchangeStudentGraduationPlanParameter = foreignExchangeStudentGraduationPlan.HasValue ?
                new ObjectParameter("ForeignExchangeStudentGraduationPlan", foreignExchangeStudentGraduationPlan) :
                new ObjectParameter("ForeignExchangeStudentGraduationPlan", typeof(int));
    
            var cTEProgramofConcentrationParameter = cTEProgramofConcentration.HasValue ?
                new ObjectParameter("CTEProgramofConcentration", cTEProgramofConcentration) :
                new ObjectParameter("CTEProgramofConcentration", typeof(int));
    
            var fiscalYearStudentBegan9thGradeParameter = fiscalYearStudentBegan9thGrade.HasValue ?
                new ObjectParameter("FiscalYearStudentBegan9thGrade", fiscalYearStudentBegan9thGrade) :
                new ObjectParameter("FiscalYearStudentBegan9thGrade", typeof(int));
    
            var legacyStudentIDParameter = legacyStudentID != null ?
                new ObjectParameter("LegacyStudentID", legacyStudentID) :
                new ObjectParameter("LegacyStudentID", typeof(string));
    
            var externalUserNameParameter = externalUserName != null ?
                new ObjectParameter("ExternalUserName", externalUserName) :
                new ObjectParameter("ExternalUserName", typeof(string));
    
            var externalPasswordParameter = externalPassword != null ?
                new ObjectParameter("ExternalPassword", externalPassword) :
                new ObjectParameter("ExternalPassword", typeof(string));
    
            var serviceLevelParameter = serviceLevel.HasValue ?
                new ObjectParameter("ServiceLevel", serviceLevel) :
                new ObjectParameter("ServiceLevel", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentMoreInfo_Backup", studentIDParameter, disadvantagementParameter, preschoolpovertylevelParameter, retainedstatusParameter, regionParameter, tuitiontypeParameter, immigrantstatusParameter, studentPercentofTimeParameter, districtAdmissionDateParameter, assignedBuildingAreaIRNParameter, howReceivedParameter, howReceivedIRNParameter, sentReason1Parameter, senttoIRN1Parameter, senttoPercentofTime1Parameter, sentReason2Parameter, senttoIRN2Parameter, senttoPercentofTime2Parameter, previousYearDistrictIRNParameter, nextYearAttendingBuildingIRNParameter, accountabiltiyIRNParameter, attendingBuildingIRNParameter, majorityAttendanceSchoolIDParameter, admissiontoCurrentHighSchoolParameter, oGTGraduationAlternativeParameter, cOREEconomicisandFinancialLiteracyRequirementMetParameter, cOREFineArtsRequirementMetParameter, exemptedfromPhysicalEducationGradRequirementParameter, cOREGraduationRequirementExemptionCodeParameter, cOREGraduationRequirementExemptionDateParameter, cOREGraduationRequirementMetFlagParameter, militaryCompactGraduationAlternativeCountParameter, expectedGraduationDateParameter, foreignExchangeStudentGraduationPlanParameter, cTEProgramofConcentrationParameter, fiscalYearStudentBegan9thGradeParameter, legacyStudentIDParameter, externalUserNameParameter, externalPasswordParameter, serviceLevelParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual int uspUpdateStudentNote(Nullable<int> studentNoteId, Nullable<int> studentId, Nullable<System.DateTime> openDate, Nullable<int> categoryId, Nullable<int> subjectId, Nullable<int> methodId, Nullable<bool> followUp, string followUpDate, Nullable<int> staffId, string closedDate, string description, byte[] documentData, string documentExtension, string documentSize, string documentType, string documentName, string buttonName, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentNoteIdParameter = studentNoteId.HasValue ?
                new ObjectParameter("StudentNoteId", studentNoteId) :
                new ObjectParameter("StudentNoteId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var openDateParameter = openDate.HasValue ?
                new ObjectParameter("OpenDate", openDate) :
                new ObjectParameter("OpenDate", typeof(System.DateTime));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("SubjectId", subjectId) :
                new ObjectParameter("SubjectId", typeof(int));
    
            var methodIdParameter = methodId.HasValue ?
                new ObjectParameter("MethodId", methodId) :
                new ObjectParameter("MethodId", typeof(int));
    
            var followUpParameter = followUp.HasValue ?
                new ObjectParameter("FollowUp", followUp) :
                new ObjectParameter("FollowUp", typeof(bool));
    
            var followUpDateParameter = followUpDate != null ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(string));
    
            var staffIdParameter = staffId.HasValue ?
                new ObjectParameter("StaffId", staffId) :
                new ObjectParameter("StaffId", typeof(int));
    
            var closedDateParameter = closedDate != null ?
                new ObjectParameter("ClosedDate", closedDate) :
                new ObjectParameter("ClosedDate", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var documentDataParameter = documentData != null ?
                new ObjectParameter("DocumentData", documentData) :
                new ObjectParameter("DocumentData", typeof(byte[]));
    
            var documentExtensionParameter = documentExtension != null ?
                new ObjectParameter("DocumentExtension", documentExtension) :
                new ObjectParameter("DocumentExtension", typeof(string));
    
            var documentSizeParameter = documentSize != null ?
                new ObjectParameter("DocumentSize", documentSize) :
                new ObjectParameter("DocumentSize", typeof(string));
    
            var documentTypeParameter = documentType != null ?
                new ObjectParameter("DocumentType", documentType) :
                new ObjectParameter("DocumentType", typeof(string));
    
            var documentNameParameter = documentName != null ?
                new ObjectParameter("DocumentName", documentName) :
                new ObjectParameter("DocumentName", typeof(string));
    
            var buttonNameParameter = buttonName != null ?
                new ObjectParameter("buttonName", buttonName) :
                new ObjectParameter("buttonName", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("modifiedBy", modifiedBy) :
                new ObjectParameter("modifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("modifiedDate", modifiedDate) :
                new ObjectParameter("modifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateStudentNote", studentNoteIdParameter, studentIdParameter, openDateParameter, categoryIdParameter, subjectIdParameter, methodIdParameter, followUpParameter, followUpDateParameter, staffIdParameter, closedDateParameter, descriptionParameter, documentDataParameter, documentExtensionParameter, documentSizeParameter, documentTypeParameter, documentNameParameter, buttonNameParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentOrientationDetails(Nullable<int> orientationid, Nullable<int> studentID, string remarks, Nullable<int> orientaionstatus, Nullable<int> advisorpersonid, Nullable<int> enrollmentcodepl, Nullable<int> districtrelationcode, Nullable<int> createdby, Nullable<System.DateTime> createddate)
        {
            var orientationidParameter = orientationid.HasValue ?
                new ObjectParameter("orientationid", orientationid) :
                new ObjectParameter("orientationid", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var orientaionstatusParameter = orientaionstatus.HasValue ?
                new ObjectParameter("orientaionstatus", orientaionstatus) :
                new ObjectParameter("orientaionstatus", typeof(int));
    
            var advisorpersonidParameter = advisorpersonid.HasValue ?
                new ObjectParameter("advisorpersonid", advisorpersonid) :
                new ObjectParameter("advisorpersonid", typeof(int));
    
            var enrollmentcodeplParameter = enrollmentcodepl.HasValue ?
                new ObjectParameter("enrollmentcodepl", enrollmentcodepl) :
                new ObjectParameter("enrollmentcodepl", typeof(int));
    
            var districtrelationcodeParameter = districtrelationcode.HasValue ?
                new ObjectParameter("districtrelationcode", districtrelationcode) :
                new ObjectParameter("districtrelationcode", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentOrientationDetails", orientationidParameter, studentIDParameter, remarksParameter, orientaionstatusParameter, advisorpersonidParameter, enrollmentcodeplParameter, districtrelationcodeParameter, createdbyParameter, createddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentOrientationDetailsByOrientationID(Nullable<int> orientationscheduleid, string orientationdate, string orientationtime, Nullable<int> orientationtypepl, Nullable<int> counselorid, Nullable<int> location, Nullable<int> room, Nullable<int> studentid, Nullable<int> modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var orientationscheduleidParameter = orientationscheduleid.HasValue ?
                new ObjectParameter("orientationscheduleid", orientationscheduleid) :
                new ObjectParameter("orientationscheduleid", typeof(int));
    
            var orientationdateParameter = orientationdate != null ?
                new ObjectParameter("orientationdate", orientationdate) :
                new ObjectParameter("orientationdate", typeof(string));
    
            var orientationtimeParameter = orientationtime != null ?
                new ObjectParameter("orientationtime", orientationtime) :
                new ObjectParameter("orientationtime", typeof(string));
    
            var orientationtypeplParameter = orientationtypepl.HasValue ?
                new ObjectParameter("orientationtypepl", orientationtypepl) :
                new ObjectParameter("orientationtypepl", typeof(int));
    
            var counseloridParameter = counselorid.HasValue ?
                new ObjectParameter("counselorid", counselorid) :
                new ObjectParameter("counselorid", typeof(int));
    
            var locationParameter = location.HasValue ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(int));
    
            var roomParameter = room.HasValue ?
                new ObjectParameter("room", room) :
                new ObjectParameter("room", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var modifiedbyParameter = modifiedby.HasValue ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(int));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentOrientationDetailsByOrientationID", orientationscheduleidParameter, orientationdateParameter, orientationtimeParameter, orientationtypeplParameter, counseloridParameter, locationParameter, roomParameter, studentidParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual int uspUpdateStudentsAttendanceReasons(string studentIdReasonArray, Nullable<System.DateTime> attendanceDate, Nullable<int> periodId)
        {
            var studentIdReasonArrayParameter = studentIdReasonArray != null ?
                new ObjectParameter("StudentIdReasonArray", studentIdReasonArray) :
                new ObjectParameter("StudentIdReasonArray", typeof(string));
    
            var attendanceDateParameter = attendanceDate.HasValue ?
                new ObjectParameter("AttendanceDate", attendanceDate) :
                new ObjectParameter("AttendanceDate", typeof(System.DateTime));
    
            var periodIdParameter = periodId.HasValue ?
                new ObjectParameter("PeriodId", periodId) :
                new ObjectParameter("PeriodId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateStudentsAttendanceReasons", studentIdReasonArrayParameter, attendanceDateParameter, periodIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentScheduleDates(Nullable<int> studentScheduleId, Nullable<System.DateTime> startDate, string endDate, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentScheduleIdParameter = studentScheduleId.HasValue ?
                new ObjectParameter("StudentScheduleId", studentScheduleId) :
                new ObjectParameter("StudentScheduleId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentScheduleDates", studentScheduleIdParameter, startDateParameter, endDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentSPEDGoals(Nullable<int> studentId, Nullable<System.DateTime> iEPDate, string sPEDGoalsPL, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var iEPDateParameter = iEPDate.HasValue ?
                new ObjectParameter("IEPDate", iEPDate) :
                new ObjectParameter("IEPDate", typeof(System.DateTime));
    
            var sPEDGoalsPLParameter = sPEDGoalsPL != null ?
                new ObjectParameter("SPEDGoalsPL", sPEDGoalsPL) :
                new ObjectParameter("SPEDGoalsPL", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentSPEDGoals", studentIdParameter, iEPDateParameter, sPEDGoalsPLParameter, isActiveParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<string> uspUpdateStudentStatusInformation(Nullable<int> studentID, Nullable<int> districtID, Nullable<int> schoolID, Nullable<int> activeStatus, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("schoolID", schoolID) :
                new ObjectParameter("schoolID", typeof(int));
    
            var activeStatusParameter = activeStatus.HasValue ?
                new ObjectParameter("ActiveStatus", activeStatus) :
                new ObjectParameter("ActiveStatus", typeof(int));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspUpdateStudentStatusInformation", studentIDParameter, districtIDParameter, schoolIDParameter, activeStatusParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentTimesForApproval(string studentString, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentStringParameter = studentString != null ?
                new ObjectParameter("StudentString", studentString) :
                new ObjectParameter("StudentString", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentTimesForApproval", studentStringParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentTimeSummary(string studentString, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var studentStringParameter = studentString != null ?
                new ObjectParameter("StudentString", studentString) :
                new ObjectParameter("StudentString", typeof(string));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentTimeSummary", studentStringParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateStudentWithdrawls(Nullable<int> withdrawlID, Nullable<int> studentID, string withdrawlDate, Nullable<int> withdrawlCode, string withdrawlDescription, Nullable<int> plansToAttendDistrict, Nullable<int> graduationYear, string dIplomaDate, Nullable<int> diplomaType, Nullable<int> withdrawalSchoolID, Nullable<System.DateTime> dateCourseCompleted, Nullable<int> districtCourseCompleted, Nullable<int> createdBy, Nullable<System.DateTime> createdDate)
        {
            var withdrawlIDParameter = withdrawlID.HasValue ?
                new ObjectParameter("WithdrawlID", withdrawlID) :
                new ObjectParameter("WithdrawlID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var withdrawlDateParameter = withdrawlDate != null ?
                new ObjectParameter("WithdrawlDate", withdrawlDate) :
                new ObjectParameter("WithdrawlDate", typeof(string));
    
            var withdrawlCodeParameter = withdrawlCode.HasValue ?
                new ObjectParameter("WithdrawlCode", withdrawlCode) :
                new ObjectParameter("WithdrawlCode", typeof(int));
    
            var withdrawlDescriptionParameter = withdrawlDescription != null ?
                new ObjectParameter("WithdrawlDescription", withdrawlDescription) :
                new ObjectParameter("WithdrawlDescription", typeof(string));
    
            var plansToAttendDistrictParameter = plansToAttendDistrict.HasValue ?
                new ObjectParameter("PlansToAttendDistrict", plansToAttendDistrict) :
                new ObjectParameter("PlansToAttendDistrict", typeof(int));
    
            var graduationYearParameter = graduationYear.HasValue ?
                new ObjectParameter("GraduationYear", graduationYear) :
                new ObjectParameter("GraduationYear", typeof(int));
    
            var dIplomaDateParameter = dIplomaDate != null ?
                new ObjectParameter("DIplomaDate", dIplomaDate) :
                new ObjectParameter("DIplomaDate", typeof(string));
    
            var diplomaTypeParameter = diplomaType.HasValue ?
                new ObjectParameter("DiplomaType", diplomaType) :
                new ObjectParameter("DiplomaType", typeof(int));
    
            var withdrawalSchoolIDParameter = withdrawalSchoolID.HasValue ?
                new ObjectParameter("WithdrawalSchoolID", withdrawalSchoolID) :
                new ObjectParameter("WithdrawalSchoolID", typeof(int));
    
            var dateCourseCompletedParameter = dateCourseCompleted.HasValue ?
                new ObjectParameter("DateCourseCompleted", dateCourseCompleted) :
                new ObjectParameter("DateCourseCompleted", typeof(System.DateTime));
    
            var districtCourseCompletedParameter = districtCourseCompleted.HasValue ?
                new ObjectParameter("DistrictCourseCompleted", districtCourseCompleted) :
                new ObjectParameter("DistrictCourseCompleted", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateStudentWithdrawls", withdrawlIDParameter, studentIDParameter, withdrawlDateParameter, withdrawlCodeParameter, withdrawlDescriptionParameter, plansToAttendDistrictParameter, graduationYearParameter, dIplomaDateParameter, diplomaTypeParameter, withdrawalSchoolIDParameter, dateCourseCompletedParameter, districtCourseCompletedParameter, createdByParameter, createdDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUpdateUserRole(Nullable<short> roleID, string roleName, string roleDescription)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("roleID", roleID) :
                new ObjectParameter("roleID", typeof(short));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("roleName", roleName) :
                new ObjectParameter("roleName", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("roleDescription", roleDescription) :
                new ObjectParameter("roleDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUpdateUserRole", roleIDParameter, roleNameParameter, roleDescriptionParameter);
        }
    
        public virtual int uspUpdateVictims(Nullable<int> victimid, Nullable<int> victimtype, Nullable<int> studentid, Nullable<int> gradelevel, Nullable<int> staffid, string othervictimfullname, Nullable<int> age, string victimdescription, string modifiedby, Nullable<System.DateTime> modifieddate)
        {
            var victimidParameter = victimid.HasValue ?
                new ObjectParameter("victimid", victimid) :
                new ObjectParameter("victimid", typeof(int));
    
            var victimtypeParameter = victimtype.HasValue ?
                new ObjectParameter("victimtype", victimtype) :
                new ObjectParameter("victimtype", typeof(int));
    
            var studentidParameter = studentid.HasValue ?
                new ObjectParameter("studentid", studentid) :
                new ObjectParameter("studentid", typeof(int));
    
            var gradelevelParameter = gradelevel.HasValue ?
                new ObjectParameter("gradelevel", gradelevel) :
                new ObjectParameter("gradelevel", typeof(int));
    
            var staffidParameter = staffid.HasValue ?
                new ObjectParameter("staffid", staffid) :
                new ObjectParameter("staffid", typeof(int));
    
            var othervictimfullnameParameter = othervictimfullname != null ?
                new ObjectParameter("othervictimfullname", othervictimfullname) :
                new ObjectParameter("othervictimfullname", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(int));
    
            var victimdescriptionParameter = victimdescription != null ?
                new ObjectParameter("victimdescription", victimdescription) :
                new ObjectParameter("victimdescription", typeof(string));
    
            var modifiedbyParameter = modifiedby != null ?
                new ObjectParameter("modifiedby", modifiedby) :
                new ObjectParameter("modifiedby", typeof(string));
    
            var modifieddateParameter = modifieddate.HasValue ?
                new ObjectParameter("modifieddate", modifieddate) :
                new ObjectParameter("modifieddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateVictims", victimidParameter, victimtypeParameter, studentidParameter, gradelevelParameter, staffidParameter, othervictimfullnameParameter, ageParameter, victimdescriptionParameter, modifiedbyParameter, modifieddateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUserEmailCheck(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUserEmailCheck", emailParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUserForgotPasswordKeyAdd(string email, string passwordKey)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUserForgotPasswordKeyAdd", emailParameter, passwordKeyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspUserForgotPasswordKeyCheck(string email, string passwordKey)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordKeyParameter = passwordKey != null ?
                new ObjectParameter("PasswordKey", passwordKey) :
                new ObjectParameter("PasswordKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspUserForgotPasswordKeyCheck", emailParameter, passwordKeyParameter);
        }
    
        public virtual int uspUserLoginCheck(string userName, string pwd)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUserLoginCheck", userNameParameter, pwdParameter);
        }
    
        public virtual ObjectResult<uspUserLoginDetailsCheck_Result> uspUserLoginDetailsCheck(string userName, string pwd)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pwdParameter = pwd != null ?
                new ObjectParameter("Pwd", pwd) :
                new ObjectParameter("Pwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUserLoginDetailsCheck_Result>("uspUserLoginDetailsCheck", userNameParameter, pwdParameter);
        }
    
        public virtual int uspUserMenuItemsGet(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUserMenuItemsGet", usernameParameter);
        }
    
        public virtual ObjectResult<uspUserRolesByUserIdGet_Result> uspUserRolesByUserIdGet(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspUserRolesByUserIdGet_Result>("uspUserRolesByUserIdGet", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspVerifyStudentContactAddress(Nullable<int> portalContactAddressId, Nullable<int> currentContactAddressId, Nullable<int> addressTypePL, Nullable<int> studentId, Nullable<bool> isApproved, string reviewerName, Nullable<int> reviewerId, Nullable<System.DateTime> reviewedDate, Nullable<int> rejectedReasonPL, string currentContactAddressStartDate, string currentContactAddressEndDate, string newAddressStartDate, Nullable<int> primaryFlag)
        {
            var portalContactAddressIdParameter = portalContactAddressId.HasValue ?
                new ObjectParameter("PortalContactAddressId", portalContactAddressId) :
                new ObjectParameter("PortalContactAddressId", typeof(int));
    
            var currentContactAddressIdParameter = currentContactAddressId.HasValue ?
                new ObjectParameter("CurrentContactAddressId", currentContactAddressId) :
                new ObjectParameter("CurrentContactAddressId", typeof(int));
    
            var addressTypePLParameter = addressTypePL.HasValue ?
                new ObjectParameter("AddressTypePL", addressTypePL) :
                new ObjectParameter("AddressTypePL", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var reviewerNameParameter = reviewerName != null ?
                new ObjectParameter("ReviewerName", reviewerName) :
                new ObjectParameter("ReviewerName", typeof(string));
    
            var reviewerIdParameter = reviewerId.HasValue ?
                new ObjectParameter("ReviewerId", reviewerId) :
                new ObjectParameter("ReviewerId", typeof(int));
    
            var reviewedDateParameter = reviewedDate.HasValue ?
                new ObjectParameter("ReviewedDate", reviewedDate) :
                new ObjectParameter("ReviewedDate", typeof(System.DateTime));
    
            var rejectedReasonPLParameter = rejectedReasonPL.HasValue ?
                new ObjectParameter("RejectedReasonPL", rejectedReasonPL) :
                new ObjectParameter("RejectedReasonPL", typeof(int));
    
            var currentContactAddressStartDateParameter = currentContactAddressStartDate != null ?
                new ObjectParameter("CurrentContactAddressStartDate", currentContactAddressStartDate) :
                new ObjectParameter("CurrentContactAddressStartDate", typeof(string));
    
            var currentContactAddressEndDateParameter = currentContactAddressEndDate != null ?
                new ObjectParameter("CurrentContactAddressEndDate", currentContactAddressEndDate) :
                new ObjectParameter("CurrentContactAddressEndDate", typeof(string));
    
            var newAddressStartDateParameter = newAddressStartDate != null ?
                new ObjectParameter("NewAddressStartDate", newAddressStartDate) :
                new ObjectParameter("NewAddressStartDate", typeof(string));
    
            var primaryFlagParameter = primaryFlag.HasValue ?
                new ObjectParameter("PrimaryFlag", primaryFlag) :
                new ObjectParameter("PrimaryFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspVerifyStudentContactAddress", portalContactAddressIdParameter, currentContactAddressIdParameter, addressTypePLParameter, studentIdParameter, isApprovedParameter, reviewerNameParameter, reviewerIdParameter, reviewedDateParameter, rejectedReasonPLParameter, currentContactAddressStartDateParameter, currentContactAddressEndDateParameter, newAddressStartDateParameter, primaryFlagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspVerifyStudentPortalAddress(Nullable<int> portalStudentAddressId, Nullable<int> currentAddressId, Nullable<int> addressTypePL, Nullable<int> studentId, Nullable<bool> isApproved, string reviewerName, Nullable<int> reviewerId, Nullable<System.DateTime> reviewedDate, Nullable<int> rejectedReasonPL, string currentAddressStartDate, string currentAddressEndDate, string newAddressStartDate, Nullable<int> primaryFlag, string actionType)
        {
            var portalStudentAddressIdParameter = portalStudentAddressId.HasValue ?
                new ObjectParameter("PortalStudentAddressId", portalStudentAddressId) :
                new ObjectParameter("PortalStudentAddressId", typeof(int));
    
            var currentAddressIdParameter = currentAddressId.HasValue ?
                new ObjectParameter("CurrentAddressId", currentAddressId) :
                new ObjectParameter("CurrentAddressId", typeof(int));
    
            var addressTypePLParameter = addressTypePL.HasValue ?
                new ObjectParameter("AddressTypePL", addressTypePL) :
                new ObjectParameter("AddressTypePL", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var reviewerNameParameter = reviewerName != null ?
                new ObjectParameter("ReviewerName", reviewerName) :
                new ObjectParameter("ReviewerName", typeof(string));
    
            var reviewerIdParameter = reviewerId.HasValue ?
                new ObjectParameter("ReviewerId", reviewerId) :
                new ObjectParameter("ReviewerId", typeof(int));
    
            var reviewedDateParameter = reviewedDate.HasValue ?
                new ObjectParameter("ReviewedDate", reviewedDate) :
                new ObjectParameter("ReviewedDate", typeof(System.DateTime));
    
            var rejectedReasonPLParameter = rejectedReasonPL.HasValue ?
                new ObjectParameter("RejectedReasonPL", rejectedReasonPL) :
                new ObjectParameter("RejectedReasonPL", typeof(int));
    
            var currentAddressStartDateParameter = currentAddressStartDate != null ?
                new ObjectParameter("CurrentAddressStartDate", currentAddressStartDate) :
                new ObjectParameter("CurrentAddressStartDate", typeof(string));
    
            var currentAddressEndDateParameter = currentAddressEndDate != null ?
                new ObjectParameter("CurrentAddressEndDate", currentAddressEndDate) :
                new ObjectParameter("CurrentAddressEndDate", typeof(string));
    
            var newAddressStartDateParameter = newAddressStartDate != null ?
                new ObjectParameter("NewAddressStartDate", newAddressStartDate) :
                new ObjectParameter("NewAddressStartDate", typeof(string));
    
            var primaryFlagParameter = primaryFlag.HasValue ?
                new ObjectParameter("PrimaryFlag", primaryFlag) :
                new ObjectParameter("PrimaryFlag", typeof(int));
    
            var actionTypeParameter = actionType != null ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspVerifyStudentPortalAddress", portalStudentAddressIdParameter, currentAddressIdParameter, addressTypePLParameter, studentIdParameter, isApprovedParameter, reviewerNameParameter, reviewerIdParameter, reviewedDateParameter, rejectedReasonPLParameter, currentAddressStartDateParameter, currentAddressEndDateParameter, newAddressStartDateParameter, primaryFlagParameter, actionTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspVerifyStudentPortalContactPhone(Nullable<int> portalStudentContactPhoneId, Nullable<int> currentContactPhoneID, Nullable<int> studentId, Nullable<bool> isApproved, string reviewer, Nullable<int> reviewerId, Nullable<System.DateTime> reviewedDate, Nullable<int> rejectedReasonPL)
        {
            var portalStudentContactPhoneIdParameter = portalStudentContactPhoneId.HasValue ?
                new ObjectParameter("PortalStudentContactPhoneId", portalStudentContactPhoneId) :
                new ObjectParameter("PortalStudentContactPhoneId", typeof(int));
    
            var currentContactPhoneIDParameter = currentContactPhoneID.HasValue ?
                new ObjectParameter("CurrentContactPhoneID", currentContactPhoneID) :
                new ObjectParameter("CurrentContactPhoneID", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var reviewerParameter = reviewer != null ?
                new ObjectParameter("Reviewer", reviewer) :
                new ObjectParameter("Reviewer", typeof(string));
    
            var reviewerIdParameter = reviewerId.HasValue ?
                new ObjectParameter("ReviewerId", reviewerId) :
                new ObjectParameter("ReviewerId", typeof(int));
    
            var reviewedDateParameter = reviewedDate.HasValue ?
                new ObjectParameter("ReviewedDate", reviewedDate) :
                new ObjectParameter("ReviewedDate", typeof(System.DateTime));
    
            var rejectedReasonPLParameter = rejectedReasonPL.HasValue ?
                new ObjectParameter("RejectedReasonPL", rejectedReasonPL) :
                new ObjectParameter("RejectedReasonPL", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspVerifyStudentPortalContactPhone", portalStudentContactPhoneIdParameter, currentContactPhoneIDParameter, studentIdParameter, isApprovedParameter, reviewerParameter, reviewerIdParameter, reviewedDateParameter, rejectedReasonPLParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspVerifyStudentPortalPhone(Nullable<int> portalStudentPhoneId, Nullable<int> currentPhoneID, Nullable<int> studentId, Nullable<bool> isApproved, string reviewer, Nullable<int> reviewerId, Nullable<System.DateTime> reviewedDate, Nullable<int> rejectedReasonPL, string currentPhoneEndDate, string newPhoneStartDate)
        {
            var portalStudentPhoneIdParameter = portalStudentPhoneId.HasValue ?
                new ObjectParameter("PortalStudentPhoneId", portalStudentPhoneId) :
                new ObjectParameter("PortalStudentPhoneId", typeof(int));
    
            var currentPhoneIDParameter = currentPhoneID.HasValue ?
                new ObjectParameter("CurrentPhoneID", currentPhoneID) :
                new ObjectParameter("CurrentPhoneID", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("StudentId", studentId) :
                new ObjectParameter("StudentId", typeof(int));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var reviewerParameter = reviewer != null ?
                new ObjectParameter("Reviewer", reviewer) :
                new ObjectParameter("Reviewer", typeof(string));
    
            var reviewerIdParameter = reviewerId.HasValue ?
                new ObjectParameter("ReviewerId", reviewerId) :
                new ObjectParameter("ReviewerId", typeof(int));
    
            var reviewedDateParameter = reviewedDate.HasValue ?
                new ObjectParameter("ReviewedDate", reviewedDate) :
                new ObjectParameter("ReviewedDate", typeof(System.DateTime));
    
            var rejectedReasonPLParameter = rejectedReasonPL.HasValue ?
                new ObjectParameter("RejectedReasonPL", rejectedReasonPL) :
                new ObjectParameter("RejectedReasonPL", typeof(int));
    
            var currentPhoneEndDateParameter = currentPhoneEndDate != null ?
                new ObjectParameter("CurrentPhoneEndDate", currentPhoneEndDate) :
                new ObjectParameter("CurrentPhoneEndDate", typeof(string));
    
            var newPhoneStartDateParameter = newPhoneStartDate != null ?
                new ObjectParameter("NewPhoneStartDate", newPhoneStartDate) :
                new ObjectParameter("NewPhoneStartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspVerifyStudentPortalPhone", portalStudentPhoneIdParameter, currentPhoneIDParameter, studentIdParameter, isApprovedParameter, reviewerParameter, reviewerIdParameter, reviewedDateParameter, rejectedReasonPLParameter, currentPhoneEndDateParameter, newPhoneStartDateParameter);
        }
    }
}
